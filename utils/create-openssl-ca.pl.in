#!@PERL@ @PERL_ARGS@
######################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 create-openssl-ca.pl

Creates certificates and keys for using the GridShibCA with an
OpenSSL-based CA.

=head2 Usage

create-openssl-ca.pl [<options>]

B<Options>:

I<-h>                  Print help and exit.

I<-k>                 CA key length in bits [Default is 2048]

I<-l> E<lt>lifetimeE<gt>       CA Lifetime in days [Default is 10 years]

=head2 Return Value

Zero on success, one on error.

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

######################################################################

use File::Path;

use GridShibCA::Config;
use GridShibCA::X509DN;
my $config = GridShibCA::Config->new();

my $confPath = $config->getParam("OpenSSLCA", "Path");
my $runtimePath = $config->getParam("OpenSSLCA", "RuntimePath");
my $openssl = $config->getParam("Binaries", "OpenSSL");
my $certFile = $config->getParam("OpenSSLCA", "CACert");
my $keyFile = $config->getParam("OpenSSLCA", "CAKey");

######################################################################

use Getopt::Std;


# Default CA lifetime is 10 years
my $lifetime = sprintf("%d", 10 * 365);

# Key length in bits
my $keyLength = 2048;

my $usage = <<"EOF";
Usage: $0 [<options>]

Options are:
 -h                  Print help
 -k                  CA key length in bits [Default is $keyLength]
 -l <lifetime>       CA Lifetime in days [Default is $lifetime]
EOF

my %options;
getopts('hl:k:', \%options);

if ($options{h})
{
    print $usage;
    exit(0);
}

if ($options{k})
{
    $keyLength = $options{k};
}

if ($options{l})
{
    $lifetime = $options{l};
}

######################################################################

# Get our relative DN
my $relativeDN = GridShibCA::X509DN->new("@RELATIVE_DN@")->getOpenSSLDN();

# Get our CA DN
my $subject = GridShibCA::X509DN->new("@CA_DN@")->getOpenSSLDN();

######################################################################

umask(0077);

######################################################################

print "Creating OpenSSL-based CA\n";
print " OpenSSL is $openssl\n";
print " GridShibCA path is $confPath\n";
print " Keyfile is $keyFile\n";
print " Key length is $keyLength\n";
print " Certificate is $certFile\n";
print " DN for CA is $subject\n";
print " Relative DN is $relativeDN\n";
print " Lifetime is $lifetime\n";
print "\n";

if ( ! -d $confPath)
{
    print "Creating directory $confPath\n";
    File::Path::mkpath($confPath) ||
	die "Failed to create directory $confPath: $!";
}

if ( ! -d $runtimePath)
{
    print "Creating directory $runtimePath\n";
    File::Path::mkpath($runtimePath) ||
	die "Failed to create directory $runtimePath: $!";
}

print "Generating keys. This may take a minute...\n";

my @args = ();
push(@args, "req");
push(@args, "-x509");
push(@args, "-newkey", "rsa:$keyLength");
push(@args, "-out", $certFile);
push(@args, "-keyout", $keyFile);
push(@args, "-days", $lifetime);
push(@args, "-nodes");
push(@args, "-subj", $subject);

my $cmd = $config->getCommand($openssl, @args);

if (!$cmd->exec())
{
    print "Execution of $openssl failed: " . $cmd->getError() . "\n";
    exit(1);
}

######################################################################

print "Getting hash of GridShib CA\n";

@args = ();
push(@args, "x509");
push(@args, "-in", $certFile);
push(@args, "-hash");
push(@args, "-noout");

$cmd = $config->getCommand($openssl, @args);

if (!$cmd->exec())
{
    print "Execution of $openssl failed: " . $cmd->getError();
    exit(1);
}
my $hash = $cmd->getOutput();
chomp($hash);

print " Hash is $hash\n";

######################################################################

use File::Copy;

my $hashFile = "${confPath}/${hash}.0";

print "Copying CA certificate to $hashFile\n";

if (copy($certFile, $hashFile) == 0)
{
    print "Copy failed: $!\n";
    exit(1);
}

######################################################################

my $policyFile = "${confPath}/${hash}.signing_policy";
my $signingSpace = $relativeDN . "/*";

# Remove duplicate /'s
$signingSpace =~ s/\/\//\//g;

print "Creating $policyFile\n";
print " Signing space is $signingSpace\n";

if (open(FH, ">$policyFile") == 0)
{
    print "Open of $policyFile failed: $!";
    exit(1);
}

my $policy = <<END;
access_id_CA      X509         '$subject'

pos_rights        globus        CA:sign

cond_subjects     globus     '"$signingSpace"'
END

print FH $policy;
close(FH);

######################################################################

my $serialFile = "${runtimePath}/serial";

print "Creating $serialFile\n";

if (open(FH, ">$serialFile") == 0)
{
    print "Open of $serialFile failed: $!";
    exit(1);
}

print FH "01\n";
close(FH);

######################################################################
#
# Set ownership and permission of created files
#

my $wwwUser = "@WWW_USER@";
my $wwwUID = getpwnam($wwwUser);
# Use defined() instead of "!!" here since uid could be 0
if (!defined($wwwUID))
{
    die "Cannot determine uid for $wwwUser";
}

my $wwwGroup = "@WWW_GROUP@";
my $wwwGID = getgrnam($wwwGroup);
# Use defined() instead of "!!" here since gid could be 0
if (!defined($wwwGID))
{
    die "Cannot determine gid for group $wwwGroup";
}

my $rootUser = "@ROOT_USER@";
my $rootUID = getpwnam($rootUser);
# Use defined() instead of "!!" here since uid could be 0
if (!defined($rootUID))
{
    die "Cannot determine uid for $rootUser";
}

print "Settings ownership and permissions of files in $confPath\n";

chown($rootUID, $wwwGID, $confPath)
    || die "chown($rootUID, $wwwGID, $confPath) failed: $!";
chmod(0750, $confPath)
    || die "chmod(0750, $confPath) failed: $!";

foreach my $file ($certFile, $keyFile, $hashFile, $policyFile)
{
    chown($rootUID, $wwwGID, $file)
	|| die "chown($rootUID, $wwwGID, $file) failed: $!";
    chmod(0640, $file)
	|| die "chmod(0640, $file) failed: $!";
}

print "Setting ownership of files in $runtimePath\n";

chown($wwwUID, $wwwGID, $runtimePath)
    || die "chown($wwwUID, $wwwGID, $runtimePath) failed: $!";
chmod(0700, $runtimePath)
    || die "chmod(0700, $runtimePath) failed: $!";

foreach my $file ($serialFile)
{
    chown($wwwUID, $wwwGID, $file)
	|| die "chown($wwwUID, $wwwGID, $file) failed: $!";
    chmod(0600, $file)
	|| die "chmod(0600, $file) failed: $!";
}

######################################################################

print "Done.\n";
exit(0);


### Local Variables: ***
### mode:perl ***
### End: ***
######################################################################
