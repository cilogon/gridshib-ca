#!@PERL@ @PERL_ARGS@
######################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 check-config.pl

Check the GridShibCA configuration file F<gridshib-ca.conf> for errors.

=head2 Usage

Just run the script. It will display all parameters in the
configuration file in addition to any warnings or errors parsing the
file.

The script takes one optional argument, which is a path for a file to
use instead of the default configuration file.

=head2 Return Value

The return value of check-config.pl is zero on success, non-zero on
error.

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

use GridShibCA::Config;
use GridShibCA::Exception qw(:try);

# Flush after every write to keep STDOUT and STDERR in sync.
$|=1;

my $configFilename = shift;
if (defined($configFilename))
{
    print "Checking configuration file $configFilename instead of default.\n";
    GridShibCA::Config->setConfigFilename($configFilename);
}

my $config;
try
{
    $config = GridShibCA::Config->new(
	debug => 1
	);
}
catch GridShibCA::Exception with
{
     my $ex = shift;
     print "Error parsing configuration file: " . $ex->text() . "\n";
     exit(1);
};

print "Done reading configuration file. Dumping....\n";

try
{
    $config->dump();
}
otherwise
{
    my $ex = shift;
    print "Error dumping configuration: " . $ex->text() . "\n";
    exit(1);
};

print "Attempting to load all modules...\n";

my @modules = (
    "Authorization",
    "CA",
    "CertRegistry",
    "CGI",
    "CGISession",
    "Command",
    "HTMLTemplate",
    "Logger",
    "NameMapper",
    "SAMLExtension",
    "Template",
    "WebCommand",
    );

my $errorFound = 0;
for my $module (@modules)
{
    print "Loading $module ...";
    try
    {
	my $className = $config->getParam("Modules", $module);
	eval "use $className;";
	if ($@)
	{
	    throw GridShibCA::Exception($@);
	}
	print "Success.\n";
    }
    otherwise
    {
	my $ex = shift;
	print "Failed: " . $ex->text() . "\n";
	$errorFound = 1;
    };
}

if ($errorFound)
{
    exit(1);
}

print "Attempting to load all web commands...\n";

my %commands = $config->getSection("Commands");

$errorFound = 0;
for $command (keys(%commands))
{
    print "Loading $command ...";
    try
    {
	my $commandModule = $config->getCommandModule($command);
	print "Success.\n";
    }
    otherwise
    {
	my $ex = shift;
	print "Error loading $command: " . $ex->text() . "\n";
	$errorFound = 1;
    };
}

if ($errorFound)
{
    exit(1);
}

exit(0);


