#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# Check configuration files for errors.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 check-config.pl

Check the GridShibCA configuration file F<gridshib-ca.conf> for errors.

=head2 Usage

Just run the script. It will display all parameters in the
configuration file in addition to any warnings or errors parsing the
file.

The script takes one optional argument, which is a path for a file to
use instead of the default configuration file.

=head2 Return Value

The return value of check-config.pl is zero on success, non-zero on
error.

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

use GridShibCA::Config;
use GridShibCA::Exception qw(:try);

# Flush after every write to keep STDOUT and STDERR in sync.
$|=1;

my $configFilename = shift;
if (defined($configFilename))
{
    print "Checking configuration file $configFilename instead of default.\n";
    GridShibCA::Config->setConfigFilename($configFilename);
}

my $config;
try
{
    $config = GridShibCA::Config->new(
	debug => 1
	);
}
catch GridShibCA::Exception with
{
     my $ex = shift;
     print "Error parsing configuration file: " . $ex->text() . "\n";
     exit(1);
};

print "Done reading configuration file. Dumping....\n";

try
{
    $config->dump();
}
otherwise
{
    my $ex = shift;
    print "Error dumping configuration: " . $ex->text() . "\n";
    exit(1);
};

print "Attempting to load all modules...\n";

my @modules = (
    "Authorization",
    "CA",
    "CertRegistry",
    "CGI",
    "CGISession",
    "Command",
    "HTMLTemplate",
    "Logger",
    "NameMapper",
    "SAMLExtension",
    "Template",
    "WebCommand",
    );

my $errorFound = 0;
for my $module (@modules)
{
    print "Loading $module ...";
    try
    {
	my $className = $config->getParam("Modules", $module);
	eval "use $className;";
	if ($@)
	{
	    throw GridShibCA::Exception($@);
	}
	print "Success.\n";
    }
    otherwise
    {
	my $ex = shift;
	print "Failed: " . $ex->text() . "\n";
	$errorFound = 1;
    };
}

if ($errorFound)
{
    exit(1);
}

print "Attempting to load all web commands...\n";

my %commands = $config->getSection("Commands");

my $errorFound = 0;
for $command (keys(%commands))
{
    print "Loading $command ...";
    my $className = $commands{$command};
    if (!defined($className))
    {
	print "Failed. Undefined module \"%s\"\n", $command;
	$errorFound = 1;
	next;
    }
    eval "use $className;";
    if ($@)
    {
	print "Failed: $@\n";
	$errorFound = 1;
	next;
    }
    print "Success.\n";
}

if ($errorFound)
{
    exit(1);
}

exit(0);


