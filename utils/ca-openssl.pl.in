#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# Use OpenSSL to act as a CA and create certificates for the
# GridShib-CA.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

use Command;

# For safe mode
$ENV{PATH} = "/bin";

# CA Key and certificate
$CA_CERT = "@GRIDSHIB_CA_CERT_PATH@";

$CA_KEY = "@GRIDSHIB_CA_KEY_PATH@";

$CA_SERIAL = "@GRIDSHIB_CA_CONF_DIR@/serial";

# Syslog parameters
$SYSLOG_ID = "@SYSLOG_ID@";
$SYSLOG_OPTS = "pid";
$SYSLOG_FACILITY = "@SYSLOG_FACILITY@";

# Credential parameters
$LIFETIME = 1;   # in days
$RELATIVE_DN = "@RELATIVE_DN@";

$OPENSSL = "@OPENSSL@";

######################################################################

sub errorExit($)
{
    my $string = shift;

    print STDERR "ERROR: $string\n";
    syslog("err", "ERROR: %s", $string);
    exit(1);
}

sub getDN($)
{
    my $user = shift;

    my $DN = "CN=$user, " . $RELATIVE_DN;

    # Remove any double slashes in DN as this confuses openssl
    $DN =~ s/\/\//\//g;

    return $DN;
}

######################################################################
#
# Initialize Logging
#

use Sys::Syslog;

openlog($SYSLOG_ID, $SYSLOG_OPTS, $SYSLOG_FACILITY);

######################################################################
#
# Make files we create readable only by current user
#

umask(0077);

######################################################################
#
# Parse command-line options
#

use Getopt::Std;

my %opts;
getopts('n', \%opts);

my $user = shift;

if (!defined($user))
{
    errorExit("Missing username argument.");
}

# Clean user name (from perlsec manual)
if ($user =~ /^([-\@\w.]+)$/)
{
    $user = $1;                     # $data now untainted
}
else
{
    errorExit("Username contains bad characters: $user");
}


if ($opts{"n"})
{
    print getDN($user);
    exit(0);
}

######################################################################
#
# Make sure CA credentials exist
#

if (! -r $CA_CERT)
{
  errorExit("Could not read certificate: $CA_CERT");
}

if (! -r $CA_KEY)
{
   errorExit("Could not read private key: $CA_KEY");
}

######################################################################
#
# Get DN
#

my $DN = getDN($user);

######################################################################

syslog("info", "CERT-SIGN:%s:%s", $user, $DN);

my $status;
my @args = ();

# XXX Need to have locking here to serialize access to the serial file

# Sign certificate request
# Request is read from stdin and certificate output to stdout
push(@args, "x509");
push(@args, "-req");
push(@args, "-days", $LIFETIME);
push(@args, "-CA", $CA_CERT);
push(@args, "-CAkey", $CA_KEY);
push(@args, "-CAserial", $CA_SERIAL);
push(@args, "-CAcreateserial");

my $cmd = Command->new($OPENSSL, @args);
$cmd->useSTDIN();
$cmd->exec() ||
    errorExit($cmd->getSTDERR());
my $certificate = $cmd->getSTDOUT();

# Success. Print Certificate to STDOUT.
print $certificate;

exit(0);

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
