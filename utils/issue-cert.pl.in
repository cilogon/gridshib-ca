#!@PERL@ @PERL_ARGS@ -w
######################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 issue-cert.pl

Issues a certificate from the GridShib CA from the commandline.
Intended for testing.

=head2 Usage

issue-cert.pl [<options>] <userId> <Identity Provider id>

Run 'issue-cert.pl -h' for options. 

=head2 Return Value

Zero on success, outputing certificate and private key.

One on error.

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

use File::Temp;
use GridShibCA::CGISession;
use GridShibCA::Config;
use GridShibCA::Exception qw(:try);
use GridShibCA::UserIdentity;
use GridShibCA::OpenSSLCA;

######################################################################
#
# If we're running as root, switch to UID and GID of the WWW user
#

if ($> == 0)
{
    # Don't import all functions from POSIX as we get clash with tmpnam()
    use POSIX ();
    my $wwwUser = "@WWW_USER@";

    my ($name,$passwd,$uid,$gid,
	$quota,$comment,$gcos,$dir,$shell,$expire) = getpwnam($wwwUser);

    if (!defined($name))
    {
	die "Could not get uid of www user ($wwwUser): $!";
    }
    
    print "Running as $wwwUser (uid = $uid, gid = $gid)\n";
    POSIX::setgid($gid);
    POSIX::setuid($uid);
}

######################################################################

my $config = GridShibCA::Config->new();

# File readable only by us
umask(0077);

######################################################################
#
# Initialize Logging
#

$logger = $config->getLogger();

if (!defined($logger))
{
    # No good way to report this
    die "Could not initialize Logger: " . $config->getError();
}

######################################################################
#
# Parse commandline options
#

use Getopt::Std;

my $usage = <<"EOF";
Usage: $0 [<options>] <userId> <Identity Provider Id>

Options are:
 -h                  Print help
 -o <path>           Output credential to path.
EOF

my %options;
getopts('ho:', \%options);

if ($options{h})
{
    print $usage;
    exit(0);
}

my $credentialFilename = $options{o} || File::Temp::tmpnam();

my $userId = shift;
my $idp = shift;

if (!defined($userId) or !defined($idp))
{
    errorExit($usage);
}

print "User: " . $userId . "\n";
print "Idp: " . $idp . "\n";

my $session;
try
{
    my $id = GridShibCA::UserIdentity->new(
	-userId=>$userId,
	-idpId=>$idp,
	-authMethod=>"Shibboleth",
	-clientHost=>"localhost",
	);
    $session = GridShibCA::CGISession->new();
    $session->createNew();
    $session->fromUserIdentity($id);
}
otherwise
{
    my $ex = shift;
    handleException("Failure creating session", $ex);
};

######################################################################

print "Generating certificate request...\n";

my ($privKeyFile, $privKeyFilename) = File::Temp::tempfile();

my @args = ();
push(@args, "req");
push(@args, "-new");
push(@args, "-newkey", "rsa:1024");
push(@args, "-subj", "/C=US/O=Dummy/CN=Dummy");
push(@args, "-nodes");
push(@args, "-keyout", $privKeyFilename);

my $openssl = $config->getParam("Binaries", "OpenSSL");
my $cmd = $config->getCommand($openssl, @args);

if (!$cmd->exec())
{
    print "Execution of $openssl failed: " . $cmd->getError();
    exit(1);
}

my $reqPEM = $cmd->getOutput();

######################################################################

print "Signing certificate...\n";

my $certificate = undef;

try
{
    my $ca = GridShibCA::OpenSSLCA->new();
    $certificate = $ca->handleRequest($session, $reqPEM);
}
otherwise
{
    my $ex = shift;
    handleException("Failure signing certificate", $ex);
};

######################################################################

print "Success. Outputing certificate and private key...\n";

if (!open(CRED, ">$credentialFilename"))
{
    print "Could not open credential file for output: $!";
    exit(1);
}

print CRED $certificate->as_string();
while (<$privKeyFile>)
{
    print CRED $_;
}
close($privKeyFile);
close(CRED);
close($privKeyFile);
unlink($privKeyFilename);

# Print parsed certificate
@args = ();
push(@args, "x509");
push(@args, "-noout");
push(@args, "-text");
push(@args, "-in", $credentialFilename);
$cmd = $config->getCommand($openssl, @args);
if (!$cmd->exec())
{
    print "Execution of $openssl failed: " . $cmd->getError();
    exit(1);
}
print $cmd->getOutput();

# If user specified output file for credential, leave it, otherwise
# clean it up.
if (!defined($options{o}))
{
    print "Cleaning up temporary credential ($credentialFilename)";
    unlink($credentialFilename);
}

exit(0);

######################################################################
#
# Support functions.
#

sub errorExit
{
    my $format = shift;
    # Make sure format ends with a single carriage return
    chomp($format);
    $format .= "\n";
    printf(STDERR $format, @_);
    exit(1);
}

sub handleException
{
    my $message = shift;
    my $ex = shift;
    chomp($message);
    printf(STDERR $message . ": " . $ex->text() . "\n");
    if ($ex->can("logText") && $ex->logText())
    {
	print STDERR $ex->logText() . "\n";
    }
    if ($ex->can("stacktrace"))
    {
	my $trace = $ex->stacktrace();
	if (defined($trace))
	{
	    print STDERR $trace;
	}
    }
    exit(1);
}

### Local Variables: ***
### mode:perl ***
### End: ***
