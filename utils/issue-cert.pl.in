#!@PERL@ @PERL_ARGS@ -w
######################################################################
#
# $Id$
#
# This script serves as a welcome mat for users. It should be Shibboleth
# protected and it makes sure that REMOTE_USER is available before
# providing a link to invoke the "create-jnlp" script.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################


=head1 issue-cert.pl

Issues a certificate from the GridShib CA from the commandline.
Intended for testing.

=head2 Usage

-issue-cert.pl <userId> <Identity Provider id>

=head2 Return Value

Zero on success, outputing certificate and private key.

One on error.

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

use File::Temp;
use GridShibCA::Config;
use GridShibCA::Exception qw(:try);
use GridShibCA::FakeSignOn;
use GridShibCA::OpenSSLCA;

######################################################################
#
# If we're running as root, switch to UID and GID of the WWW user
#

if ($> == 0)
{
    # Don't import all functions from POSIX as we get clash with tmpnam()
    use POSIX ();
    my $wwwUser = "@WWW_USER@";

    my ($name,$passwd,$uid,$gid,
	$quota,$comment,$gcos,$dir,$shell,$expire) = getpwnam($wwwUser);

    if (!defined($name))
    {
	die "Could not get uid of www user ($wwwUser): $!";
    }
    
    print "Running as $wwwUser (uid = $uid, gid = $gid)\n";
    POSIX::setgid($gid);
    POSIX::setuid($uid);
}

######################################################################

my $config = GridShibCA::Config->new();

######################################################################
#
# Initialize Logging
#

$logger = $config->getLogger();

if (!defined($logger))
{
    # No good way to report this
    die "Could not initialize Logger: " . $config->getError();
}

######################################################################
#
# Parse commandline options
#

use Getopt::Std;

my $usage = <<"EOF";
Usage: $0 <userId> <Identity Provider Id>

Options are:
 -h                  Print help
EOF

my %options;
getopts('ho:', \%options);

if ($options{h})
{
    print $usage;
    exit(0);
}

my $credentialFilename = File::Temp::tmpnam();

if (defined($options{o}))
{
    $credentialFilename = $options{o};
}

my $userId = shift;
my $idp = shift;

if (!defined($userId) or !defined($idp))
{
    errorExit($usage);
}

print "User: " . $userId . "\n";
print "Idp: " . $idp . "\n";

my $signon = GridShibCA::FakeSignOn->new((userId=>$userId,
					  idpId=>$idp));

######################################################################

print "Generating certificate request...\n";

my ($privKeyFile, $privKeyFilename) = File::Temp::tempfile();

my @args = ();
push(@args, "req");
push(@args, "-new");
push(@args, "-newkey", "rsa:1024");
push(@args, "-subj", "/C=US/O=Dummy/CN=Dummy");
push(@args, "-nodes");
push(@args, "-keyout", $privKeyFilename);

my $openssl = $config->getParam("Binaries", "OpenSSL");
my $cmd = $config->getCommand($openssl, @args);

if (!$cmd->exec())
{
    print "Execution of $openssl failed: " . $cmd->getError();
    exit(1);
}

my $reqPEM = $cmd->getOutput();

######################################################################

print "Signing certificate...\n";

my $certificate = undef;

try
{
    my $ca = GridShibCA::OpenSSLCA->new();
    $certificate = $ca->handleRequest($signon, $reqPEM);
}
otherwise
{
    my $ex = shift;
    errorExit("Failuring signing certificate: %s", $ex->text());
};

######################################################################

print "Success. Outputing certificate and private key...\n";

if (!open(CRED, ">$credentialFilename"))
{
    print "Could not open credential file for output: $!";
    exit(1);
}

print CRED $certificate->as_string();
while (<$privKeyFile>)
{
    print CRED $_;
}
close($privKeyFile);
close(CRED);

# Print parsed certificate
@args = ();
push(@args, "x509");
push(@args, "-noout");
push(@args, "-text");
push(@args, "-in", $credentialFilename);
$cmd = $config->getCommand($openssl, @args);
if (!$cmd->exec())
{
    print "Execution of $openssl failed: " . $cmd->getError();
    exit(1);
}
print $cmd->getOutput();
exit(0);

######################################################################
#
# Support functions.
#

sub errorExit
{
    my $format = shift;
    # Make sure format ends with a single carriage return
    chomp($format);
    $format .= "\n";
    printf(STDERR $format, @_);
    exit(1)
}

### Local Variables: ***
### mode:perl ***
### End: ***
