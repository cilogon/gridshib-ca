#!@PERL@ @PERL_ARGS@ -w
######################################################################
#
# $Id$
#
# This script serves as a welcome mat for users. It should be Shibboleth
# protected and it makes sure that REMOTE_USER is available before
# providing a link to invoke the "create-jnlp" script.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################


=head1 issue-cert.pl

Issues a certificate from the GridShib CA from the commandline.
Intended for testing.

=head2 Usage

-issue-cert.pl <userId> <Identity Provider id>

=head2 Return Value

Zero on success, outputing certificate and private key.

One on error.

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

######################################################################
#
# If we're running as root, switch to UID and GID of the WWW user
#

if ($> == 0)
{
    # Don't import all functions from POSIX as we get clash with tmpnam()
    use POSIX ();
    my $wwwUser = "@WWW_USER@";

    my ($name,$passwd,$uid,$gid,
	$quota,$comment,$gcos,$dir,$shell,$expire) = getpwnam($wwwUser);

    if (!defined($name))
    {
	die "Could not get uid of www user ($wwwUser): $!";
    }
    
    print "Running as $wwwUser (uid = $uid, gid = $gid)\n";
    POSIX::setgid($gid);
    POSIX::setuid($uid);
}

######################################################################

use GridShibCA::Config;
my $config = GridShibCA::Config->new();

######################################################################
#
# Initialize Logging
#

$logger = $config->getLogger();

if (!defined($logger))
{
    # No good way to report this
    die "Could not initialize Logger: " . $config->getError();
}

######################################################################
#
# Parse commandline options
#

use Getopt::Std;

my $usage = <<"EOF";
Usage: $0 <userId> <Identity Provider Id>

Options are:
 -h                  Print help
EOF

my %options;
getopts('h', \%options);

if ($options{h})
{
    print $usage;
    exit(0);
}

my $userId = shift;
my $idp = shift;

if (!defined($userId) or !defined($idp))
{
    errorExit($usage);
}

# Emaulate Shibboleth SP's user of environment variables
$ENV{"REMOTE_USER"} = $userId;
$ENV{"HTTP_SHIB_IDENTITY_PROVIDER"} = $idp;
$ENV{"HTTP_SHIB_ATTRIBUTES"} = "PFJlc3BvbnNlIHhtbG5zPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoxLjA6cHJvdG9jb2wiIEluUmVzcG9uc2VUbz0iX2U5NGI1YTkxYjkxNzAxOTE5YzA0OTQxNDY2Y2E4ZDc2IiBJc3N1ZUluc3RhbnQ9IjIwMDctMDMtMTdUMDM6MDk6MTguNTQwWiIgTWFqb3JWZXJzaW9uPSIxIiBNaW5vclZlcnNpb249IjEiIFJlc3BvbnNlSUQ9Il85NTk4ZGQ4NmI4N2NkY2Y0ZTZlNzA4MmI3OWI4NGJjZSIgeG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4wOmFzc2VydGlvbiIgeG1sbnM6c2FtbHA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMDpwcm90b2NvbCIgeG1sbnM6eHNkPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSI+PFN0YXR1cz48U3RhdHVzQ29kZSBWYWx1ZT0ic2FtbHA6U3VjY2VzcyIvPjwvU3RhdHVzPjxBc3NlcnRpb24geG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMDphc3NlcnRpb24iIEFzc2VydGlvbklEPSJfNTJlMWJlYjBjNTgyY2JmNzBkOWM2NTJkYWUyM2E3MDAiIElzc3VlSW5zdGFudD0iMjAwNy0wMy0xN1QwMzowOToxOC41MjRaIiBJc3N1ZXI9InVybjptYWNlOmlucXVldWU6c2hpYjEzLm9wZW5pZHAub3JnIiBNYWpvclZlcnNpb249IjEiIE1pbm9yVmVyc2lvbj0iMSI+PENvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDA3LTAzLTE3VDAzOjA5OjE4LjUyNFoiIE5vdE9uT3JBZnRlcj0iMjAwNy0wMy0xN1QxMTowOToxOC41MjRaIj48QXVkaWVuY2VSZXN0cmljdGlvbkNvbmRpdGlvbj48QXVkaWVuY2U+aHR0cHM6Ly90ZXN0LXNwLm5jc2EudWl1Yy5lZHUvc2hpYmJvbGV0aDwvQXVkaWVuY2U+PEF1ZGllbmNlPnVybjptYWNlOmlucXVldWU8L0F1ZGllbmNlPjwvQXVkaWVuY2VSZXN0cmljdGlvbkNvbmRpdGlvbj48L0NvbmRpdGlvbnM+PEF0dHJpYnV0ZVN0YXRlbWVudD48U3ViamVjdD48TmFtZUlkZW50aWZpZXIgRm9ybWF0PSJ1cm46bWFjZTpzaGliYm9sZXRoOjEuMDpuYW1lSWRlbnRpZmllciIgTmFtZVF1YWxpZmllcj0idXJuOm1hY2U6aW5xdWV1ZTpzaGliMTMub3BlbmlkcC5vcmciPl8wNDZiMjJiNzdlZjg1YmIxYzlhMmU0MjI2ZGUyMmI3MDwvTmFtZUlkZW50aWZpZXI+PC9TdWJqZWN0PjxBdHRyaWJ1dGUgQXR0cmlidXRlTmFtZT0idXJuOm1hY2U6ZGlyOmF0dHJpYnV0ZS1kZWY6bWFpbCIgQXR0cmlidXRlTmFtZXNwYWNlPSJ1cm46bWFjZTpzaGliYm9sZXRoOjEuMDphdHRyaWJ1dGVOYW1lc3BhY2U6dXJpIiB4bWxuczp0eXBlbnM9InVybjptYWNlOnNoaWJib2xldGg6MS4wIj48QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InR5cGVuczpBdHRyaWJ1dGVWYWx1ZVR5cGUiPnZ3ZWxjaEBuY3NhLnVpdWMuZWR1PC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48QXR0cmlidXRlIEF0dHJpYnV0ZU5hbWU9InVybjptYWNlOmRpcjphdHRyaWJ1dGUtZGVmOmVkdVBlcnNvblByaW5jaXBhbE5hbWUiIEF0dHJpYnV0ZU5hbWVzcGFjZT0idXJuOm1hY2U6c2hpYmJvbGV0aDoxLjA6YXR0cmlidXRlTmFtZXNwYWNlOnVyaSIgeG1sbnM6dHlwZW5zPSJ1cm46bWFjZTpzaGliYm9sZXRoOjEuMCI+PEF0dHJpYnV0ZVZhbHVlIFNjb3BlPSJvcGVuaWRwLm9yZyIgeHNpOnR5cGU9InR5cGVuczpBdHRyaWJ1dGVWYWx1ZVR5cGUiPnZ3ZWxjaDwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PC9BdHRyaWJ1dGVTdGF0ZW1lbnQ+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+CjxkczpTaWduZWRJbmZvPgo8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPgo8ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8+CjxkczpSZWZlcmVuY2UgVVJJPSIjXzUyZTFiZWIwYzU4MmNiZjcwZDljNjUyZGFlMjNhNzAwIj4KPGRzOlRyYW5zZm9ybXM+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIj48ZWM6SW5jbHVzaXZlTmFtZXNwYWNlcyB4bWxuczplYz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiBQcmVmaXhMaXN0PSJjb2RlIGRzIGtpbmQgcncgc2FtbCBzYW1scCB0eXBlbnMgI2RlZmF1bHQgeHNkIHhzaSIvPjwvZHM6VHJhbnNmb3JtPgo8L2RzOlRyYW5zZm9ybXM+CjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPgo8ZHM6RGlnZXN0VmFsdWU+QUtjSlVHSmg0dmQvc1h4VTZwN1BmOVRNaTFVPTwvZHM6RGlnZXN0VmFsdWU+CjwvZHM6UmVmZXJlbmNlPgo8L2RzOlNpZ25lZEluZm8+CjxkczpTaWduYXR1cmVWYWx1ZT4KZS9KYU50bTE0K1NabEhJYnFUaGZ6TmtHWjdxelB2SURjOGI1cjNnMncvWENhbWRtSEhuZlNOQm0wTUF4b3htSGVNZkJFOEprNXFTbQp1VDNMWE5QRDZWbmdKZ0c0V0F5R2ljM0J6T0ZZVGw3K2phMlQrZ0pZZDBDOGh5NHJQc1hmb28zc3pUcTRhaDgwdUdrQVY0VnZtNFpMCkU5UUhmR0JyVXBsNXJ2N1dYMkk9CjwvZHM6U2lnbmF0dXJlVmFsdWU+CjxkczpLZXlJbmZvPgo8ZHM6WDUwOURhdGE+CjxkczpYNTA5Q2VydGlmaWNhdGU+Ck1JSUMwekNDQWp5Z0F3SUJBZ0lDQndVd0RRWUpLb1pJaHZjTkFRRUVCUUF3Z2FreEN6QUpCZ05WQkFZVEFsVlRNUkl3RUFZRFZRUUkKRXdsWGFYTmpiMjV6YVc0eEVEQU9CZ05WQkFjVEIwMWhaR2x6YjI0eElEQWVCZ05WQkFvVEYxVnVhWFpsY25OcGRIa2diMllnVjJsegpZMjl1YzJsdU1Tc3dLUVlEVlFRTEV5SkVhWFpwYzJsdmJpQnZaaUJKYm1admNtMWhkR2x2YmlCVVpXTm9ibTlzYjJkNU1TVXdJd1lEClZRUURFeHhJUlZCTFNTQlRaWEoyWlhJZ1EwRWdMUzBnTWpBd01qQTNNREZCTUI0WERUQTJNREV3T1RBeE1UUTBOMW9YRFRFd01ESXgKT0RBeE1UUTBOMW93Z1pReEN6QUpCZ05WQkFZVEFsVlRNUkF3RGdZRFZRUUlFd2RCYkdGaVlXMWhNUk13RVFZRFZRUUhFd3BDYVhKdAphVzVuYUdGdE1TTXdJUVlEVlFRS0V4cFVhR1VnVDNCbGJpQkpaR1Z1ZEdsMGVTQlFjbTkyYVdSbGNqRVlNQllHQTFVRUF4TVBjM052CkxtOXdaVzVwWkhBdWIzSm5NUjh3SFFZSktvWklodmNOQVFrQkZoQnliMjkwUUc5d1pXNXBaSEF1YjNKbk1JR2ZNQTBHQ1NxR1NJYjMKRFFFQkFRVUFBNEdOQURDQmlRS0JnUUNabERLYk9PZ1ZsTlpDdURjUTJ0UWkyUDlia3hPckY2ajNLMHRvWTVLNzhLNnFlbVlOOHBIaAovVHE3SDIwWmJHbWdQa3RNNXdmc0JhQ0libmMrSVVrN0VjWURSR3pBN21Sa29yUHJXTGV4UmZIVXBUS0IvRk1LZVVwZWpnMWh5ZmtOCkxoYWs2SDBHTk4vVEFQY2FRVWErMlNNZG1MQWN5ZDNkR3R5NWFBd05sd0lEQVFBQm94MHdHekFNQmdOVkhSTUJBZjhFQWpBQU1Bc0cKQTFVZER3UUVBd0lGb0RBTkJna3Foa2lHOXcwQkFRUUZBQU9CZ1FBa2VTUUZPZjlJMWl2S3JLWTRmZkI2VGJlT2xyYlhGcGFLWGJBMwpoOFM4S0ZaZ2JpSGFzcTR6bUxuSE9OUms3aXd1ZHllb0d1VkFCT1JSWWw0aDlzM2RoWWNRakk3ellQS1FSZTAxTk9tSUEva1FiRXkwCndQeG9CZWtYWTJxN1lvdWRVWTV1WjlPWkdlbkhnamJhajdHeHZjQ0NzNzFyY2tUSEhtbUhhTm92QUE9PQo8L2RzOlg1MDlDZXJ0aWZpY2F0ZT4KPC9kczpYNTA5RGF0YT4KPC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjwvQXNzZXJ0aW9uPjwvUmVzcG9uc2U+";

print "User: $userId\n";
print "Idp: $idp\n";

######################################################################
#
# Instantiate CA
#

my $ca = $config->getCA($userId, $idp);

if (!defined($ca))
{
    errorExit("Could not instantiate CA: ", $config->getError());
}

my $dn = $ca->getOpenSSLDN();
if (!defined($dn))
{
    errorExit("Could not get DN for user: %s", $ca->getError());
}

print "DN: $dn\n";

######################################################################
#
# Check authorization
#

my $authorization = $config->getAuthorization();

if (!$authorization->authorizeUser($userId, $idp))
{
    errorExit("Authorization failed: User %s (Idp %s): %s",
	      $userId, $idp, $authorization->getError());
}

######################################################################
#
# Generate certificate request
#

use File::Temp;

my ($privKeyFile, $privKeyFilename) = File::Temp::tempfile();

my @args = ();
push(@args, "req");
push(@args, "-new");
push(@args, "-newkey", "rsa:1024");
push(@args, "-subj", "/C=US/O=Dummy/CN=Dummy");
push(@args, "-nodes");
push(@args, "-keyout", $privKeyFilename);

my $openssl = $config->getParam("OpenSSL");
my $cmd = $config->getCommand($openssl, @args);

if (!$cmd->exec())
{
    print "Execution of $openssl failed: " . $cmd->getError();
    exit(1);
}

my $reqPEM = $cmd->getOutput();

######################################################################
#
# And sign request
#

my $certificate = $ca->signRequest($reqPEM);

if (!defined($certificate))
{
    errorExit("Failure signing request: %s", $ca->getError());
}

$logger->info("ISSUE: user=%s idp=%s remoteAddr=LOCAL DN=\"%s\" lifetime=%d",
	      $userId, $idp, $dn, $ca->getCredLifetime());

######################################################################
#
# Register certificate
#

my $certRegistry = $config->getCertRegistry();

if (defined($certRegistry))
{
    if (!$certRegistry->registerCert($userId,
				     $idp,
				     $dn,
				     $certificate,
				     $ca->getCredLifetime()))
    {
	errorExit("Error registering certificate: %s",
		  $certRegistry->getError());
    }
}

######################################################################
#
# Success. Output certificate and private key.
#

print $certificate;
while (<$privKeyFile>)
{
    print;
}
close($privKeyFile);

# Print parsed certificate
@args = ();
push(@args, "x509");
push(@args, "-noout");
push(@args, "-text");
$cmd = $config->getCommand($openssl, @args);
$cmd->setInput($certificate);
if (!$cmd->exec())
{
    print "Execution of $openssl failed: " . $cmd->getError();
    exit(1);
}
print $cmd->getOutput();
exit(0);

######################################################################
#
# Support functions.
#

sub errorExit
{
    my $format = shift;
    # Make sure format ends with a single carriage return
    chomp($format);
    $format .= "\n";
    printf(STDERR $format, @_);
    exit(1)
}

### Local Variables: ***
### mode:perl ***
### End: ***
