#!@PERL@ -T -w
######################################################################
#
# $Id$
#
# Interface to MyProxy to act as a CA and create certificates for the
# GridShib-CA.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

$MYPROXY_HOST = "localhost";

# Set if using something other than the default (7512)
$MYPROXY_PORT = undef;
#e.g. $MYPROXY_PORT = "7512";

# Set if MyProxy server has DN other than expected
$MYPROXY_SERVER_DN=undef;
#e.g. $MYPROXY_SERVER_DN="/C=US/O=Test/CN=MyProxy Server"

######################################################################

# For safe mode
$ENV{PATH} = "/bin";

# Key and certificate to use when contacting myproxy
$MYPROXY_CLIENT_CERT = "@GRIDSHIB_CA_CONF_DIR@/myproxy-client-cert.pem";
$MYPROXY_CLIENT_KEY = "@GRIDSHIB_CA_CONF_DIR@/myproxy-client-key.pem";

# Syslog parameters
$SYSLOG_ID = "@SYSLOG_ID@";
$SYSLOG_OPTS = "pid";
$SYSLOG_FACILITY = "@SYSLOG_FACILITY@";

$RELATIVE_DN = "@RELATIVE_DN@";

$MYPROXY_LOGON = "@MYPROXY_LOGON@";

######################################################################

sub errorExit($)
{
    my $string = shift;

    print "ERROR: $string\n";
    print STDERR "ERROR: $string\n";
    syslog("err", "ERROR: %s", $string);
    exit(1);
}

sub execCmd($)
{
    use File::Temp qw(tempfile);

    my $cmd = shift;

    my ($err_handle, $err_file) = tempfile();

    $cmd .= " > $err_file 2>&1";

    my $status = system($cmd);

    if ($status != 0)
    {
	my $error_msg = "Failed to execute command \"$cmd\"";

	if ($? == -1)
	{
	    $error_msg .= ": $!";
	}
	else
	{
	    $error_msg .= " (exited with status " . ($? >> 8) . ")";
	}
	$error_msg .= "\n";

	if (open(errorFile, "<$err_file"))
	{
	    while (<errorFile>)
	    {
		$error_msg .= $_;
	    }
	}
	close(errorFile);
	unlink($err_file);

	errorExit($error_msg);
    }

    unlink($err_file);
}

# This is really a hack as we can only assume MyProxy will return DNs
# as we've configued in mapper.sh. Ideally we could ask MyProxy what DN
# it will return given a particular request.
sub getDN($)
{
    my $user = shift;

    my $DN = $RELATIVE_DN . "/CN=" . $user;

    # Remove any double slashes in DN as this confuses openssl
    $DN =~ s/\/\//\//g;

    return $DN;
}

######################################################################
#
# Initialize Logging
#

use Sys::Syslog;

openlog($SYSLOG_ID, $SYSLOG_OPTS, $SYSLOG_FACILITY);

######################################################################
#
# Make files we create readable only by current user
#

umask(0077);

######################################################################

use Getopt::Std;

my %opts;
getopts('n', \%opts);

my $user = shift;

if (!defined($user))
{
    errorExit("Missing username argument.");
}

# Clean user name (from perlsec manual)
if ($user =~ /^([-\@\w.]+)$/)
{
    $user = $1;                     # $data now untainted
}
else
{
    errorExit("Username contains bad characters: $user");
}

######################################################################
#
# Parse command-line options
#

if ($opts{"n"})
{
    print getDN($user);
    exit(0);
}

######################################################################
#
# Make sure credentials exist and key is owned by me and as acceptable
# permissions. We try to catch this now to prevent hard to understand
# errors later.
#

if (! -r $MYPROXY_CLIENT_CERT)
{
    errorExit("Configuration error. Could not read certificate: $MYPROXY_CLIENT_CERT");
}

if (! -r $MYPROXY_CLIENT_KEY)
{
    errorExit("Configuration error. Could not read private key: $MYPROXY_CLIENT_KEY");
}

if (! -o $MYPROXY_CLIENT_KEY)
{
    errorExit("Configuration error. Private key is not owned by me: $MYPROXY_CLIENT_KEY");
}

my $mode = (stat($MYPROXY_CLIENT_KEY))[2];
if ($mode & 077)
{
    errorExit("Configuration error. Private key has unacceptable permissions (group or world readable): $MYPROXY_CLIENT_KEY");
}

######################################################################
#
# Set up environ so that myproxy-logon uses client credentials
#

$ENV{"X509_USER_CERT"} = $MYPROXY_CLIENT_CERT;
$ENV{"X509_USER_KEY"} = $MYPROXY_CLIENT_KEY;

######################################################################
#
# Get DN
#

my $DN = getDN($user);

######################################################################

syslog("info", "CERT-SIGN:%s:%s", $user, $DN);

use File::Temp qw(tempfile);

my ($cred_handle, $cred_file) = tempfile();

my $cmd = "$MYPROXY_LOGON -s $MYPROXY_HOST -l \"$user\" -n -o $cred_file";

if (defined($MYPROXY_PORT))
{
    $cmd .= " -p $MYPROXY_PORT";
}

if (defined($MYPROXY_SERVER_DN))
{
    $ENV{"MYPROXY_SERVER_DN"} = $MYPROXY_SERVER_DN;
}

execCmd($cmd);

######################################################################
#
# Credentials created, output to stdout.
#

if (!open(credFile, "<$cred_file"))
{
    errorExit("Could not open credential file: $!");
}

while (<credFile>)
{
    print;
}

close(credFile);


######################################################################
#
# Success. Clean up and exit.
#

unlink($cred_file);

exit(0);

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
