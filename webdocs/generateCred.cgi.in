#!@PERL@ -T -w
######################################################################
#
# $Id$
#
# This script is invoked by the Java Web Start CredentialRetriever
# application. It comsumes the token created by the "login" script,
# contacts MyProxy to generate a X509 credential and returns that
# credential to CredentialRetriever.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

# Run safely
$ENV{PATH} = "/bin";
umask (0077);

# Syslog parameters
$SYSLOG_ID = "@SYSLOG_ID@";
$SYSLOG_OPTS = "pid";
$SYSLOG_FACILITY = "@SYSLOG_FACILITY@";

$CA_PROG = "@GRIDSHIB_CA_PROG@";
$LOGGER_PROG = "@GRIDSHIB_LOGGER_PROG@";

######################################################################

sub errorExit($)
{
    my $string = shift;

    print "ERROR: $string\n";
    print STDERR "ERROR: $string\n";
    syslog("err", "ERROR: %s", $string);
    exit(0);
}

######################################################################
#
# Initialize Logging
#

use Sys::Syslog;

openlog($SYSLOG_ID, $SYSLOG_OPTS, $SYSLOG_FACILITY);

######################################################################

use CGI;

$cgi = new CGI;

print $cgi->header("text/plain");

$user = $ENV{"REMOTE_USER"};

if (!defined($user))
{
    errorExit("REMOTE_USER not defined.");
}

# Clean user name (from perlsec manual)
if ($user =~ /^([-\@\w.]+)$/)
{
    $user = $1;                     # $data now untainted
}
else
{
    errorExit("Username contains bad characters: $user");
}


my $remoteAddr = $ENV{"REMOTE_ADDR"};

if (!defined($remoteAddr))
{
    errorExit("REMOTE_ADDR not defined.");
}

syslog("info", "CONNECTION:%s:%s", $user, $remoteAddr);

######################################################################
#
# Get DN for logging
#

open(Mapper, "$CA_PROG -n \"$user\"|") ||
    errorExit("Could not execute $CA_PROG: $!");

$DN = <Mapper>;
chomp($DN);
if (!close(Mapper))
{
    # DN carried error message in this case
    errorExit("$CA_PROG returned non-zero(" . ($?<< 8) . ": $DN");
}

# Clean DN to satisfy perl taint checking.
if ($DN =~ /^([^;]*)$/)
{
    $DN = $1;
}
else
{
    errorExit("Invalid characters in DN: $DN");
}

######################################################################
#
# Log it
#

syslog("info", "ISSUE:%s:%s:%s", $user, $remoteAddr, $DN);

# Do we have an external logging program?
if (-x $LOGGER_PROG)
{
    my @args = ($LOGGER_PROG, $user);
    my $status = system(@args);

    if ($status != 0)
    {
	if ($? == -1)
	{
	    syslog("err", "ERROR: %s failed: $!", $LOGGER_PROG);
	}
	else
	{
	    syslog("err", "ERROR: %s returned %d", $LOGGER_PROG, ($? >> 8));
	}
    }
}

######################################################################
#
# And generate the credentials, which will be written to stdout.
#

use File::Temp qw(tempfile);

my ($err_handle, $err_file) = tempfile();
my ($cred_handle, $cred_file) = tempfile();

my $cmd = "$CA_PROG \"$user\" > $cred_file 2> $err_file";

my $status = system($cmd);

if ($status != 0)
{
    my $error_msg = "Failed to execute command \"$cmd\"";

    if ($? == -1)
    {
	$error_msg .= ": $!";
    }
    else
    {
	$error_msg .= " (exited with status " . ($? >> 8) . ")";
    }
    $error_msg .= "\n";
    
    if (open(errorFile, "<$err_file"))
    {
	while (<errorFile>)
	{
	    $error_msg .= $_;
	}
    }
    close(errorFile);
    unlink($err_file);
    unlink($cred_file);

    errorExit($error_msg);
}

if (!open(credFile, "<$cred_file"))
{
    unlink($err_file);
    unlink($cred_file);
    errorExit("Failed to open temporary credential file \"$cred_file\": $!");
}

# This line tells the Java Web Start application that credential generation
# succeeded and credentials will follow.
print "GRIDSHIB-CA-SUCCESS\n";

while (<credFile>)
{
    print;
}
close(credFile);

unlink($err_file);
unlink($cred_file);

######################################################################
#
# And we're done
#

exit(0);

### Local Variables: ***
### mode:perl ***
### End: ***
