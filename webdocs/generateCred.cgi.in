#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# This script is invoked by the Java Web Start CredentialRetriever
# application. It comsumes the token created by the "login" script,
# contacts MyProxy to generate a X509 credential and returns that
# credential to CredentialRetriever.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

use GridShibCA::Config;

# Run safely
$ENV{PATH} = "/bin";
umask (0077);

my $config = GridShibCA::Config->new();

$AUTHZ_PROG = "@GRIDSHIB_AUTHZ_PROG@";

######################################################################
#
# HTTP Status codes returned in case of error
#

my $HTTP_BAD_REQUEST = 400;
my $HTTP_UNAUTHORIZED = 401;
my $HTTP_INTERNAL_ERROR = 500;

######################################################################

sub errorExit($$)
{
    # HTTP status code
    my $status = shift;
    # Error message
    my $string = shift;

    print $cgi->header(
	-status=>sprintf("%d %s", $status, $string),
	-type=>"text/plain");

    print "ERROR: $string\n";
    print STDERR "ERROR: $string\n";

    $logger->err("ERROR: %s", $string);

    exit(0);
}

######################################################################
#
# Initialize Logging
#

$logger = $config->getLogger();

if (!defined($logger))
{
    # No good way to report this
    die "Could not initialize Logger: " . $config->getError();
}

######################################################################

$cgi = $config->getCGI();

if (!defined($cgi))
{
    errorExit($HTTP_INTERNAL_ERROR,
	      "Could not initialize CGI interface: "
	      . $config->getError());
}

$user = $cgi->getUserId();

if (!defined($user))
{
    errorExit($HTTP_UNAUTHORIZED, "REMOTE_USER not defined.");
}

my $remoteAddr = $cgi->remote_host();

if (!defined($remoteAddr))
{
    errorExit($HTTP_INTERNAL_ERROR, "REMOTE_ADDR not defined.");
}

my $idp = $cgi->getIdP();

if (!defined($idp))
{
    errorExit($HTTP_INTERNAL_ERROR, 
	      "Could not determine Shibboleth identity provider for user");
}

$logger->info("CONNECTION:%s:%s:%s", $user, $remoteAddr, $idp);

######################################################################
#
# Get POST data
#

my $certificateRequest = $cgi->getCertificateRequest();

if (!defined($certificateRequest))
{
    errorExit($HTTP_BAD_REQUEST, "Certificate request missing");
}
if ($certificateRequest eq "")
{
    errorExit($HTTP_BAD_REQUEST, "Certificate request empty");
}

my $token = $cgi->getToken();

if (!defined($token))
{
    errorExit($HTTP_BAD_REQUEST, "Token missing from request");
}

######################################################################
#
# Validate token
#
# This ensures that this request was routed here through a trusted
# CGI script and not, e.g., malicious javascript.

my $tokenGenerator = $config->getTokenGenerator($user,
						$remoteAddr);

if (!defined($tokenGenerator))
{
    errorExit($HTTP_INTERNAL_ERROR,
	      "Could not initialize token generator: "
	      . $config->getError());
}

if (!$tokenGenerator->verify($token))
{
    errorExit($HTTP_BAD_REQUEST, "Error verifying token: "
	      . $tokenGenerator->getError());
}

######################################################################
#
# Get DN for logging
#

my $ca = $config->getCA($user, $cgi->getIdP());
if (!defined($ca))
{
    errorExit($HTTP_INTERNAL_ERROR,
	      "Could not instantiate CA interface "
	      . $config->getError());
}
my $DN = $ca->getDN();
if (!defined($DN))
{
    errorExit($HTTP_INTERNAL_ERROR,
	      "Couldn't determine DN for user: " . $ca->getError());
}

######################################################################
#
# Callout to external authz program if it exists
#


if (-x $AUTHZ_PROG)
{
    use GridShibCA::Command;
    my $authzCmd = GridShibCA::Command->new($AUTHZ_PROG, $user);
    if (!$authzCmd->exec())
    {
	my $status = $authzCmd->getStatus() >> 8;
	my $error = $authzCmd->getError();
	if ($status == 255)
	{
	    $logger->err("ERROR: %s failed: %s", $AUTHZ_PROG, $error);
	    errorExit($HTTP_INTERNAL_ERROR,
		      "Authorization callout to $AUTHZ_PROG failed: $error");
	}
	else
	{
	    $logger->err("ERROR: %s returned %d: %s",
			 $AUTHZ_PROG, $status, $error);
	    errorExit($HTTP_UNAUTHORIZED, "Authorization for $user denied.");
	}
    }
}


######################################################################
#
# And generate the credentials, which will be written to stdout.
#

my $certificate = $ca->signRequest($certificateRequest);

if (!defined($certificate))
{
    errorExit($HTTP_INTERNAL_ERROR,
	      "Error signing certificate request: " . $ca->getError());
}

# XXX Add serial number to logging
$logger->info("ISSUE:%s:%s:%s", $user, $remoteAddr, $DN);

# Success, output credential

# XXX Authorize portalURL long before we get here
my $portalURL = $cgi->getPortalURL();

if (!defined($portalURL))
{
    # No portal URL, we are outputing to simple client as text
    print $cgi->header("text/plain");
    print $certificate;
}
else
{
    # We are outputting a form to allow certificate to be posted
    # to a portal
    my $portalData = $cgi->getPortalData();
    print $cgi->header();
    print <<"EOF";
<html>
<head>
  <title>GridShib CA Welcome</title>
  <META HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\">
  <META HTTP-EQUIV=\"Expires\" CONTENT=\"-1\">
</head>
@HTML_HEADER@

<center>
<form action="$portalURL" method=post>
<input name="status" type="hidden" value="success">
<input name="certificate" type="hidden" value="$certificate">
<input name="portalData" type="hidden" value="$portalData">
Your certificate is ready to be returned to the portal.
<p>
<input value="Click here finish delegation and return to the portal" type="submit">
</form>

@HTML_FOOTER@
</html>
EOF
}

######################################################################
#
# Call external logging program if it exists
#
# XXX Needs to be revamped to parse X509 cert

if (-x $LOGGER_PROG)
{
    my @args = ($LOGGER_PROG, $user, $DN);
    my $status = system(@args);

    if ($status != 0)
    {
	if ($? == -1)
	{
	    $logger->err("ERROR: %s failed: $!", $LOGGER_PROG);
	}
	else
	{
	    $logger->err("ERROR: %s returned %d", $LOGGER_PROG, ($? >> 8));
	}
    }
}

######################################################################
#
# And we're done
#

exit(0);

### Local Variables: ***
### mode:perl ***
### End: ***
