#!@PERL@ -T -w
######################################################################
#
# $Id$
#
# This script is invoked by the Java Web Start CredentialRetriever
# application. It comsumes the token created by the "login" script,
# contacts MyProxy to generate a X509 credential and returns that
# credential to CredentialRetriever.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

$MyProxyLogon = "@MYPROXY_LOGON@";

# For safe mode
$ENV{PATH} = "/bin";

# Key and certificate used to authenticate to MyProxy
$X509_USER_CERT = "@GRIDSHIB_CA_CONF_DIR@/cert.pem";

$X509_USER_KEY = "@GRIDSHIB_CA_CONF_DIR@/key.pem";

# Syslog parameters
$SYSLOG_ID = "@SYSLOG_ID@";
$SYSLOG_OPTS = "pid";
$SYSLOG_FACILITY = "@SYSLOG_FACILITY@";

######################################################################

sub errorExit($)
{
    my $string = shift;

    print "ERROR: $string\n";
    print STDERR "ERROR: $string\n";
    syslog("error", "ERROR: %s", $string);
    exit(0);
}

######################################################################
#
# Initialize Logging
#

use Sys::Syslog;

openlog($SYSLOG_ID, $SYSLOG_OPTS, $SYSLOG_FACILITY);

######################################################################

use CGI;

$cgi = new CGI;

print $cgi->header("text/plain");

$user = $ENV{"REMOTE_USER"};

if (!defined($user))
{
    errorExit("REMOTE_USER not defined.");
}

# Clean user name (from perlsec manual)
if ($user =~ /^([-\@\w.]+)$/)
{
    $user = $1;                     # $data now untainted
}
else
{
    errorExit("Username contains bad characters: $user");
}


my $remoteAddr = $ENV{"REMOTE_ADDR"};

if (!defined($remoteAddr))
{
    errorExit("REMOTE_ADDR not defined.");
}

syslog("info", "CONNECTION:%s:%s", $user, $remoteAddr);

######################################################################

if (! -r $X509_USER_CERT)
{
  errorExit("Could not read certificate: $X509_USER_CERT");
}
$ENV{"X509_USER_CERT"}=$X509_USER_CERT;

if (! -r $X509_USER_KEY)
{
   errorExit("Could not read private key: $X509_USER_KEY");
}
$ENV{"X509_USER_KEY"}=$X509_USER_KEY;

######################################################################

use File::Temp qw(tempfile);

my ($temp_handle, $temp_cred_file) = tempfile();

my $temp_err_file=$temp_cred_file . ".err";

my $status = system("$MyProxyLogon -s localhost -l $user -n -o $temp_cred_file > /dev/null 2> $temp_err_file");


if ($status != 0)
{
    if (!open(errorFile, "<$temp_err_file"))
    { 
	errorExit("Unknown error running myproxy-logon");
    }

    my $error = "";
    while (<errorFile>)
    {
	$error .= $_;
    }
    close(errorFile);
    errorExit("Error running myproxy-logon: $error");
}

if (!open(credFile, "<$temp_cred_file"))
{
    errorExit("Could not open credential file created mymyproxy-logon: $!");
}
while (<credFile>)
{
    print;
}
close(credFile);

unlink($temp_cred_file);
unlink($temp_err_file);

# Get DN and log it
my $mapper = "@GRIDSHIB_CA_CONF_DIR@/mapper.sh";
open(Mapper, "$mapper $user|") ||
    errorExit("Could not execute $mapper: $!");

$DN = <Mapper>;
close(Mapper);

syslog("info", "ISSUE:%s:%s:%s", $user, $remoteAddr, $DN);

exit(0);

### Local Variables: ***
### mode:perl ***
### End: ***
