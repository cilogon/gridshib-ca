#!@PERL@ -T -w
######################################################################
#
# $Id$
#
# This script is invoked by the Java Web Start CredentialRetriever
# application. It comsumes the token created by the "login" script,
# contacts MyProxy to generate a X509 credential and returns that
# credential to CredentialRetriever.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

# For safe mode
$ENV{PATH} = "/bin";

# Key and certificate used to authenticate to MyProxy
$CA_CERT = "@GRIDSHIB_CA_CERT_PATH@";

$CA_KEY = "@GRIDSHIB_CA_KEY_PATH@";

$CA_SERIAL = "@GRIDSHIB_CA_CONF_DIR@/serial";

# Syslog parameters
$SYSLOG_ID = "@SYSLOG_ID@";
$SYSLOG_OPTS = "pid";
$SYSLOG_FACILITY = "@SYSLOG_FACILITY@";

# Credential parameters
$KEY_LENGTH= 1024;
$LIFETIME = 1;   # in days

$OPENSSL = "@OPENSSL@";

######################################################################

sub errorExit($)
{
    my $string = shift;

    print "ERROR: $string\n";
    print STDERR "ERROR: $string\n";
    syslog("err", "ERROR: %s", $string);
    exit(0);
}

sub execCmd($)
{
    use File::Temp qw(tempfile);

    my $cmd = shift;

    my ($err_handle, $err_file) = tempfile();

    $cmd .= " > $err_file 2>&1";

    if (system($cmd) != 0)
    {
	my $error_msg = "Failed to execute command \"$cmd\": $?";

	if (open(errorFile, "<$err_file"))
	{
	    while (<errorFile>)
	    {
		$error_msg .= $_;
	    }
	}
	close(errorFile);
	unlink($err_file);

	errorExit($error_msg);
    }

    unlink($err_file);
}
    
######################################################################
#
# Initialize Logging
#

use Sys::Syslog;

openlog($SYSLOG_ID, $SYSLOG_OPTS, $SYSLOG_FACILITY);

######################################################################
#
# Make files we create readable only by current user
#

umask(0077);

######################################################################

use CGI;

$cgi = new CGI;

print $cgi->header("text/plain");

$user = $ENV{"REMOTE_USER"};

if (!defined($user))
{
    errorExit("REMOTE_USER not defined.");
}

# Clean user name (from perlsec manual)
if ($user =~ /^([-\@\w.]+)$/)
{
    $user = $1;                     # $data now untainted
}
else
{
    errorExit("Username contains bad characters: $user");
}


my $remoteAddr = $ENV{"REMOTE_ADDR"};

if (!defined($remoteAddr))
{
    errorExit("REMOTE_ADDR not defined.");
}

syslog("info", "CONNECTION:%s:%s", $user, $remoteAddr);

######################################################################
#
# Make sure CA credentials exist
#

if (! -r $CA_CERT)
{
  errorExit("Could not read certificate: $CA_CERT");
}

if (! -r $CA_KEY)
{
   errorExit("Could not read private key: $CA_KEY");
}

######################################################################
#
# Get DN
#

my $mapper = "@GRIDSHIB_CA_CONF_DIR@/mapper.sh";
open(Mapper, "$mapper $user|") ||
    errorExit("Could not execute $mapper: $!");

$DN = <Mapper>;
chomp($DN);
close(Mapper);

# Clean DN to satisfy perl taint checking.
if ($DN =~ /^([^;]*)$/)
{
    $DN = $1;
}
else
{
    # Should never get here
    errorExit("Invalid characters in DN: $DN");
}

# Remove any double slashes in DN as this confuses openssl
$DN =~ s/\/\//\//g;

######################################################################

use File::Temp qw(tempfile);

my ($temp_handle, $cred_file) = tempfile();
my $req_file = $cred_file . ".req";
my $key_file = $cred_file . ".key";

my $status;
my @args;

# Create certificate request
@args = ( $OPENSSL );
push(@args, "req");
push(@args, "-newkey", "rsa:${KEY_LENGTH}");
push(@args, "-out", $req_file);
push(@args, "-keyout", $key_file);
push(@args, "-days", $LIFETIME);
push(@args, "-nodes");
push(@args, "-subj", $DN);

execCmd(join(' ', @args));

# Sign certificate request
@args = ( $OPENSSL );
push(@args, "x509");
push(@args, "-req");
push(@args, "-in", $req_file);
push(@args, "-out", $cred_file);
push(@args, "-days", "1");
push(@args, "-CA", $CA_CERT);
push(@args, "-CAkey", $CA_KEY);
push(@args, "-CAserial", $CA_SERIAL);
push(@args, "-CAcreateserial");

execCmd(join(' ', @args));

if (!open(credFile, "<$cred_file"))
{
    errorExit("Could not open credential file: $!");
}
if (!open(keyFile, "<$key_file"))
{
    errorExit("Could not open key file: $!");
}

print "GRIDSHIB-CA-SUCCESS\n";

while (<credFile>)
{
    print;
}
close(credFile);
while (<keyFile>)
{
    print;
}
close(keyFile);

unlink($cred_file);
unlink($req_file);
unlink($key_file);

######################################################################
#
# Log it
#

syslog("info", "ISSUE:%s:%s:%s", $user, $remoteAddr, $DN);

# Do we have an external logging program?
my $logger = "@GRIDSHIB_CA_CONF_DIR@/logger";
if (-x $logger)
{
    my @args = ($logger, $user);
    my $status = system(@args);

    if ($status != 0)
    {
	syslog("err", "ERROR: $logger returned %d: $!", $logger, $status);
    }
}

exit(0);

### Local Variables: ***
### mode:perl ***
### End: ***
