#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# This script is to be invoked protected by Shibboleth. It generates
# Java Web Start JNLP file containing the Shib Session ID so that it
# can piggyback on the browser's Shibboleth session.
#
# This file does not have a ".pl" suffix as that seems to confuse
# some browsers and prevent them from parsing its output as a type
# JNLP.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

use GridShibCA::Config;

# Allowing for safe program execution in taint mode
$ENV{PATH} = "/bin";
# Be sure all of our created files are readable by user only
umask(0077);

my $config = GridShibCA::Config->new();

my $JNLPtemplate = "@GRIDSHIB_CA_CONF_DIR@/CredentialRetriever.jnlp";

######################################################################

sub errorExit($)
{
  my $error_string = shift;

  print $cgi->header("text/plain");

  print "ERROR: " . $error_string . "\n";
  
  $logger->err("ERROR: %s", $error_string);

  exit(1);
}

######################################################################
#
# Initialize Logging
#

$logger = $config->getLogger();

if (!defined($logger))
{
    # No good way to report this error
    die "Could not get Logger: " . $config->getError();
}

######################################################################
#
# Main code
#

$cgi = $config->getCGI();
if (!defined($cgi))
{
    errorExit("Could not access CGI interface: "
	      . $config->getError());
}

my $url = $cgi->url();
my $url_base = $cgi->url(-base=>1);
my $shibsession = $cgi->getShibSession();

if (!defined($shibsession))
{
    errorExit("Could not determine Shibboleth session Id.");
}

my $user = $cgi->getUserId();

if (!defined($user))
{
    errorExit("REMOTE_USER not defined.");
}

my $remoteAddr = $cgi->remote_host();

######################################################################
#
# Get the user's DN to pass to JWS application
#

my $ca = $config->getCA($user, $cgi->getIdP());
if (!defined($ca))
{
    errorExit("Could not instantiate CA: " . $config->getError());
}
my $DN = $ca->getDN();
if (!defined($DN))
{
    errorExit("Couldn't determine DN for user: " . $ca->getError());
}

######################################################################
#
# Generate token
#

my $tokenGenerator = $config->getTokenGenerator($user, $remoteAddr);
if (!defined($tokenGenerator))
{
    errorExit("Could not initialize token generator: "
	      . $config->getError());
}

my $tokenString = $tokenGenerator->generate();

if (!defined($tokenString))
{
    errorExit("Could not generate token: " . $tokenGenerator->getError());
}

######################################################################
#
# Log this
#


$logger->info("JWSLAUNCH:%s:%s:%s", $user, $remoteAddr, $DN);

######################################################################
#
# Create returned text
#

my $code_base = $url_base . "@GRIDSHIB_CA_URL@";

# JWS can't load jar files from HTTPS with untrusted CA certificates
# Since JAR file is signed, this is a reasonable work around.
$code_base =~ s/https:/http:/;

my $genCredURL = $url_base . "@SHIB_PROTECTED_CGI_BIN_URL@/generateCred.cgi";

open(INPUT, $JNLPtemplate) || errorExit("Could not open input file $JNLPtemplate: $!");

print $cgi->header("Application/X-Java-Jnlp-File");

while (<INPUT>) {
    s/\$\$shibSession/$shibsession/;
    s/\$\$code_base/$code_base/;
    s/\$\$genCredURL/$genCredURL/;
    s/\$\$token/$tokenString/;
    print;
}
close(INPUT);

# The following triggers PERL mode in emaces.
### Local Variables: ***
### mode:perl ***
### End: ***
