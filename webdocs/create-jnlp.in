#!@PERL@ @PERL_CGI_BIN_ARGS@
######################################################################
#
# $Id$
#
# This script is to be invoked protected by Shibboleth. It generates
# Java Web Start JNLP file containing the Shib Session ID so that it
# can piggyback on the browser's Shibboleth session.
#
# This file does not have a ".pl" suffix as that seems to confuse
# some browsers and prevent them from parsing its output as a type
# JNLP.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

use GridShibCA::Config;

# Allowing for safe program execution in taint mode
$ENV{PATH} = "/bin";
# Be sure all of our created files are readable by user only
umask(0077);

my $config = GridShibCA::Config->new();


$logger = $config->getLogger();

if (!defined($logger))
{
    # No good way to report this
    die "Could not initialize Logger: " . $config->getError();
}

my $errorHandler = $config->getHTMLError();

if (!defined($errorHandler))
{
    $logger->err("Failed to load HTMLError module: " . $config->getError());
    die "Failed to load HTMLError module: " . $config->getError();
}

######################################################################

my $JNLPtemplate = $config->getTemplate("CredentialRetriever.jnlp");
my $ShibProtectedCGIBinURL = $config->getParam("ShibbolethProtectedCGIBinURL");

# Arguments to pass to JWS application
my @jwsArgs = ();

# Bug debug first to turn on debugging early
if ($config->getParamBoolean("clientDebug"))
{
    push(@jwsArgs, "debug=True");
}

######################################################################
#
# Main code
#

$cgi = $config->getCGI();
if (!defined($cgi))
{
    $errorHandler->HTMLErrorExit("Could not access CGI interface: %s",
				 $config->getError());
}

# Protect against CSRF GET attacks
if (!$cgi->CSRFCheck())
{
    errorExit("CSRF check failed. Did you try to relaunch the credential downloader? You must go back and re-load the previous page.");
}

# Overwrite CSRF cookie with expired, content-free version
$expiredCSRFCookie = $cgi->expiredCSRFCookie();
if (!$expiredCSRFCookie)
{
    errorExit("Error creating expired CSRF cookie.");
}

my $shib = $config->getShibInterface();
if (!defined($shib))
{
    errorExit("Could not access ShibInterface: "
	      . $config->getError());
}

my $url = $cgi->url();
my $url_base = $cgi->url(-base=>1);
my $shibsession = $shib->getShibSession();

if (!defined($shibsession))
{
    $errorHandler->HTMLErrorExit("Could not determine Shibboleth session Id.");
}
push(@jwsArgs, $shibsession);

my $user = $shib->getUserId();

if (!defined($user))
{
    $errorHandler->HTMLErrorExit("REMOTE_USER not defined.");
}

my $remoteAddr = $cgi->remote_host();

######################################################################
#
# Handle requested lifetime
#

my $requestedLifetime = $cgi->getRequestedCredLifetime();
$logger->debug("Requested lifetime: $requestedLifetime");
my $maxLifetime = $config->getParam("MaximumCredLifetime");
if ($requestedLifetime > $maxLifetime)
{
    $errorHandler->HTMLErrorExit("Requested lifetime (%s) greater than allowed (%s).",
				 $requestedLifetime, $maxLifetime );
}

if ($requestedLifetime == 0)
{
    $errorHandler->HTMLErrorExit("Requested credential with zero lifetime.");
}

push(@jwsArgs, "lifetime=" . $requestedLifetime);

######################################################################
#
# Generate token
#

my $tokenGenerator = $config->getTokenGenerator($user, $remoteAddr);
if (!defined($tokenGenerator))
{
    $errorHandler->HTMLErrorExit("Could not initialize token generator: %s",
				 $config->getError());
}

my $tokenString = $tokenGenerator->generate();

if (!defined($tokenString))
{
    $errorHandler->HTMLErrorExit("Could not generate token: %s",
				 $tokenGenerator->getError());
}

push(@jwsArgs, "token=" . $tokenString);

######################################################################
#
# Do we want the client to use its bundled CAs when validating
# https connections? Default is "yes", so we only need to specify
# this argument if the answer is "no".

my $useBundledCAs = $config->getParamBoolean("useBundledCAs");

if (!$useBundledCAs)
{
    push(@jwsArgs, "useBundledCAs=false");
}

######################################################################
#
# Do we have a URL to show to the user when credential acquisition
# is complete?

my $redirectURL = $config->getParam("redirectURL");

if (!defined($redirectURL) or ($redirectURL ne "NONE"))
{
    push(@jwsArgs, "redirectURL=" . $redirectURL);
}

######################################################################
#
# Do we have trusted CAs to pass to client and did the client request
# we do so?
#

my $trustedCADirectory = $config->getParam("TrustedCADirectory");

if (defined($trustedCADirectory) &&
    (-x $trustedCADirectory) &&
    (-d $trustedCADirectory) &&
    $cgi->requestedTrustedCAUpdate())
{
    # Yes, pass pointer to CGI script
    my $getTrustedCAsURL = $url_base .
	$ShibProtectedCGIBinURL .
	"/getTrustedCAs.cgi";
    push(@jwsArgs, "trustURL=$getTrustedCAsURL");
}

######################################################################
#
# Figure out our code base
#

my $GridShibCAURL = $config->getParam("GridShibCAURL");
my $code_base = $url_base . $GridShibCAURL;

# JWS can't load jar files from HTTPS with untrusted CA certificates
# Since JAR file is signed, this is a reasonable work around.
$code_base =~ s/https:/http:/;

$JNLPtemplate->addMapping("code_base", $code_base);

######################################################################
#
# Figure out URL for generateCred.cgi
#

my $genCredURL = $url_base . $ShibProtectedCGIBinURL . "/generateCred.cgi";
push(@jwsArgs, "url=" . $genCredURL);


######################################################################
#
# Create returned text
#

# Build string of arguments
my $arguments = "";
for my $arg (@jwsArgs)
{
    $arguments .= "\t<argument>$arg</argument>\n";
}

$JNLPtemplate->addMapping("arguments", $arguments);

my $jnlp = $JNLPtemplate->getText();

if (!defined($jnlp))
{
    $errorHandler->HTMLErrorExit("Could not generate JNLP file: %s",
				 $JNLPtemplate->getError());
}

# Success. Log and return JNLP file.

$logger->info("JWSLAUNCH:%s:%s", $user, $remoteAddr);

print $cgi->header(-type=>"Application/X-Java-Jnlp-File",
		   -cookie=>$expiredCSRFCookie,
		   -attachment=>"launch.jnlp");
print $jnlp;

exit(0);

# The following triggers PERL mode in emaces.
### Local Variables: ***
### mode:perl ***
### End: ***
