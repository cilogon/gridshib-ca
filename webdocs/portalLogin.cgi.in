#!@PERL@ @PERL_CGI_BIN_ARGS@
######################################################################
#
# $Id$
#
# This script is to be invoked protected by Shibboleth using a form
# from another portal that wants a X.509 credential for the user. It
# should be passed a certificate request. This script serves to
# validate that the user wants to delegate to the other portal and if
# so invokes generateCred.cgi with a token to assert the user's
# intent.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

use GridShibCA::Config;

my $config = GridShibCA::Config->new();

######################################################################

sub errorExit
{
  my $format = shift;
  my $error_string = sprintf($format, @_);

  print $cgi->header("text/plain");

  print "ERROR: " . $error_string . "\n";
  
  $logger->err("ERROR: %s", $error_string);

  exit(1);
}

######################################################################
#
# Initialize Logging
#

$logger = $config->getLogger();

if (!defined($logger))
{
    # No good way to report this error
    die "Could not get Logger: " . $config->getError();
}

######################################################################
#
# Main code
#

$cgi = $config->getCGI();

if (!defined($cgi))
{
    errorExit("Could not access CGI interface: "
	      . $config->getError());
}

my $user = $cgi->getUserId();

if (!defined($user))
{
    errorExit("REMOTE_USER not defined.");
}

my $idp = $cgi->getIdP();

my $remoteAddr = $cgi->remote_host();

my $portalURL = $cgi->getPortalURL();

if (!defined($portalURL))
{
    errorExit("No portal URL given.");
}

my $certReq = $cgi->getCertificateRequest();

if (!defined($certReq))
{
    errorExit("No certificate request provided.");
}

my $portalData = $cgi->getPortalData();

######################################################################
#
# Do we allow delegation to portals?
#

if (!$config->getParamBoolean("allowPortalDelegation"))
{
    errorExit("Portal delegation disabled.");
}

######################################################################
#
# Get the user's DN to pass to JWS application
#

my $ca = $config->getCA($user, $idp);
if (!defined($ca))
{
    errorExit("Could not instantiate CA: " . $config->getError());
}

my $DN = $ca->getDN();
if (!defined($DN))
{
    errorExit("Couldn't determine DN for user: " . $ca->getError());
}

######################################################################
#
# Check user authoriztion
#

my $authorization = $config->getAuthorization();

if (!$authorization->authorizeUser($user, $idp))
{
    errorExit("Authorization failed: User %s (Idp %s): %s",
	      $user, $idp, $authorization->getError());
}

if (!$authorization->authorizePortal($portalURL))
{
    errorExit("Authorization failed: Portal (%s) not authorized: %s",
	      $portalURL, $authorization->getError());
}

######################################################################
#
# Generate token
#

my $tokenGenerator = $config->getTokenGenerator($user, $remoteAddr);
if (!defined($tokenGenerator))
{
    errorExit("Could not initialize token generator: "
	      . $config->getError());
}

my $tokenString = $tokenGenerator->generate();

if (!defined($tokenString))
{
    errorExit("Could not generate token: " . $tokenGenerator->getError());
}

######################################################################
#
# Create returned text
#

my $url_base = $cgi->url(-base => 1);
my $shibProtectedCGIBinURL =
    $config->getParam("ShibbolethProtectedCGIBinURL");
my $genCredURL = $url_base .  $shibProtectedCGIBinURL . "/generateCred.cgi";
my $htmlHeader = $cgi->getHTMLHeader();
my $htmlFooter = $cgi->getHTMLFooter();

print $cgi->header();
print <<"EOF";
<html>
<head>
  <title>GridShib CA Welcome</title>
  <META HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\">
  <META HTTP-EQUIV=\"Expires\" CONTENT=\"-1\">
</head>
$htmlHeader

<center>
<form action="$genCredURL" method=post>
<input name="certificateRequest" type="hidden" value="$certReq">
<input name="portalURL" type="hidden" value="$portalURL">
<input name="portalData" type="hidden" value="$portalData">
<input name="token" type="hidden" value="$tokenString">
A request to delegate your Grid credential has been received from a
    Portal.
<p>
The portal URL is: $portalURL
<p>
Do you wish to allow this delegation? If you allow delegation, it will
    give the portal access to Grid services as you.
<p>
<input value="Click here to allow delegation" type="submit">
</form>

<form action="$portalURL" method=post>
<input name="status" type="hidden" value="rejected">
<input name="portalData" type="hidden" value="$portalData">
<input value="Click here to reject delegation request" type="submit">
</form>
</center>

$htmlFooter
</html>
EOF

exit(0);

# The following triggers PERL mode in emaces.
### Local Variables: ***
### mode:perl ***
### End: ***
