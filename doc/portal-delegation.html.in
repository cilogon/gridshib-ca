<html>
<head>
<!-- $Id$ -->
<title>GridShib CA: Portal Delegation</title>
<!-- global style sheet -->
<link rel="stylesheet" type="text/css" href="/styles/global.css" />

<!-- local style sheet -->
<link rel="stylesheet" type="text/css" href="/styles/local.css" />
</head>
@DOC_HEADER@

<center><h1>GridShib CA Portal Delegation</h1></center>

Since version 0.3.0 the GridShib-CA allows for the delegation of a
Grid credential based on Shibboleth authentication of the user to a
web portal that is not itself Shibboleth enabled. This web page
describes the process.
<p>
In addition to the user being authorized, the portal must also
<a href="install.html#authorizedPortals.conf">be authorized to receive
	credentials</a>
<p>
An example portal can be found
<a href="https://computer.ncsa.uiuc.edu/cgi-bin/gridshib-ca-demo-portal.cgi">here</a>
(and its source can be found
<a href="http://viewcvs.globus.org/viewcvs.cgi/gridshib/gridshib-ca/webdocs/gridshib-ca-demo-portal.cgi.in?view=markup">here</a>)
<p>
The portal must meet the following requirements:
<ol>
<li>It must be https protected.
<li>It must be able to generate a key pair and certificate request
<li>It must authenticate the user and save state from the generation
	of the certificate request to when the certificate is returned.
</ol>
<p>
<img src="portal-delegation.jpg" width=100%>
<ol>
<li>User visits application portal. Portal creates a key pair and
	certificate request for the user and presents a user with a form to
	submit the certificate request to the GridShib-CA. The form should
	have the following fields:
<ol>
	<li><b>certificateRequest</b>: The PEM-encoded PKCS10 certificate request</li>
	<li><b>portalURL</b>: The URL to which the generated certificate
		should be posted in step 6. This URL must be https.</li>
	<li><b>portData</b>: Arbitrary data which will be returned to the
		portal in step 6.</li>
</ol>
<li>User submits form generated by application portal, submitting
	certificate request to the GridShib-CA. This will cause the user to
	undergo Shibboleth authentication if they have not already done
	so. The portalLogin.cgi script will present the user with a form
	indicating that they are about to delegation a Grid credential to
	the portal and ask them to confirm. This form will have all the
	fields listed in the previous step, plus the following:
<ol>
	<li><b>token</b>: A encrypted token that ensures the users has
		agreed to this delegation. This prevents the users from being
		directed to the GridShib-CA by a malicious portal.</li>
</ol>
<li>When the user submits the form from portalLogin.cgi, the
	certificate request will be submitted to generateCred.cgi.
<li>Assuming the user and portal
	are <a href="install.html#conf">authorized</a> a certificate will be 
	created.
<li>The certificate is presented back to the user to submit back to
	the portal. The presented form will have tje following variables:
<ol>
	<li><b>status</b>: One of the following possible
		values: <i>success</i> or <i>rejected</i>. <i>rejected</i>
		indicates that the user declined to delegate a credential.</li>
	<li><b>certificate</b>: The PEM-encoded X.509 certificate.</li>
	<li><b>portalData</b>: The portal data from step 1.
</ol>
<li>When the user submits the certificate back to the portal, the
	portal associates the certificate with the key pair it previously
	generated, creating a Grid credential to be used on behalf of the
	user. Not that the portal should be aware that a malicious user
	could alter fields presented and validate things accordingly. In
	particular the portal should ensure the modulus of the returned
	certificate matches the modulus in the private key generated in step
	1. It should also be wary trusting the information in portalData -
	this can be used to help it complete the request, but should not be
	trusted in its own right.</li>
</ol>


@DOC_FOOTER@
</html>
