<html>
<head>
<!-- $Id$ -->
<title>GridShib CA: Development Notes</title>
<!-- global style sheet -->
<link rel="stylesheet" type="text/css" href="/styles/global.css" />

<!-- local style sheet -->
<link rel="stylesheet" type="text/css" href="/styles/local.css" />
</head>
@DOC_HEADER@

<center><h1>GridShib CA Process Flow</h1></center>

<img src="gridshib-ca-process-flow.jpg" width=100%>
<ol>
<li>User visits index.html with browser. Is directed to logon by
	clicking on form submit button.
<li>By clicking on logon button, use is sent to login.cgi. This will
	cause Shibboleth authentication. The main job of login.cgi is to
	ensure that the user's shibboleth identity is accessible and
	valid. User is directed to click a submit button to retrieve their
	credentials, which invokes the create-jnlp CGI script.
<li>The create-jnlp script creates the JNLP file to launch the Java Web
	Start application. The JNLP file contains the following arguments
  for the CredentialRetrieve Java app:
<ol>
	<li>the URL for the generateCred.pl script (step 6)
  <li>The user's Shibboleth Session cookie
  <li>An encrypted token so that CredentialRetriever can assert that
		it was legitimately invoked.
	<li>Whether or not the client should run in debug mode.
	<li>The lifetime requested by the user for the credential.
	<li>The URL from which the client can receive trusted CAs (step 10)
  <li>Optionally a parameter telling the client not to use its bundled
		CAs to validate its https connections (steps 2,3,6 and 10)
</ol>
<li>The web browser saves the jnlp file to disk and launches Java Web
	Start, passing it the jnlp file.
<li>Java Web Start downloads the GridShib.jar file as directed by the
	JNLP file, and launches the CredentialRetriever class from the jar,
	passing it the Shibboleth Session, Token and URL from the JNLP file as
	arguments.
<li>CredentialRetriever runs, creates a key pair and certificate
	request. CredentialRetriever uses the Shibboleth Session
	received via the JNLP file to authenticate to generateCred.pl as if
	it were the user's web browser. It passes the following to
	generateCred.pl:
<ol>
  <li><b>certificateRequest</b>: The certificate request as PEM encoded PKCS10.
  <li><b>token</b>: The encrypted Token generated by login.cgi
</ol>
<li>generateCred.pl validates the Token received and then hands off
	the certificate request a CA (either a local OpenSSL-based CA or a
	MyProxy-based CA) for signing, receiving the signed certificate in return.
<li>generateCred.pl returns the certificate to Credential Retriever.
<li>CredentialRetriever writes the certificate and private key to
	local disk in the location expected by Globus Toolkit and compatible
	software.
<li>Assuming the server is configured to provide trusted CA
	certificates to the client, the client connects to
	the <i>getTrustedCAs.cgi</i> script, doing a GET (providing no
	parameters). The script in returns a list of files (CA certificates
	and signing policies) for the client to install, using the following
	format, where each file is separated with a line containing the
	filename and a fixed prefix: 
<pre>
-----File: aa99c057.0
...certificate data...
-----File: aa99c057.signing_policy
...signing policy data...
...and so forth...
</pre>
<li>The client writes the returned CA files and policies to the
	clients trusted certificates directory (normally
	~/.globus/certificates).
</ol>


@DOC_FOOTER@
</html>
