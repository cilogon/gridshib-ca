#!/bin/sh
######################################################################
#
# Test a credential issued by the GS-CA deployment on computer.
#
######################################################################
#
# Binaries and key paths

globusLocation="@GLOBUS_LOCATION@"

gridProxyInfo="grid-proxy-info"
gridProxyInit="grid-proxy-init"
openssl="openssl"

######################################################################
#
# Our trusted CA path and expected CA DN

trustedCertificatesDir=`dirname $0`/certificates/

expectedIssuerHost="computer.ncsa.uiuc.edu"

issuerSuffix="/O=Certificate Authority/CN=GridShib CA"

######################################################################

CHECK_SAML=1

uid=`id -u`
credFile=/tmp/x509up_u${uid}

usage() {
cat <<EOF
Usage: $0
 -c <path>  Use path for trusted CA certificates.
 -h         Display help and exit.
 -i <cred>  Test credential in <cred>
 -l         Expect issuer to be local system instead of '${expectedIssuerHost}'
 -S         Do not check for embedded SAML.
EOF
}

while getopts c:hi:lS arg
do
  case $arg in
    c) trustedCertificatesDir=$OPTARG ;;
    h) usage; exit 0 ;;
    i) credFile=$OPTARG ;;
    l) expectedIssuerHost=`hostname` ;;
    S) CHECK_SAML=0 ;;
  esac
done

shift `expr $OPTIND - 1`

######################################################################

# Reverse hostname components and present to issuerSuffix
hostComponents=`echo $expectedIssuerHost | sed -e 's/\./ /g'`
echo $hostComponents
expectedIssuer=$issuerSuffix
for component in $hostComponents ; do
    expectedIssuer="/DC=${component}${expectedIssuer}"
done

######################################################################

if test -f $credFile ; then
    echo "Credential file exists: ${credFile}"
else
    echo "Credential file does not exist: ${credFile}"
    exit 1
fi

type=`${gridProxyInfo} -file ${credFile} -type`
if test "${type}" = "end entity credential" ; then
    echo "Credential type good."
else
    echo "Credential type \"${type}\" unexpected."
    exit 1
fi

issuer=`${gridProxyInfo} -file ${credFile} -issuer`
if test "${issuer}" = "${expectedIssuer}" ; then
    echo "Issuer good."
else
    echo "Credential issuer does not match expected."
    echo "Issuer: ${issuer}"
    echo "Expected Issuer: ${expectedIssuer}"
    exit 1
fi

strength=`${gridProxyInfo} -file ${credFile} -strength`
${gridProxyInfo} -file ${credFile} -exists -bits 1024
if test $? -eq 0 ; then
    echo "Key length (${strength}) good."
else
    echo "Key length (${strength}) too weak."
    exit 1
fi

timeleft=`${gridProxyInfo} -file ${credFile} -timeleft`
${gridProxyInfo} -file ${credFile} -exists -valid 1:00
if test $? -eq 0 ; then
    echo "Time left (${timeleft}) good."
else
    echo "Time left (${timeleft}) too short."
    exit 1
fi

export X509_CERT_DIR=${trustedCertificatesDir}
${gridProxyInit} -cert ${credFile} -key ${credFile} -out ${credFile}.out \
    -verify -debug -valid 1:00
if test $? -eq 0 ; then
    echo "Successfully verified proxy creation from credential"
else
    echo "Proxy creation failed."
    exit 1
fi

if test $CHECK_SAML -eq 1 ; then
    ${openssl} x509 -in ${credFile} -noout -text | grep "urn:oasis:names:tc:SAML:1.0:assertion" > /dev/null
    if test $? -eq 0 ; then
	echo "Embedded SAML found."
    else
	echo "Failed to find embedded SAML."
	exit 1
    fi
fi

echo "Success."
exit 0
