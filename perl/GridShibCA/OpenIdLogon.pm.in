######################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 GridShibCA::OpenIdLogon

Authenticate the user via OpenId. Note that this takes a round trip
between this application and the user's identity provider, meaning
this module will be invoked multiple times.

=cut

package GridShibCA::OpenIdLogon;

# Inherit Logon
use base qw(GridShibCA::Logon);

use FileHandle;
use GridShibCA::Exception qw(:try);
use GridShibCA::UserIdentity;
use LWP::UserAgent;
use Net::OpenID::Consumer;

=head2 Methods

=over 4

=item doCommand()

Override base class with my specific logic.

B<Arguments:> None

B<Returns:> True on success, False on error.

=cut

sub doCommand
{
    my $self = shift;

    my $cgi = $self->{cgi};
    my $baseURL = $cgi->url(-base => 1);
    my $secret = $self->_getConsumerSecret();
    my $status = 1;

    try
    {
	my $consumer = Net::OpenID::Consumer->new(
	    # The user agent which sends the openid off to the server.
	    ua => LWP::UserAgent->new(),
	    # Require base for return URL
	    required_root => $baseURL,
	    # Our secret for nonces
	    consumer_secret => $secret,
	    # Way for Consumer to get at CGI parameters
	    args => $cgi,
	    );
	
	# I would use handle_server_response here if there was some way to 
	# pass $self to the callbacks.
	if ($consumer->is_server_response())
	{
	    $self->_handleServerResponse($consumer);
	}
	else
	{
	    # Not an OpenId response. In this case we either need to
	    # present the user with a login form, or process the result of
	    # that login form. Look for an openid parameter - if present,
	    # then this is the form submission. Otherwise we output the
	    # form.
	    my $openid = $self->{cgi}->param("openid");
	    if ($openid)
	    {
		$self->_handleClaim($consumer, $openid);
	    }
	    else
	    {
		# Output logon form
		$self->{logger}->debug("Providing user OpenId logon form.");
		$self->_displayHTML("OpenIdLogonForm");
	    }
	}
    }
    catch GridShibCA::OpenIdException with
    {
	my $ex = shift;
	$self->_handleOpenIdException($ex);
	$status = 0;
    }
    otherwise
    {
	my $ex = shift;
	$self->_displayHTMLError("OpenId authentication failed: " . $ex->text());
	$status = 0;
    };

    return $status;
}

=item createSessionPassively()

OpenID cannot create a session passively. This method always throws an
exception.

B<Arguments:> None

B<Returns:> Throws GridShibCA::LogonException

=cut

sub createSessionPassively
{
    my $self = shift;
    throw GridShibCA::LogonException("OpenID cannot create session passively.");
}

=item _handleServerResponse()

Handle a OpenID Idp server response.

B<Arguments:> Net::OpenID:Consumer object

B<Returns:> Nothing

=cut

sub _handleServerResponse
{
    my $self = shift;
    my $consumer = shift ||
	throw GridShibCA::Exception("Missing consumer argument");

    my $setup_url = $consumer->user_setup_url();
    my $verifiedId = $consumer->verified_identity();
    if ($setup_url)
    {
	$self->{logger}->debug("OpenId setup required. Redirecting user to $setup_url");
	$self->_redirect($setup_url);
    }
    elsif ($consumer->user_cancel())
    {
	$self->{logger}->info("User canceled OpenId authentication.");
	$self->_displayHTML("OpenIdCancel");
    }
    elsif ($verifiedId)
    {
	$self->{logger}->info("OpenId authentication successful: " .
			       $verifiedId->url());
	my $openid = $verifiedId->url();

	# Reload claimed identity to get server and protocol version
	my $claimedId = $consumer->claimed_identity($openid);
	my $idpId = $claimedId->identity_server();

	my $protocolVersion = $claimedId->protocol_version();
	my $authMethod = "OpenId";

	# At some point, save specific version, which is:
	# $protocolVersion == 1 => OpenId1.1
	# $protocolVersion == 2 => OpenId2.0
	
	my $id = GridShibCA::UserIdentity->new(
	    -authMethod => $authMethod,
	    -clientHost => $self->getClientHost(),
	    -userId => $openid,
	    -idpId => $idpId);
	
	my $session = $self->_doLogon($id);
	my %mappings = ();
	$self->_displayHTML("OpenIdSuccess", %mappings);
    }
    else
    {
	# Unknown state
	throw GridShibCA::OpenIdException($consumer);
    }
}

=item _handleClaim()

Handle a claimed openid (result of a form submission).

B<Arguments:>

C<$consumer> Net::OpenID::Consumer instance.

C<$openid> Claimed OpenId as string.

B<Returns:> Nothing

=cut

sub _handleClaim
{
    my $self = shift;
    my $consumer = shift ||
	throw GridShibCA::Exception("Missing consumer argument");
    my $openid = shift ||
	throw GridShibCA::Exception("Missing openid argument");

    my $myURL = $self->{cgi}->url(-full => 1);
    my $baseURL = $self->{cgi}->url(-base => 1);

    # Net::OpenId untaints the openid variable and sanity checks it.
    $self->{logger}->info("Got claimed OpenId: $openid");
    my $claimedId = $consumer->claimed_identity($openid);
    if (!$claimedId)
    {
	throw GridShibCA::OpenIdException($consumer);
    }
    $self->{logger}->debug("Redirecting user to OpenId provider.");
    my $checkURL = $claimedId->check_url (
	# The place we go back to.
	return_to  => $myURL,
	# Having this simplifies the login process.
	trust_root => $baseURL,
	# IdP can redirect user if needed
	delayed_return => 1.
	);
    $self->_redirect($checkURL);
}

=item _handleOpenIdException()

Handle an OpenId error.

B<Arguments:> GridShibCA::OpenIdException

B<Returns:> Nothing

=cut

sub _handleOpenIdException
{
    my $self = shift;
    my $ex = shift;

    my $message = $ex->text();
    my %mappings = ( -status => "401 OpenID Authentication Failed" );
    $self->{logger}->error($message);
    $self->_displayHTMLError($message, %mappings);
}

=item _getConsumerSecret()

Return static consumer secret

B<Arguments:> None

B<Returns:> Consumer secret as string

=cut

sub _getConsumerSecret
{
    my $self = shift;
    my $secretFilename = $self->{config}->getParam("OpenId",
						   "ConsumerSecretFilename");
    if (! -f $secretFilename )
    {
	throw GridShibCA::OpenIdException("OpenId Consumer secret file does not exist: $secretFilename");
    }

    if (! -r $secretFilename )
    {
	throw GridShibCA::OpenIdException("OpenId Consumer secret file is not readable: $secretFilename");
    }

    $self->{logger}->debug("Reading OpenId consumer secret from $secretFilename");

    my $file = FileHandle->new($secretFilename, "r") ||
	throw GridShibCA::OpenIdException("Error opening OpenId Consumer secret file $secretFilename: $!");

    my $secret = $file->getline() ||
	throw GridShibCA::OpenIdException("Error reading OpenId Consumer secret from $secretFilename: $!");

    $self->{logger}->debug("Reading OpenId consumer secret is $secret");

    $file->close();

    return $secret;
}

=back

=cut

######################################################################
#
# GridShibCA::OpenIdException

package GridShibCA::OpenIdException;

# Inherit GridShibCA::Exception
use base qw(GridShibCA::Exception);

=head2 GridShibCA::OpenIdException

Class for exceptions caused by session errors.

=over 4

=item new()

B<Arguments:> Net::OpenID::Consumer instance or string.

B<Returns:> GridShibCA::OpenIdException instance.

=cut

sub new
{
    my $class = shift;
    my $text = shift;

    if (ref($text))
    {
	# Net::OpenId::Consumer instance
	my $errcode = $text->errcode();
	my $errtext = $text->errtext();
	$text = "OpenId error: $errtext ($errcode)";
    }

    my $self = $class->SUPER::new($text);
    bless($self, $class);
    return $self;
}

=back

=cut 

######################################################################

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
