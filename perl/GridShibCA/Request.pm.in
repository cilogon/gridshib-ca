#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# GridShib CA object representing user request.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::Request

Object representing using request.

=head2 Configuration Parameters

This class uses the following values from F<gridshib-ca.conf>:

=over 4

=item XXX

XXX

=back

=cut

package GridShibCA::Request;

use GridShibCA::Config;

use CGI;

=head2 Methods

=over 4

=item new()

Create a new Request object.

B<Arguments:> None

B<Returns:> Request instance

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{config} = GridShibCA::Config->new(defaultSection => "Commands");
    $self->{logger} = $self->{config}->getLogger();
    if (!defined($self->{logger}))
    {
	return undef;
    }
    $self->{cgi} = $self->{config}->getCGI();
    if (!defined($self->{cgi}))
    {
	return undef;
    }
    # Command to invoke if none given
    $self->{defaultCommand} = "DEFAULT";
    $self->{error} = undef;
    bless($self, $class);
    return $self;
}

=item dispatch()

Dispatch the user's request

B<Arguments:> None

B<Returns:> True on success, False on error.

=cut

sub dispatch()
{
    my $self = shift;
    my $command = $self->getCommand();

    my $instance = $config->getCommandModule($command);
    if (!defined($instance))
    {
	$self->_error($config->getError());
	return 0;
    }

    return $instance->invoke($self);
}

=item getCommand()

Returns a string with the requested command.

B<Arguments:> None

B<Returns:> String with requested command, undef if none present.

=cut

sub getCommand
{
    my $self = shift;
    my $command = $self->{cgi}->param('command');
    if (!defined($command))
    {
	$command = $self->{defaultCommand};
    }
    return $command;
}


=item getError()

Return the last error message as a string.

B<Arguments:> None

B<Returns:> Nothing

=cut

sub getError
{
    my $self = shift;
    return $self->{error} || "No Error";
}


=back

=cut

######################################################################

=head2 Internal methods

These internal methods not intended for external use.

=over 4

=item _error()

Handle a error message.

B<Arguments:> As to sprintf()

B<Returns:> Nothing

=cut

sub _error
{
    my $self = shift;
    my $format = shift;

    if (!defined($self->{error}))
    {
	$self->{error} = "";
    }
    chomp($format);
    my $string = sprintf("GridShib-CA Configuration error: " . $format . "\n",
			 @_);
    $self->{error} .= $string;

    # Don't use our Logger module as that could create a deadlock as the
    # Logger class tries to load its configuration using this module
    # Instead we'll print to STDERR, which should end up in the web
    # server error logs.
    printf(STDERR $string);
}


=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
