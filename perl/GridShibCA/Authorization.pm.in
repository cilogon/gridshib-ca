######################################################################
#
# $Id$
#
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::Authorization

Authorization system interface.

=cut

package GridShibCA::Authorization;

use FileHandle;

use GridShibCA::Config;

=head2 Methods

=over 4

=item new()

Create a new Authorization object.

B<Arguments:> None

B<Returns:> Authorization instance

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{config} = GridShibCA::Config->new();
    bless($self, $class);
    return $self;
}

=item authorize()

Authorize whether a user can be issued a certificate.
This implementation authorizes all users.

B<Arguments:>

C<$webSignOn> - WebSignOn instance.

B<Returns:> 1 if user authorized, 0 otherwise

=cut

sub authorize
{
    my $self = shift;
    my $webSignOn = shift;

    if (!defined($webSignOn))
    {
	$self->_error("Authorization module received undefined WebSignOn object.");
	return 0;
    }
    my $userId = $webSignOn->getUserId();
    if (!defined($userId) or ($userId eq ""))
    {
	$self->_error("Authorization module got undefined UserId.");
	return 0;
    }
    my $idp = $webSignOn->getIdP();
    if (!defined($idp) or ($idp eq ""))
    {
	$self->_error("Authorization module got undefined IdP.");
    }

    my $authorizedIdpFilename =
	$self->{config}->getParam("AuthorizedIdpsFile");
    my $status = $self->_inFile($idp, $authorizedIdpFilename);

    if ($status == -1)
    {
	return 0;
    }
    
    if ($status == 0)
    {
	$self->_error("Idp unrecognized.");
	return 0;
    }

    return 1;
}


=item getError()

Return the last error message as a string.

B<Arguments:> None

B<Returns:> Error string

=cut

sub getError
{
    my $self = shift;
    return $self->{error}
}

=back

=cut

######################################################################

=head2 Internal methods

These internal methods not intended for external use.

=over 4


=item _error()

Handle a error message.

B<Arguments:> As to sprintf()

B<Returns:> Nothing

=cut

sub _error
{
    my $self = shift;
    my $format = shift;
    $self->{error} = sprintf($format, @_);
}

=item _inFile()

Does the given string appear in the given file. File is expected to
have one string per line and strings can contain an "*" which matches
any portion of the given string. Each line may have extra text,
separated with whitespace, after the initial string, which is ignored.

Line in the file begining with a "#" are treated as comments and ignored.

B<Arguments:>

I<$string> - String to match

I<$filename> - Filename

B<Returns:> One if string matches a line in file, zero if not, -1 on error

=cut

sub _inFile
{
    my $self = shift;
    my $string = shift;
    my $filename = shift;

    my $found = 0;

    my $fh = new FileHandle;
    if (!$fh->open("<$filename"))
    {
	$self->_error("Could not open authorized Idp file (%s): %s",
		      $filename, $!);
	return -1;
    }
    while (<$fh>)
    {
	my $line = $_;
	chomp($line);

	# Strip comments
	$line =~ s/#.*$//;

	# Ignore empty lines
	if ($line =~ /^\s*$/)
	{
	    next;
	}

	# Get initial string
	my ($regex, $remainder) = split(/\s+/, $line);

	# Convert to perl regex form
	$regex =~ s/\*/.+/g;
	$regex = "^" . $regex . "\$";

	if ($string =~ /$regex/)
	{
	    $found = 1;
	    last;
	}
    }

    $fh->close();

    return $found;
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

### Local Variables: ***
### mode:perl ***
### End: ***
######################################################################
