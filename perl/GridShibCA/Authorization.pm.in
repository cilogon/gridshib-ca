######################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 GridShibCA::Authorization

Authorization system interface.

=cut

package GridShibCA::Authorization;

# Inherit GridShibCA::Policy
use base qw(GridShibCA::Policy);

use GridShibCA::Exception qw(:try);

=head2 Methods

=over 4

=item new()

Create a new Authorization object.

B<Arguments:> GridShibCA::UserIdentity object

B<Returns:> Authorization instance

=cut

sub new
{
    my $class = shift;
    my $self = $class->SUPER::new(@_);
    bless($self, $class);
    return $self;
}

=item isAuthorized()

Authorize wether or not we should provide credentials to this user.

B<Arguments:> None

B<Returns:> 1 if user authorized.

Throws GridShibCA::AuthorizationFailedException if not authorized

Throws GridShibCA::AuthorizationException on error.

=cut

sub isAuthorized
{
    my $self = shift;
    try
    {
	my $idpPolicy = $self->_getIdpPolicy();
	# Previous line should throw an exception if idp not found, but
	# we'll be paranoid her.
	if (!defined($idpPolicy))
	{
	    throw GridShibCA::PolicyException("getIdpPolicy() returned undefined");
	}
    }
    otherwise
    {
	my $ex = shift;
	throw GridShibCA::AuthorizationFailedException($ex->text());
    };
    
    return 1;
}

=item authorizeSession()

Authorize whether a user represented by give CGISession instance can
be issued a certificate.

B<Arguments:> CGISession instance.

B<Returns:> 1 if user authorized.

Throws GridShibCA::AuthorizationFailedException if not authorized

Throws GridShibCA::AuthorizationException on error.

=cut

sub authorizeSession
{
    my $self = shift;
    my $session = shift ||
	throw GridShibCA::AuthorizationException("Missing sesssion argument");

    my $userId = $session->param("UserId");
    if (!defined($userId) or ($userId eq ""))
    {
	throw GridShibCA::AuthorizationException("Authorization module got undefined UserId.");
    }
    my $idp = $session->param("IdP");
    if (!defined($idp) or ($idp eq ""))
    {
	throw GridShibCA::AuthorizationException("Authorization module got undefined IdP.");
    }

    return $self->_authorize($idp, $userId);

}


=item authorizeSignon()

Authorize initial sign-on of user represented by a WebSignOn instance.

B<Arguments:> WebSignOn instance.

B<Returns:> 1 if user authorized.

Throws GridShibCA::AuthorizationFailedException if not authorized

Throws GridShibCA::AuthorizationException on error.

=cut

sub authorizeSignon
{
    my $self = shift;
    my $signon = shift ||
	throw GridShibCA::AuthorizationException("Missing signon argument");

    my $userId = $signon->getUserId();
    if (!defined($userId) or ($userId eq ""))
    {
	throw GridShibCA::AuthorizationException("Authorization module got undefined UserId.");
    }
    my $idp = $signon->getIdP();
    if (!defined($idp) or ($idp eq ""))
    {
	throw GridShibCA::AuthorizationException("Authorization module got undefined IdP.");
    }

    return $self->_authorize($idp, $userId);
}


=back

=cut

######################################################################

=head2 Internal methods

These internal methods not intended for external use.

=over 4

=item _authorize()

Authorize the given user.

B<Arguments:>

C<$idp> Identity provider Id.

C<$userId> User identifier.

B<Returns:> 1 on success.

Throws GridShibCA::AuthorizationFailedException if not authorized

Throws GridShibCA::AuthorizationException on error.

=cut

sub _authorize
{
    my $self = shift;
    my $idp = shift;
    my $userId = shift;

    my $authorizedIdpFilename =
	$self->{config}->getParam("Authorization", "AuthorizedIdpsFile");
    my $status = $self->_inFile($idp, $authorizedIdpFilename);

    if ($status != 1)
    {
	my $logText = sprintf("Authorization failed:UserId %s:IdPId %s",
			      $userId,
			      $idp);

	if ($status == 0)
	{
	    $logText .= ":IdP unrecognized";
	}
	else
	{
	    $logText .= ":Bad userId";
	}
	throw GridShibCA::AuthorizationFailedException("Authorization Failed",
	    -logText=>$logText);
    }

    return 1;
}

=item _inFile()

Does the given string appear in the given file. File is expected to
have one string per line and strings can contain an "*" which matches
any portion of the given string. Each line may have extra text,
separated with whitespace, after the initial string, which is ignored.

Line in the file begining with a "#" are treated as comments and ignored.

B<Arguments:>

I<$string> - String to match

I<$filename> - Filename

B<Returns:> One if string matches a line in file, zero if not.

Throws GridShibCA::AuthorizationException on error.

=cut

sub _inFile
{
    my $self = shift;
    my $string = shift;
    my $filename = shift;

    my $found = 0;

    my $fh = new FileHandle;
    if (!$fh->open("<$filename"))
    {
	throw GridShibCA::AuthorizationException("Could not open authorized Idp file ($filename): $!");
    }
    while (<$fh>)
    {
	my $line = $_;
	chomp($line);

	# Strip comments
	$line =~ s/#.*$//;

	# Ignore empty lines
	if ($line =~ /^\s*$/)
	{
	    next;
	}

	# Get initial string
	my ($regex, $remainder) = split(/\s+/, $line);

	# Convert to perl regex form
	$regex =~ s/\*/.+/g;
	$regex = "^" . $regex . "\$";

	if ($string =~ /$regex/)
	{
	    $found = 1;
	    last;
	}
    }

    $fh->close();

    return $found;
}

=back

=cut

######################################################################
#
# GridShibCA::AuthorizationException

package GridShibCA::AuthorizationException;

# Inherit GridShibCA::Exception
use base qw(GridShibCA::Exception);

=head1 GridShibCA::AuthorizationException

Class for exceptions caused by authorization errors (besides failure).

=cut

######################################################################
#
# GridShibCA::AuthorizationFailedException

package GridShibCA::AuthorizationFailedException;

# Inherit GridShibCA::Exception
use base qw(GridShibCA::Exception);

=head1 GridShibCA::AuthorizationFailedException

Class for exceptions caused by authorization failure.

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

# Return true for import/use
1;

### Local Variables: ***
### mode:perl ***
### End: ***
######################################################################
