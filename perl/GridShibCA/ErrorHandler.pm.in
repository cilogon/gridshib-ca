######################################################################
#
# $Id$
#
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::ErrorHandler

Handle various errors, handling both logging and response to client.

Public methods are exported, so one can use package in follow form:

use GridShibCA::ErrorHandler qw(handleError);

=cut

package GridShibCA::ErrorHandler;

# Allow user of this package to export routines directly into their namespace
require Exporter;
@ISA = qw(Exporter);
@EXPORT_OK = qw(handleError logError htmlError htmlErrorAndExit);

use GridShibCA::Exception qw(:try);

=head2 Methods

=over 4

=item handleError()

Handle a serious error. This includes logging and response to client.

B<Arguments:>

C<$message> Error message

Optional arguments:

C<-exception> Causal exception

C<-exitCode> Exit code

B<Returns:> Does not return, invokes exit()

=cut

sub handleError
{
    my $message = shift || "No message given";
    my %args = @_;
    my $ex = $args{-exception};

    logError($message, $ex);

    # XXX Really we only want to do this if the client is a web browser
    htmlError($message, $ex);

    my $exitCode = $args{-exitCode} || 1;
    exit($exitCode);
}

=item logError()

Handle logging of error.

B<Arguments:>

C<$message> Error message

C<$ex> Optional exception

B<Returns:> Nothing

=cut

sub logError
{
    my $message = shift || "No message given";
    my $ex = shift; # Optional

    try
    {
	my $config = GridShibCA::Config->new();
	my $logger = $config->getLogger();

	$logger->err("Error: $message");
	if (defined($ex))
	{
	    $logger->logException($ex);
	}
    }
    otherwise
    {
	my $logEx = shift;

	# Graceful logging failed. Fall back to STDERR so it ends up
	# in Apache error log.
	print STDERR "Logging failed handling error: $message";
	if (defined($ex))
	{
	    print STDERR "EXCEPTION: " . $ex->text() . "\n";
	    if ($ex->stacktrace())
	    {
		print STDERR $ex->stacktrace();
	    }
	}
	if (defined($logEx))
	{
	    print STDERR "Logging error: " . $logEx->text() . "\n";
	}
	else
	{
	    # This shouldn't happen
	    print STDERR "Unknown logging error.\n";
	}
    };
}

=item htmlErrorAndExit

Display an HTML error to client and then exit with a status of 1.

B<Arguments:>

C<$message> Error message

B<Returns:> Doesn't. Calls exit().

=cut

sub htmlErrorAndExit
{
    my $message = shift || "No message given";

    htmlError($message);
    exit(1);
}

=item htmlError()

Handle displaying of a HTML-formatted error to client.

B<Arguments:>

C<$message> Error message

B<Returns:> Nothing

=cut

sub htmlError
{
    my $message = shift || "No message given";
    
    try
    {
	my $config = GridShibCA::Config->new();
	my $template = $config->getHTMLTemplate("ErrorTemplate");
	my %mappings = (
	    "Error" => $message,
	    );
	$template->addMappings(%mappings);
	print $template->getText();
    }
    otherwise
    {
	my $htmlEx = shift;

	# Nice HTML output failed. Fall back to simple version
	print "Content-type: text/plain\n\n";
	print "Sorry, but an problem occurred and the normal reporting mechanism failed!\n";
	print "The original error was: " . $message . "\n";
	print "The error reporting the problem was: " . $htmlEx->text() . "\n";
	print "Please report this to the site administrator.\n";
    };
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

### Local Variables: ***
### mode:perl ***
### End: ***
######################################################################
