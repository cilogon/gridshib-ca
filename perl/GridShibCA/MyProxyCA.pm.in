######################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 GridShibCA::MyProxyCA

Implementation of L<GridShibCA::CA Class|GridShibCA::CA> based on MyProxy.
See that Module for a description of methods.

=head2 Configuration Parameters

This class uses the following values from the MyProxyCA section of
F<gridshib-ca.conf>:

=over 4

=item Server

Hostname of MyProxy Server

=item Port

Port of MyProxy Server

=item ClientCert

Certificate to use to authenticate to MyProxy

=item ClientKey

Key to use to authenticate to MyProxy

=back

=cut

package GridShibCA::MyProxyCA;

# Inherit CA class
use GridShibCA::CA;
@ISA = ("GridShibCA::CA");

use Globus::MyProxyClient;

use GridShibCA::Config;
use GridShibCA::Exception qw(:try);
use GridShibCA::X509DN;

=head2 Methods

=over 4

=item new()

Create a new interface to a MyProxy CA.

B<Arguments:>

C<$username> - name of user as string

C<$idp> - idp of user as string

B<Returns:> CA instance

=cut

sub new
{
    my $class = shift;
    my $self = $class->SUPER::new(@_);
    $self->{config} = GridShibCA::Config->new();

    try {
      $self->{confighost} = $self->{config}->getParam("MyProxyCA","Server");
      $self->{configport} = $self->{config}->getParam("MyProxyCA","Port");
      $self->{configcert} = $self->{config}->getParam("MyProxyCA","ClientCert");
      $self->{configkey} = $self->{config}->getParam("MyProxyCA","ClientKey");
    } catch  GridShibCA::ConfigException with {
      my $ex = shift;
      throw GridShibCA::CAException("MyProxyCA configuration error: " . 
          $ex->text());
    };

    bless($self, $class);
    return $self;
}

=back

=cut

######################################################################

=head2 Internal methods

These internal methods not intended for external use.

=over 4

=item _signRequest()

Given a certificate request return a certificate

B<Arguments:>

C<$session> CGISession instance (Required)

C<$certificateRequest> PKCS10 certificate request as PEM-ncoded string.

Optional dictionary with the following optional values:

C<requestedLifetime> Requested lifetime in seconds.

B<Returns:> Certificate as Crypt::OpenSSL::X509 object

=cut

sub _signRequest
{
    my $self = shift;
    my $session = shift ||
      throw GridShibCA::CAException("Missing session argument");
    my $certificateRequest = shift ||
      throw GridShibCA::CAException("Missing certificate request argument");
    my %options = @_;

    my $dn = $self->_getMyProxyUsername($session);
    my $reqPEM = $self->_convertReqPEMtoDER($certificateRequest);

    my $client = Globus::MyProxyClient->new(
        ServerHost => $self->_getHost($session),
        ServerPort => $self->_getPort($session),
        ClientCert => $self->_getCert($session),
        ClientKey => $self->_getKey($session));

    if (!defined($client))
    {
        throw GridShibCA::CAException("Error creating MyProxyClient object: %s",
                                      Globus::MyProxyClient::errstr());
    }

    # This isn't used since we're authenticating with a certificate
    # and private key
    my $passphrase = "Dummy";
    my $lifetime = $options{requestedLifetime};
    $self->{logger}->debug("MyProxy request: DN = %s lifetime = %d",
                           $dn, $lifetime);
    my $cred = $client->getCred(
        Username => $dn,
        Passphrase => $passphrase,
        Lifetime => $lifetime,
        CertReq => $reqPEM,
        CertReqFormat => "DER");

    if (!defined($cred))
    {
        throw GridShibCA::CAException(
            "Error getting credential from MyProxy: " . $client->errstr());
    }

    my @certs = $cred->getDERCerts();
    if ($#certs > 1)
    {
        throw GridShibCA::CAException("Got a certificate chain from MyProxy " .
            "of length greater than 1 (" . $#certs . ")");
    }
    my $cert = $self->_convertCertDERtoPEM($certs[0]);
    my $x509 = $self->_X509fromPEM($cert);
    return $x509;
}

=item _getHost

Returns the hostname of the MyProxyCA server.  In this class,
the default MyProxyCA hostname as set in the gridshib-ca.conf
file is returned.  This method can be overridden by subclasses
to return a different value.

B<Arguments:> A Session object.

B<Returns:> The hostname of the MyProxyCA server.

=cut

sub _getHost
{
    my $self = shift;
    my $session = shift ||
      throw GridShibCA::CAException("Missing session argument");
    return $self->{confighost};
}

=item _getPort

Returns the port number of the MyProxyCA server.  In this class,
the default MyProxyCA port as set in the gridshib-ca.conf
file is returned.  This method can be overridden by subclasses
to return a different value.

B<Arguments:> A Session object.

B<Returns:> The port number of the MyProxyCA server.

=cut

sub _getPort
{
    my $self = shift;
    my $session = shift ||
      throw GridShibCA::CAException("Missing session argument");
    return $self->{configport};
}

=item _getCert

Returns the client certificate to use when connecting to the MyProxyCA
server.  In this class, the default client certificate as set in the
gridshib-ca.conf file is returned.  This method can be overridden by
subclasses to return a different value.

B<Arguments:> A Session object.

B<Returns:> The client certificate to use when connecting to the MyProxyCA
server.

=cut

sub _getCert
{
    my $self = shift;
    my $session = shift ||
      throw GridShibCA::CAException("Missing session argument");
    return $self->{configcert};
}

=item _getKey

Returns the client private key to use when connecting to the MyProxyCA
server.  In this class, the default client private key as set in the
gridshib-ca.conf file is returned.  This method can be overridden by
subclasses to return a different value.

B<Arguments:> A Session object.

B<Returns:> The client private key to use when connecting to the MyProxyCA
server.

=cut

sub _getKey
{
    my $self = shift;
    my $session = shift ||
      throw GridShibCA::CAException("Missing session argument");
    return $self->{configkey};
}

=item _getMyProxyUsername

Returns a username to be sent to the MyProxy server when
getting a credential.  In this method, the returned string
is a DN.

B<Arguments:> A Session object.

B<Returns:> The username to pass to the MyProxy server.

=cut

sub _getMyProxyUsername
{
    my $self = shift;
    my $session = shift ||
      throw GridShibCA::CAException("Missing session argument");

    my $userId = $session->userIdentity();
    my $nameMapper = $self->{config}->getNameMapper($userId);
    return $nameMapper->getUserDN()->getProtectedOpenSSLDN();
}

=item _convertReqPEMtoDER

Convert PEM-encoded PKCS10 request to DER.

B<Arguments:> Certificate request as PEM-encoded PKCS10 string.

B<Returns:> Certificate request as DER-encoded string.

=cut

sub _convertReqPEMtoDER {
    my $self = shift;
    my $reqPEM = shift;
    my @args = ();

    # Uses OpenSSL as there doesn't seem to be a native way to accomplish.
    push(@args, "req");
    push(@args, "-inform", "PEM");
    push(@args, "-outform", "DER");
    my $openssl = $self->{config}->getParam("Binaries","OpenSSL");
    my $cmd = $self->{config}->getCommand($openssl, @args);
    $cmd->setInput($reqPEM);
    if (!$cmd->exec())
    {
        throw GridShibCA::CAException("Trying to convert request from " .
            "PEM to DER: OpenSSL returned non-zero.");
    }
    return $cmd->getOutput();
}

=item _convertCertDERtoPEM

Convert DER encoded X.509 certificate to PEM.

B<Arguments:> DER-encoded X.509 certificate.

B<Returns:> Certificate as PEM-encoded string.

=cut

sub _convertCertDERtoPEM {
    my $self = shift;
    my $certDER = shift;
    my @args = ();

    # Uses OpenSSL as there doesn't seem to be a native way to accomplish.
    push(@args, "x509");
    push(@args, "-inform", "DER");
    push(@args, "-outform", "PEM");
    my $openssl = $self->{config}->getParam("Binaries","OpenSSL");
    my $cmd = $self->{config}->getCommand($openssl, @args);
    $cmd->setInput($certDER);
    if (!$cmd->exec())
    {
        throw GridShibCA::CAException("Error converting certificate from " .
            "DER to PEM: OpenSSL returned non-zero");
    }
    return $cmd->getOutput();
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
