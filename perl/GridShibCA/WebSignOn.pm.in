#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# GridShib CA interface for Shibboleth.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::WebSignOn

Template for GridShib-CA interface to the web sign-on system
(e.g. Shibboleth).

=cut

package GridShibCA::WebSignOn;
use GridShibCA::Config;

=head2 Methods

=over 4

=item new()

Create a new WebSignOn object. Caller should call init() to actually
populate the object.

B<Arguments:> None

B<Returns:> WebSignOn instance

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{config} = GridShibCA::Config->new();
    $self->{logger} = $self->{config}->getLogger();
    $self->{error} = undef;
    bless($self, $class);
    return $self;
}

=item init()

Initialize the WebSignOn object with the user's information from the
sign-on system.

B<Arguments:> None

B<Returns:> True on success, False on failure.

=cut
sub init
{
    my $self = shift;
    $self->{userId} = $self->_userId();
    $self->{IdPId} = $self->_idPId();

    if (!defined($self->{userId}) && !defined($self->{IdPId}))
    {
	$self->_error("Cannot identify origin site or user. It appears this script is not protected by web sign-on.");
	return 0;
    }
    elsif (!defined($self->{userId}))
    {
	$self->_error("Cannot determine user identity.");
	return 0;
    }
    elsif (!defined($self->{IdPId}))
    {
	$self->_error("Cannot determine users' origin site.");
	return 0;
    }

    return 1;
}

=item getUserId()

Return the unchecked, tainted user id as reported by sign-on system.

B<Arguments:> None

B<Returns:> User id as string, or undef if unknown

=cut

sub getUserId
{
    my $self = shift;
    return $self->_userId();
}

=item getIdP()

Returns the unchecked, tainted identity provider identifier.

B<Arguments:> None

B<Returns:> IdP as string, or undef if unknown

=cut

sub getIdP
{
    my $self = shift;
    return $self->_idPId();
}

=item serialize()

Serialize the object to a string for storage in a session.

B<Argyuments:> None

B<Returns:> Serialized object as a string, undef on error

=cut

sub serialize
{
    my $self = shift;

    use FreezeThaw;

    return FreezeThaw::freeze($self);
}

=item deserialize()

Class method to deserialize given string and return an SignOn object.

B<Arguments:> Serialed object as string

B<Returns:> Object instance, undef on error

=cut

sub deserialize
{
    my $class = shift;
    my $serialzedObject = shift;

    use FreezeThaw;

    return FreezeThaw::thaw($serialzedObject);
}


=item getError()

Return the last error message as a string.

B<Arguments:> None

B<Returns:> Nothing

=cut

sub getError
{
    my $self = shift;
    return $self->{error};
}

######################################################################

=head2 Internal methods

These internal methods not intended for external use.

=over 4


=item _userId()

Returns an unchecked, tainted UserId. Should be overriden by child
class.

B<Arguments:> None

B<Returns:> UserId, undef on error

=cut

sub _userId()
{
    my $self = shift;
    return undef;
}

=item _idPId()

Returns an unchecked, tainted IdpId. Should be overridden by child class.

B<Arguments:> None

B<Returns:> Clean IdPId, undef on error

=cut

sub _idPId
{
    my $self = shift;
    return undef;
}

=item _error()

Handle logging an error message.

B<Arguments:>

C<$format> As per sprintf()

C<@args> As per sprintf()

B<Returns:> Nothing

=cut

sub _error
{
    my $self = shift;
    my $format = shift;
    my @args = @_;

    chomp($format);

    my $string = sprintf($format, @args);
    
    $self->{logger}->err($string);

    if (!defined($self->{error}))
    {
	$self->{error} = "";
    }
    else
    {
	$self->{error} .= "\n";
    }
    $self->{error} .= $string;
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
