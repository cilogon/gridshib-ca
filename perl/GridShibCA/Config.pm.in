######################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 GridShibCA::Config

Interface to GridShib CA configuration and loader of classes based
on that configuration.

Configuration file can be set by setConfigFilename() (if called before
new()). Otherwise will be taken from the GRIDSHIBCA_CONFIG_FILENAME
environment variable if set, or from the CONFIG_FILE variable in
L<GridShibCA::Constants> module.

=cut

package GridShibCA::Config;

use GridShibCA::Constants;
use GridShibCA::Exception qw(:try);

use Carp;
use Config::General;
use File::Spec;
use URI;

# Default value of configuration file to read
my $configFilename = 
    $ENV{"GRIDSHIB_CA_CONFIG_FILENAME"} ||
    $GridShibCA::Constants::CONFIG_FILE;

# Actual Config::General object, will be set first time Config object
# is created
my $config = undef;

=head2 Methods

=over 4

=item new()

Create a new Config object.

B<Arguments:> Optional dictionary with following values:

C<debug> Turn on debugging if True

B<Returns:> Config instance

=cut

sub new
{
    my $class = shift;
    my %args = @_;

    my $self = {};
    bless($self, $class);

    if (defined($args{debug}) && $args{debug})
    {
	$self->{debug} = 1;
	$self->_debug("Debugging enabled");
    }

    if (!defined($config))
    {
	$self->_initConfig();
    }
    $self->{config} = $config;
    
    # Now we are set up enough to get our logger
    $self->{logger} = $self->getLogger();
    
    $self->_debug("Config objection creation successful.");

    return $self;
}

=item getConfigFilename()

Return the filename of the configuration file.

B<Arguments:> None.

B<Returns:> Filename as string.

=cut

sub getConfigFilename
{
    return $configFilename;
}


=item setConfigFilename()

Set filename of the configuration file.

B<Arguments:> Filename as string

B<Returns:> Nothing.

=cut

sub setConfigFilename
{
    my $class = shift;
    my $filename = shift;
    $configFilename = $filename;
}

=item getParam()

Return a configuration parameter from the default section.

B<Arguments:>

C<$section> Optional section name.

C<$param> Parameter name as string

B<Returns:>
Value as string, throws GridShibCA::ConfigException if not found.

=cut

sub getParam
{
    my $self = shift;
    my $section = undef;
    if ($#_ > 0)
    {
	$section = shift;
    }
    my $param = shift;

    my $config = $self->{config};

    if (defined($section))
    {
	if (!$config->exists($section) ||
	    !$config->is_hash($section))
	{
	    throw GridShibCA::ConfigException("Request for parameter \"$param\" in non-existant section \"$section\"");
	}

	# Section now becomes the object we get value from.
	$config = $config->obj($section);
    }
    # Come up with string describing parameter for errors
    my $paramName = sprintf("parameter \"%s\"", $param);
    if (defined($section))
    {
	$paramName .= sprintf(" in section \"%s\"", $section);
    }
    if (!$config->exists($param))
    {
	throw GridShibCA::ConfigException("Unknown " . $paramName);
    }	
    if ($config->is_hash($param))
    {
	throw GridShibCA::ConfigException("Parameter is a section: " . $paramName);
    }
    my $value = $config->value($param);
    return $value;
}

=item getParamBoolean()

Return a boolean configuration parameter from the default section.

B<Arguments:>

C<$section> Optional section name.

C<$param> Parameter name as string

B<Returns:>
Value as boolean, throws GridShibCA::ConfigException if not found.

=cut

sub getParamBoolean
{
    my $self = shift;

    # Config::General handles this for us, so we just use normal method
    return $self->getParam(@_);
}

=item getParamURI()

Return a configuration parameter as a URI object. Cleaning it up in the
process.

B<Arguments:>

C<$section> Optional section name.

C<$param> Parameter name as string

B<Returns:>
Value as URI instance, throws GridShibCA::ConfigException if not found.

=cut

sub getParamURI
{
    my $self = shift;
    my $url = $self->getParam(@_);

    # Clean up path. 
    my $uri;
    if ($url =~ /^\w+:/)
    {
	# Absolute URL, just clean up path portion.
	$uri = URI->new($url);
	$uri->path(File::Spec->canonpath($uri->path()));
    }
    else
    {
	# Relative URL, clean up first to avoid URI confusing "//" at
	# start as start of host.
	$uri = URI->new(File::Spec->canonpath($url));
    }
    return $uri;
}

=item getParamURL()

Return a configuration parameter as a cleaned up URL string.

B<Arguments:>

C<$section> Optional section name.

C<$param> Parameter name as string

B<Returns:> URL as string, throws GridShibCA::ConfigException if not found.

=cut

sub getParamURL
{
    my $self = shift;
    my $uri = $self->getParamURI(@_);
    return $uri->canonical();
}

=item getSection()

Return a hash representing a section

B<Arguments:> One or more section names representing a set of section
names to walk down.

B<Returns:> Hash representing section.

Throws GridShibCA::ConfigException if section not found.

=cut

sub getSection
{
    my $self = shift;
    my @sectionNames = @_;
    if (scalar(@sectionNames) < 1)
    {
	throw GridShibCA::ConfigException("Missing section name argument");
    }
    my $config = $self->{config};

    # String representing path of sections we've walked
    my $path = undef;
    # We keep a hash in addition to obj of each config level we walk
    # so we can return this if needed.
    my %hash = ();

    foreach my $section (@sectionNames)
    {
	if (defined($path))
	{
	    $path = $path . "/" . $section;
	}
	else
	{
	    $path = $section;
	}

	if (!$config->exists($section) ||
	    !$config->is_hash($section))
	{
	    throw GridShibCA::ConfigException("Request for non-existant section \"$path\"");
	}

	%hash = $config->hash($section);
	$config = $config->obj($section);
    }

    return %hash;
}

=item dump()

Print parameters to STDOUT. Intended for debugging.

B<Arguments:> None

B<Returns:> Nothing

=cut

sub dump
{
    my $self = shift;
    my $config = $self->{config};
    print $config->save_string();
}

=item  getCommandModule()

Given a command name, return the module of the Command referenced by
that name from the Commands section of the configuration file.

B<Arguments:>

C<$request> Command name

B<Returns:> Instance, throws GridShibCA::ModuleException on error.

=cut

sub getCommandModule
{
    my $self = shift;
    my $command = shift;

    if (!defined($command))
    {
	throw GridShibCA::InternalException("Undefined command");
    }

    if ($command eq "DEFAULT")
    {
	# DEFAULT is an alias to real command name
	$command = $self->getParam("Commands", "DEFAULT");
    }

    my %commandHash = $self->getSection("Commands", $command);

    my $class = $commandHash{class};
    if (!defined($class))
    {
	throw GridShibCA::ModuleException("No class defined for command \"$command\"");
    }
    $self->{logger}->debug("Loading class \"$class\" for command $command");
    
    return $self->_newInstance($class, %commandHash);
}

=back

=cut

######################################################################

=head2 Module Loading Methods

These functions fetch instances of Modules bases on configuration.
Each returns an instance of the given Module or a derived Module
which implements the same interface.

=over 4

=item getModules()

Return a list of all modules configured in F<gridshib-ca.conf>. Mainly
intended for testing.

=cut
sub getModules
{
    my $self = shift;
    my $config = $self->{config};
    if (!$config->exists("Modules") || !$config->is_hash("Modules"))
    {
	return ();
    }
    my %modulesSection = $config->hash("Modules");
    return keys(%modulesSection);
}

=item getAuthorization()

Get an instance of the GridShibCA::Authorization module by loading it and
calling its new method with the given arguments.
See L<GridShibCA::Authorization>.

The exact module loaded is controlled by the Authorization variable
in the Modules section of F<gridshib-ca.conf>.

=cut

sub getAuthorization
{
    my $self = shift;
    return $self->_newModule("Authorization", @_);
}

=item getCA()

Get an instance of the GridShibCA::CA module by loading it and
calling its new method with the given arguments. See L<GridShibCA::CA>.

The exact module loaded is controlled by the CA variable
in the Modules section of F<gridshib-ca.conf>.

=cut

sub getCA
{
    my $self = shift;
    return $self->_newModule("CA", @_);
}

=item getCertRegistry()

Get an instance of the GridShibCA::CertRegistry module by loading it and
calling its new method with the given arguments.
See L<GridShibCA::CertRegistry>.

The exact module loaded is controlled by the CertRegistry variable
in the Modules section of F<gridshib-ca.conf>.

=cut

sub getCertRegistry
{
    my $self = shift;
    return $self->_newModule("CertRegistry", @_);
}

=item getCGI()

Get an instance of the GridShibCA::CGI module by loading it and
calling its new method with the given arguments.
See L<GridShibCA::CGIinterface>.

The exact module loaded is controlled by the CGI variable
in the Modules section F<gridshib-ca.conf>.

=cut

sub getCGI
{
    my $self = shift;
    return $self->_newModule("CGI", @_);
}

=item getCGISession()

Get an instance of the GridShibCA::CGISession module by loading it and
calling its new method with the given arguments.
See L<GridShibCA::CGISession>.

The exact module loaded is controlled by the CGISession variable
in the Modules section of F<gridshib-ca.conf>.

=cut

sub getCGISession
{
    my $self = shift;
    return $self->_newModule("CGISession", @_);
}

=item getCommand()

Get an instance of the GridShibCA::Command module by loading it and
calling its new method with the given arguments. See L<GridShibCA::Command>.

The exact module loaded is controlled by the Command variable
in the Modules section of F<gridshib-ca.conf>.

=cut

sub getCommand
{
    my $self = shift;
    return $self->_newModule("Command", @_);
}

=item getHTMLError()

Get an instance of the GridShibCA::Error module by loading it and
calling its new method with the given arguments.
See L<GridShibCA::HTMLError>.

The exact module loaded is controlled by the HTMLError variable
in the Modules section of F<gridshib-ca.conf>.

=cut

sub getHTMLError
{
    my $self = shift;
    return $self->_newModule("HTMLError", @_);
}

=item getHTMLTemplate()

Get an instance of the GridShibCA::HTMLTemplate module by loading it and
calling its new method with the given arguments.
See L<GridShibCA::HTMLTemplate>.

The exact module loaded is controlled by the HTMLTemplate variable
in the Modules section of F<gridshib-ca.conf>.

=cut

sub getHTMLTemplate
{
    my $self = shift;
    my $templateName = shift ||
	throw GridShibCA::ConfigException("Missing template name");
    my $filename = $self->_templateNameToFilename($templateName);
    return $self->_newModule("HTMLTemplate", $filename);
}

=item getLogger()

Get an instance of the GridShibCA::Logger module by loading it and
calling its new method with the given arguments. See L<GridShibCA::Logger>.

The exact module loaded is controlled by the Logger variable
in the Modules section of F<gridshib-ca.conf>.

=cut

sub getLogger
{
    my $self = shift;
    # Pass in reference to ourselves to prevent call to Config->new()
    # which would case an infinite loop.
    return $self->_newModule("Logger", -config => $self, @_);
}

=item getNameMapper()

Get an instance of the GridShibCA::NameMapper module by loading it and
calling its new method with the given arguments.
See L<GridShibCA::NameMapper>.

The exact module loaded is controlled by the NameMapper variable
in the Modules section of F<gridshib-ca.conf>.

=cut

sub getNameMapper
{
    my $self = shift;
    return $self->_newModule("NameMapper", @_);
}

=item getSAMLExtension()

Get an instance of the GridShibCA::SAMLExtension module by loading it
and calling its new method with the given arguments.  See
L<GridShibCA::SAMLExtension>.

The exact module loaded is controlled by the SAMLExtension variable
in F<gridshib-ca.conf>.

=cut

sub getSAMLExtension
{
    my $self = shift;
    return $self->_newModule("SAMLExtension", @_);
}

=item getTemplate()

Get an instance of the GridShibCA::Template module by loading it and
calling its new method with the given arguments.
See L<GridShibCA::Template>.

The exact module loaded is controlled by the Template variable
in the Modules section of F<gridshib-ca.conf>.

B<Arguments:> Template name from gridshib-ca.conf Templates section.

=cut

sub getTemplate
{
    my $self = shift;
    my $templateName = shift ||
	throw GridShibCA::ConfigException("Missing template name");
    my $filename = $self->_templateNameToFilename($templateName);
    return $self->_newModule("Template", $filename);
}

=item getTokenGenerator()

Get an instance of the GridShibCA::TokenGenerator module by loading it and
calling its new method with the given arguments.
See L<GridShibCA::TokenGenerator>.

The exact module loaded is controlled by the TokenGenerator variable
in the modules section of F<gridshib-ca.conf>.

=cut

sub getTokenGenerator
{
    my $self = shift;
    return $self->_newModule("TokenGenerator", @_);
}


=item getWebCommand()

Get an instance of the GridShibCA::WebCommand module by loading it and
calling its new method with the given arguments.
See L<GridShibCA::WebCommand>.

The exact module loaded is controlled by the WebCommand variable
in the Modules section of F<gridshib-ca.conf>.

=cut

sub getWebCommand
{
    my $self = shift;
    return $self->_newModule("WebCommand", @_);
}

=back

=cut

######################################################################

=head2 Internal methods

These internal methods not intended for external use.

=over 4

=item  _initConfig()

Initialize our configuration the first time we are called.

B<Arguments:> None

B<Returns:> Instance, throws GridShibCA::ConfigException on error.

=cut

sub _initConfig
{
    my $self = shift;
    $self->_debug("Initializing configuration from %s", $configFilename);
    my %options = (
	-ConfigFile => $configFilename,
	# Allow for variable substitution in values
	-InterPolateVars => 1,
	# Allow for OO type access to values
	-ExtendedAccess => 1,
	# Automatically parse booleans
	-AutoTrue => 1,
	# Allow for running under taint mode
	-AutoLaunder => 1,
	);
    if ($self->{debug})
    {
	# Complain about duplicates values
	$options{"-AllowMultiOptions"} = 0;
    }
    else
    {
	# Just use last option given
	$options{"-MergeDuplicateOptions"} = 1;
    }
    $config = new Config::General(%options);
    if (!defined($config))
    {
	my $message = sprintf("Failed to parse configuration file %s",
			      $configFilename);
	$self->_debug($message);
	throw GridShibCA::ConfigException($message);
    }
    # Make sure we recognize the configuration version number
    if (!$config->exists("ConfigVersion"))
    {
	my $message = sprintf("Missing 'ConfigVersion' parameter in configuration file (%s): Old style configuration?",
	    $configFilename);
	$self->_debug($message);
	throw GridShibCA::ConfigException($message);
    }
    else
    {
	my $configVersion = $config->value("ConfigVersion");
	if ($configVersion != 2)
	{
	    my $message = sprintf("Unrecognized ConfigVersion (%s) in configuration file (%s).",
				  $config->{ConfigVersion}, $configFilename);
	    $self->_debug($message);
	    throw GridShibCA::ConfigException($message);
	}
    }
}


=item  _newModule()

Given a configuration variable name, return an instance of the
module referenced by that variable name.

B<Arguments:>

C<$class> Name of configuration variable

C<@_> Arguments to pass to new() method

B<Returns:> Instance, throws GridShibCA::ModuleException on error.

=cut

sub _newModule
{
    my $self = shift;
    my $configVariable = shift;
    my $instance = undef;
    my @args = @_;

    my $className = $self->getParam("Modules", $configVariable);
    if (!defined($className))
    {
	throw GridShibCA::ModuleException("Undefined module \"" .
					  $configVariable , "\"");
    }
    $self->_debug("Loading class %s for module %s (%d arguments)",
		  $className, $configVariable, scalar(@args));
    try
    {
	$instance = $self->_newInstance($className, @args);
    }
    catch GridShibCA::Exception with
    {
	my $ex = shift;
	my $text = sprintf("Failed to load module \"%s\": %s",
			   $configVariable, $ex->text());
	throw GridShibCA::ModuleException($text);
    };
    $self->_debug("Successfully instaneated class %s for module %s",
		  $className, $configVariable);
    return $instance;
}


=item  _newInstance()

Create a new instance of the given class

B<Arguments:>

C<$class> Name of class to create

C<@_> Arguments to pass to new() method

B<Returns:> Instance, throws GridShibCA::ModuleException on error.

=cut

sub _newInstance
{
    my $self = shift;
    my $class = shift;
    if (!defined($class))
    {
	throw GridShibCA::InternalException("Undefined class requested.");
    }
    my @args = @_;

    my $instance = undef;
    eval "use $class; \$instance = $class->new(\@args);";
    if ($@)
    {
	throw GridShibCA::ModuleException("Failure loading class $class: " . $@);
    }
    if (!defined($instance))
    {
	throw GridShibCA::ModuleException("Failure loading class $class: No instance returned.");
    }
    return $instance;
}

=item _debug()

Handle a debug message. Does nothing if we're not in debugging mode.

B<Arguments:> As to sprintf()

B<Returns:> Nothing

=cut

sub _debug
{
    my $self = shift;
    my $format = shift;
    my @args = @_;

    if ($self->{logger})
    {
	$self->{logger}->debug($format, @args);
    }

    if ($self->{debug})
    {
	chomp($format);
	print sprintf($format, @_) . "\n";
    }
}

=item _templateNameToFilename

Given the name of a template, look it up in the Tempaltes section and
return the associated filename.

B<Arguments:> Template name

B<Returns:> Filename

Throws GridShibCA::ConfigException on error.

=cut

sub _templateNameToFilename
{
    my $self = shift;
    my $templateName = shift ||
	throw GridShibCA::ConfigException("Missing template name");
    my $filename = $self->getParam("Templates", $templateName);
    return $filename;
}

=back

=cut

######################################################################

package GridShibCA::ConfigException;

# Inherit GridShibCA::Exception
use base qw(GridShibCA::Exception);

=head1 GridShibCA::ConfigException

Class for exceptions caused by configuration errors.

=cut

######################################################################

package GridShibCA::ModuleException;

# Inherit Error
use base qw(GridShibCA::Exception);

=head1 GridShibCA::ModuleException

Class for exceptions caused by module loading errors.

=cut

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

# Return true for import/use
1;

### Local Variables: ***
### mode:perl ***
### End: ***
######################################################################
