######################################################################
#
# $Id$
#
# GridShib configuration and class loader.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::Config

Interface to GridShib CA configuration and loader of classes based
on that configuration.

=cut

package GridShibCA::Config;

# Have we read out configuration yet?
my $initialized = 0;

# Are we in debug mode?
my $debug = 0;

# Configuration file to read?
my $configFile = "@GRIDSHIB_CA_CONFIG_FILE@";

# Default configuration
my %config = (
    # General configuration
    allowPortalDelegation => "false",
    TrustedCADirectory => "/etc/grid-security/certificates",
    debug => "false",
    clientDebug => "false",
    useBundledCAs => "true",
    # Perl modules
    loggerModule => "GridShibCA::Logger",
    caModule => "GridShibCA::OpenSSLCA",
    cgiModule => "GridShibCA::CGIinterface",
    tokenGeneratorModule => "GridShibCA::TokenGenerator",
    commandModule => "GridShibCA::Command",
    certRegistryModule => "GridShibCA::CertRegistry",
    authorizationModule => "GridShibCA::Authorization",
    # Configuration stuff
    GridShibCAConfDir => "@GRIDSHIB_CA_CONF_DIR@",
    JNLPTemplate => "@GRIDSHIB_CA_CONF_DIR@/CredentialRetriever.jnlp",
    TokenKeyFile =>"\$(GridShibCAConfDir)/token-key",
    HTMLHeader =>"\$(GridShibCAConfDir)/header.html",
    HTMLFooter =>"\$(GridShibCAConfDir)/footer.html",
    # URLs
    WWWHostname =>"@WWW_HOSTNAME@",
    GridShibCAURL =>"@GRIDSHIB_CA_URL@",
    ShibbolethProtectedCGIBinURL =>"@SHIB_PROTECTED_CGI_BIN_URL@",
    # CA Parameters
    RelativeDN =>"@RELATIVE_DN@",
    DefaultCredLifetime => 43200,  # in seconds, 12 hours
    MaximumCredLifetime => 7 * 24 * 60 * 60, # in seconds, 7 days
    # CA Parameters specific to the OpenSSL-based CA
    OpenSSLCACert =>"\$(GridShibCAConfDir)/gridshib-ca-cert.pem",
    OpenSSLCAKey =>"\$(GridShibCAConfDir)/gridshib-ca-key.pem",
    OpenSSLCASerial =>"\$(GridShibCAConfDir)/serial",
    OpenSSLRandFile =>"\$(GridShibCAConfDir)/.rand",
    # MyProxy client parameters
    MyProxyHostname =>"localhost",
    MyProxyPort =>"7512",
    MyProxyClientCert =>"\$(GridShibCAConfDir)/myproxy-client-cert.pem",
    MyProxyClientKey =>"\$(GridShibCAConfDir)/myproxy-client-key.pem",
    # Logging parameters
    SyslogId =>"@SYSLOG_ID@",
    SyslogFacility =>"@SYSLOG_FACILITY@",
    # Registry parameters
    CertRegistryDir => "\$(GridShibCAConfDir)/certs/",
    # myVocsDBCertRegistry parameters
    myVocsDBName => "sympa",
    myVocsDBTable => "GridShib_Name_Mapping",
    myVocsDBHostname => "localhost",
    myVocsDBPort => "9999",
    myVocsDBUsername => "dummy",
    myVocsDBPassword => "dummy",
    # Authorization parameters
    AuthorizedIdpsFile => "\$(GridShibCAConfDir)/authorizedIdps.conf",
    AuthorizedPortalsFile => "\$(GridShibCAConfDir)/authorizedPortals.conf",
    # Binares
    OpenSSL =>"@OPENSSL@",
    GlobusLocation =>"@GLOBUS_LOCATION@",
    OpenSSLCA =>"\$(GridShibCAConfDir)/openssl-ca",
    );

=head2 Methods

=over 4

=item new()

Create a new Config object.

B<Arguments:> None

B<Returns:> Config instance

=cut

sub new
{
    my $class = shift;
    my %args = @_;
    my $self = {};
    if (defined($args{debug}) && $args{debug})
    {
	$debug = 1;
    }

    # Maximum recusion depth for configuration variable replacement
    $self->{recursionLimit} = 10;
    # Error string
    $self->{error} = "";
    bless($self, $class);
    if (!$initialized)
    {
	$self->_readConfig($configFile);
	$initialized = 1;
    }
    return $self;
}

=item getFilename()

Return the filename of the configuration file.

B<Arguments:> None.

B<Returns:> Filename as string.

=cut

sub getFilename
{
    return $configFile;
}

=item getParam()

Return a configuration parameter. Handles substituion of $(variable) in that
parameters (to a recursion depth of 10).

B<Arguments:>
 Parameter name as string

B<Returns:>
Value as string, undef if not defined

=cut

sub getParam
{
    my $self = shift;
    my $param = shift;
    my $value = $config{$param};

    if (!defined($value))
    {
	$self->_error("Unknown parameter \"%s\"", $param);
	return undef;
    }

    my $recursionDepth = 0;

    # Expand any $(refs) in $value. Allowing for recursion
    while ($value =~ /\$\((\w+)\)/)
    {
	my $replaceWith = $config{$1};
	$value =~ s/\$\((\w+)\)/$replaceWith/g;

	# Prevent run-away replacement with limit on recusion depth
	$recursionDepth += 1;
	if ($recursionDepth > $self->{recursionLimit})
	{
	    $self->_error("Recusion limit hit for expanding configuration parameter %s",
			  $value);
	    last;
	}
    }

    return $value;
}


=item getParamBoolean()

Return a configuration parameter cast as a boolean (1 or 0). Uses getParam().

B<Arguments:>
 Parameter name as string

B<Returns:>
1 or 0, undef if not defined or if non-boolean value

=cut

sub getParamBoolean
{
    my $self = shift;
    my $param = shift;
    my $value = $self->getParam($param);
    my $bool = undef;

    if (!defined($value))
    {
	# Error message should already be set
	return undef;
    }

    $value = lc($value);

    if (($value eq "true") ||
	($value eq "yes") ||
	($value eq "1"))
    {
	$bool = 1;
    }
    elsif (($value eq "false") ||
	   ($value eq "no") ||
	   ($value eq "0"))
    {
	$bool = 0;
    }
    else
    {
	$self->_error("Bad boolean value \"%s\" for \"%s\"",
		      $value, $param);
	$bool = undef;
    }

    return $bool;
}

=item dump()

Print parameters to STDOUT. Intended for debugging.

B<Arguments:> None

B<Returns:> Nothing

=cut

sub dump
{
    my $self = shift;
    for $key (keys(%config))
    {
	print $key . ": " . $self->getParam($key) . "\n";
    }
}

=item getError()

Return the last error message as a string.

B<Arguments:> None

B<Returns:> Nothing

=cut

sub getError
{
    my $self = shift;
    return $self->{error};
}

=back

=cut

######################################################################

=head2 Module Loading Methods

These functions fetch instances of Modules bases on configuration.
Each returns an instance of the given Module or a derived Module
which implements the same interface.

=over 4

=item getLogger()

Get an instance of the GridShibCA::Logger module by loading it and
calling its new method with the given arguments. See L<GridShibCA::Logger>.

The exact module loaded is controlled by the loggerModule variable
in F<gridshib-ca.conf>.

=cut

sub getLogger
{
    my $self = shift;
    my $logger = $self->_newInstance($config{"loggerModule"}, @_);
    if (!defined($logger))
    {
	$self->_error("Failed to load loggerModule:" . $config{"loggerModule"});
	exit(1);
    }
    return $logger;
}


=item getCA()

Get an instance of the GridShibCA::CA module by loading it and
calling its new method with the given arguments. See L<GridShibCA::CA>.

The exact module loaded is controlled by the caModule variable
in F<gridshib-ca.conf>.

=cut

sub getCA
{
    my $self = shift;
    my $ca = $self->_newInstance($config{"caModule"}, @_);
    if (!defined($ca))
    {
	$self->_error("Failed to load caModule:" . $config{"caModule"});
	exit(1);
    }
    return $ca;
}


=item getCGI()

Get an instance of the GridShibCA::CGI module by loading it and
calling its new method with the given arguments.
See L<GridShibCA::CGIinterface>.

The exact module loaded is controlled by the cgiModule variable
in F<gridshib-ca.conf>.

=cut

sub getCGI
{
    my $self = shift;
    my $cgi = $self->_newInstance($config{"cgiModule"}, @_);
    if (!defined($cgi))
    {
	$self->_error("Failed to load cgiModule:" . $config{"cgiModule"});
	exit(1);
    }
    return $cgi;
}


=item getTokenGenerator()

Get an instance of the GridShibCA::TokenGenerator module by loading it and
calling its new method with the given arguments.
See L<GridShibCA::TokenGenerator>.

The exact module loaded is controlled by the tokenGeneratorModule variable
in F<gridshib-ca.conf>.

=cut

sub getTokenGenerator
{
    my $self = shift;
    my $tokenGenerator = $self->_newInstance($config{"tokenGeneratorModule"},
					     @_);
    if (!defined($tokenGenerator))
    {
	$self->_error("Failed to load tokenGeneratorModule:" .
		      $config{"tokenGeneratorModule"});
	exit(1);
    }
    return $tokenGenerator;
}


=item getCommand()

Get an instance of the GridShibCA::Command module by loading it and
calling its new method with the given arguments. See L<GridShibCA::Command>.

The exact module loaded is controlled by the commandModule variable
in F<gridshib-ca.conf>.

=cut

sub getCommand
{
    my $self = shift;
    my $command = $self->_newInstance($config{"commandModule"}, @_);
    if (!defined($command))
    {
	$self->_error("Failed to load commandModule:" .
		      $config{"commandModule"});
	exit(1);
    }
    return $command;
}


=item getCertRegistry()

Get an instance of the GridShibCA::CertRegistry module by loading it and
calling its new method with the given arguments.
See L<GridShibCA::CertRegistry>.

The exact module loaded is controlled by the certRegistryModule variable
in F<gridshib-ca.conf>.

=cut

sub getCertRegistry
{
    my $self = shift;
    my $certRegistry = $self->_newInstance($config{"certRegistryModule"}, @_);
    if (!defined($certRegistry))
    {
	$self->_error("Failed to load certRegistryModule:" .
		      $config{"certRegistryModule"});
	exit(1);
    }
    return $certRegistry;
}


=item getAuthorization()

Get an instance of the GridShibCA::Authorization module by loading it and
calling its new method with the given arguments.
See L<GridShibCA::Authorization>.

The exact module loaded is controlled by the authorizationModule variable
in F<gridshib-ca.conf>.

=cut

sub getAuthorization
{
    my $self = shift;
    my $authorization = $self->_newInstance($config{"authorizationModule"}, @_);
    if (!defined($authorization))
    {
	$self->_error("Failed to load authorizationModule:" .
		      $config{"authorizationModule"});
	exit(1);
    }
    return $authorization;
}

=back

=cut

######################################################################

=head2 Internal methods

These internal methods not intended for external use.

=over 4

=item  _newInstance()

Create a new instance of the given class

B<Arguments:>

C<$class> Name of class to create

C<@_> Arguments to pass to new() method

B<Returns:> Instance, or undef on error 

=cut

sub _newInstance
{
    my $self = shift;
    my $class = shift;
    if (!defined($class))
    {
	$self->_error("\$class undefined");
	return undef;
    }
    my @args = @_;

    my $instance = undef;
    eval "use $class; \$instance = $class->new(\@args);";
    if ($@)
    {
	$self->_error($@);
	return undef;
    }
    return $instance;
}

=item _readConfig()

Read our configuration file.

B<Arguments:> Filename

B<Returns:> Nothing

=cut

sub _readConfig
{
    use FileHandle;

    my $self= shift;
    my $filename = shift;
    $self->_debug("Parsing $filename");

    my $fh = new FileHandle;
    if (!$fh->open("<" . $filename))
    {
	$self->_error("Could not open configuration file ($filename): $!");
	return;
    }
    while (<$fh>)
    {
	# Strip comments
	s/#.*$//;
	# Ignore blank lines
	next if (/^\s*$/);
	# Parameters should be of the form "var = value"
	if (/(\w+)\s*=\s*(.*)$/)
	{
	    my $var = $1;
	    my $value = $2;
	    if (!defined($config{$var}))
	    {
		$self->_debug("Unrecognized variable $var on line $.");
	    }
	    $config{$var} = $value;
	}
	else
	{
	    $self->_debug("Could not parse line $.: $_");
	    next;
	}
    }
    $fh->close();
}

=item _debug()

Handle a debug message. Does nothing if we're not in debugging mode.

B<Arguments:> As to sprintf()

B<Returns:> Nothing

=cut

sub _debug
{
    my $self = shift;
    my $format = shift;
    my @args = @_;

    if ($debug)
    {
	chomp($format);
	print sprintf($format, @args) . "\n";
    }
}


=item _error()

Handle a error message.

B<Arguments:> As to sprintf()

B<Returns:> Nothing

=cut

sub _error
{
    my $self = shift;
    my $format = shift;
    
    chomp($format);
    my $string = sprintf("GridShib-CA Configuration error: " . $format . "\n",
			 @_);
    $self->{error} .= $string;

    # Don't use our Logger module as that could create a deadlock as the
    # Logger class tries to load its configuration using this module
    # Instead we'll print to STDERR, which should end up in the web
    # server error logs, and then die.
    printf(STDERR $string);
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

### Local Variables: ***
### mode:perl ***
### End: ***
######################################################################
