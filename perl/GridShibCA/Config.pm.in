######################################################################
#
# $Id$
#
# GridShib configuration and class loader.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################
#
# Config class
#
# Interface to GridShib CA configuration and loader of classes based
# on that configuration.
#

package GridShibCA::Config;

my $initialized = 0;

my $debug = 0;

my $configFile = "@GRIDSHIB_CA_CONFIG_FILE@";

# Default configuration
my %config = (
    # Perl modules
    loggerModule => "GridShibCA::Logger",
    caModule => "GridShibCA::OpenSSLCA",
    cgiModule => "GridShibCA::CGIinterface",
    tokenGeneratorModule => "GridShibCA::TokenGenerator",
    commandModule => "GridShibCA::Command",
    # Configuration stuff
    GridShibCAConfDir => "@GRIDSHIB_CA_CONF_DIR@",
    JNLPTemplate =>"\$(GridShibCAConfDir)/CredentialRetriever.jnlp",
    TokenKeyFile =>"\$(GridShibCAConfDir)/token-key",
    HTMLHeader =>"\$(GridShibCAConfDir)/header.html",
    HTMLFooter =>"\$(GridShibCAConfDir)/footer.html",
    # URLs
    WWWHostname =>"@WWW_HOSTNAME@",
    GridShibCAURL =>"@GRIDSHIB_CA_URL@",
    ShibbolethProtectedCGIBinURL =>"@SHIB_PROTECTED_CGI_BIN_URL@",
    # CA Parameters
    RelativeDN =>"@RELATIVE_DN@",
    OpenSSLCACert =>"\$(GridShibCAConfDir)/gridshib-ca-cert.pem",
    OpenSSLCAKey =>"\$(GridShibCAConfDir)/gridshib-ca-key.pem",
    OpenSSLCASerial =>"\$(GridShibCAConfDir)/serial",
    # Logging parameters
    SyslogId =>"@SYSLOG_ID@",
    SyslogFacility =>"@SYSLOG_FACILITY@",
    # Binares
    OpenSSL =>"@OPENSSL@",
    GlobusLocation =>"@GLOBUS_LOCATION@",
    OpenSSLCA =>"\$(GridShibCAConfDir)/openssl-ca",
    );
    
# new()
# Create a new Config object.
# Arguments: None
# Returns: Config instance
sub new
{
    my $class = shift;
    my %args = @_;
    my $self = {};
    if (defined($args{debug}) && $args{debug})
    {
	$debug = 1;
    }

    # Maximum recusion depth for configuration variable replacement
    $self->{recursionLimit} = 10;
    bless($self, $class);
    if (!$initialized)
    {
	$self->_readConfig($configFile);
	$initialized = 1;
    }
    return $self;
}

# getParam()
# Return a configuration parameter.
# Arguments: Parameter name as string
# Returns: Value as string, undef if not defined
sub getParam
{
    my $self = shift;
    my $param = shift;
    my $value = $config{$param};

    my $recursionDepth = 0;

    # Expand any $(refs) in $value. Allowing for recursion
    while ($value =~ /\$\((\w+)\)/)
    {
	my $replaceWith = $config{$1};
	$value =~ s/\$\((\w+)\)/$replaceWith/g;

	# Prevent run-away replacement with limit on recusion depth
	$recursionDepth += 1;
	if ($recursionDepth > $self->{recursionLimit})
	{
	    $self->_error("Recusion limit hit for expanding configuration parameter %s",
			  $value);
	    last;
	}
    }

    return $value;
}

# dump()
# Print parameters to STDOUT. Inteded for debugging.
# Arguments: None
# Returns: Nothing
sub dump
{
    my $self = shift;
    for $key (keys(%config))
    {
	print $key . ": " . $self->getParam($key) . "\n";
    }
}

######################################################################
#
# Class fetching functions. These functions fetch instances of
# classes bases on configuration.

sub getLogger
{
    my $self = shift;
    return $self->_newInstance($config{"loggerModule"}, @_);
}

sub getCA
{
    my $self = shift;
    return $self->_newInstance($config{"caModule"}, @_);
}

sub getCGI
{
    my $self = shift;
    return $self->_newInstance($config{"cgiModule"}, @_);
}

sub getTokenGenerator
{
    my $self = shift;
    return $self->_newInstance($config{"tokenGeneratorModule"}, @_);
}

sub getCommand
{
    my $self = shift;
    return $self->_newInstance($config{"commandModule"}, @_);
}

######################################################################
#
# _newInstance()
# Create a new instance of the given class
# Arguments:
#  $class   Name of class to create
#  @_       Arguments to pass to new() method
# Returns: Instance, or undef on error, 
sub _newInstance
{
    my $self = shift;
    my $class = shift;
    if (!defined($class))
    {
	$self->_error("\$class undefined");
	return undef;
    }
    my @args = @_;

    my $instance = undef;
    eval "use $class; \$instance = $class->new(\@args);";
    if ($@)
    {
	$self->_error($@);
	return undef;
    }
    return $instance;
}

# _readConfig()
# Read our configuration file.
# Arguments: Filename
# Returns: Nothing
sub _readConfig
{
    use FileHandle;

    my $self= shift;
    my $filename = shift;
    $self->_debug("Parsing $filename");

    my $fh = new FileHandle;
    if (!$fh->open("<" . $filename))
    {
	$self->_error("Could not open configuration file ($filename): $!");
	return;
    }
    while (<$fh>)
    {
	# Strip comments
	s/#.*$//;
	# Ignore blank lines
	next if (/^\s*$/);
	# Parameters should be of the form "var = value"
	if (/(\w+)\s*=\s*(.*)$/)
	{
	    my $var = $1;
	    my $value = $2;
	    if (!defined($config{$var}))
	    {
		$self->_debug("Unrecognized variable $var on line $.");
	    }
	    $config{$var} = $value;
	}
	else
	{
	    $self->_debug("Could not parse line $.: $_");
	    next;
	}
    }
    $fh->close();
}


sub _debug
{
    my $self = shift;
    my $format = shift;
    my @args = @_;

    if ($debug)
    {
	chomp($format);
	print sprintf($format, @args) . "\n";
    }
}

sub _error
{
    my $self = shift;
    my $format = shift;
    
    chomp($format);
    my $string = sprintf($format . "\n", @_);
    $self->{error} = $string;

    # Don't use our Logger module as that could create a deadlock as the
    # Logger class tries to load its configuration using this module
    # Instead we'll print to STDERR, which should end up in the web
    # server error logs, and then die.
    printf(STDERR $string);
}

sub getError
{
    my $self = shift;
    return $self->{error};
}

# Return true for import/use
1;

### Local Variables: ***
### mode:perl ***
### End: ***
######################################################################
