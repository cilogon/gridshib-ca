######################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 GridShibCA::Template

Generate ouput from a template file and runtime variables.

Based on Text::Template - see its documentation. Briefly template
files have strings such as "{$variable}" which are filled in at
runtime with values and then the result is output.

=cut

package GridShibCA::Template;

use GridShibCA::Config;
use GridShibCA::Constants;

use File::Spec;
use Text::Template;

=head2 Methods

=over 4

=item new()

Create a new Template object.

B<Arguments:> Template file name

B<Returns:> Template instance

Throws GridShibCA::TemplateException on error.

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{templateFile} = shift ||
	throw GridShibCA::TemplateException("Missing filename");

    $self->{config} = GridShibCA::Config->new();
    $self->{logger} = $self->{config}->getLogger();

    # We need to use UNTAINT here to clean file for later evaluation
    # Note this means files must be trustworthy.
    $self->{template} = Text::Template->new(TYPE => 'FILE',
					    SOURCE => $self->{templateFile},
					    UNTAINT => 1);
    if (!$self->{template})
    {
	throw GridShibCA::TemplateException("Couldn't construct template: $Text::Template::ERROR");
    }
    # Default initial hash values
    $self->{hash} = {
	Version => $GridShibCA::Constants::GRIDSHIBCA_VERSION_STRING,
	ContactAddress => $self->{config}->getParam("ContactAddress"),
	ShibProtectedURL =>
	    $self->{config}->getParam("ShibProtectedURL"),
    };
    bless($self, $class);
    return $self;
}

=item addMapping()

Add a variable to value mapping.

Note that references will be dereferenced as they are made available
in the template. E.g. if you add a hash reference as follows:

    $template->addMapping("hash", { one => "uno", two => "dos" });

Then reference C<$hash> in the tamplate like so:

    { foreach $key (keys(%hash)) { $OUT .= $key . "=" . $hash{$key}; } }

B<Arguments:>

I<$variableName> - name of variable to map

I<$variableValue> - value of mapped variable

B<Returns:> Nothing

=cut

sub addMapping
{
    my $self = shift;
    my $var = shift;
    my $value = shift;

    $self->{hash}->{$var} = $value;
}

=item addMappings()

Add hash of variable/value pairs.

B<Arguments:>

I<$hash> - hash of variable/value mappings.

B<Returns:> Nothing

=cut

sub addMappings
{
    my $self = shift;
    my %hash = @_;

    while ( my ($key, $value) = each(%hash) ) {
	$self->{hash}->{$key} = $value;
    }
}

=item addSectionAsMappings()

Add a configuration section as mappings.

B<Arguments:> Section name as string.

B<Returns:> Nothing

=cut

sub addSectionAsMappings
{
    my $self = shift;
    my $section = shift
	|| throw TemplateException("Missing section name");
    my %mappings = $self->{config}->getSection($section);
    $self->addMappings(%mappings);
}

=item getText()

Return Text with variable substitution.

B<Arguments:> None

B<Returns:> Text as string.

Throws GridShibCA::TemplateException on error.

=cut

sub getText
{
    my $self = shift;

    my $template = $self->{template};

    my $text = $template->fill_in(
	HASH => $self->{hash},
	BROKEN => \&_broken,
	BROKEN_ARG => $self,
	PACKAGE => 'GridShibCA::TemplatePackage',
	);

    if (!defined($text))
    {
	throw GridShibCA::TemplateException("Error rendering output: $Text::Template::ERROR");
    }

    return $text;
}

=back

=cut

######################################################################

=head2 Internal methods

These internal methods not intended for external use.

=over 4

=item _broken()

Handle broken code in a HTML template

B<Arguments:> Hash with arg, text, error and lineno values.
  arg should contain the filename from BROKEN_ARG. Others as set
  by Text::Template.

B<Returns:> Text to place into template.

=back

=cut

sub _broken
{
    my %hash = @_;
    my $self = $hash{arg};
    $self->{logger}->err("Template error: File %s line %d: %s : %s",
			 $self->{template},
			 $hash{lineno},
			 $hash{error},
			 $hash{text});
    return sprintf("<b>Unknown variable \"%s\"</b>", $hash{text});
}

##################################################################

package GridShibCA::TemplateException;

# Inherit Error
use base qw(GridShibCA::Exception);

=head1 GridShibCA::TemplateException

Class for exceptions caused by Template errors.

=head1 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

######################################################################

package GridShibCA::TemplatePackage;

use File::Spec;
use URI;

=head1 GridShibCA:TemplatePackage

Package space in which templates are evaluated.

=head2 Methods

These methods are available to templates.

=over 4

=item cleanURL()

Clean  up  a  URL.  The   main  goal  is  to  remove  double  slashes,
particularly at the start of relative URLs where they will confuse the
browser into thinking the first path component is the host.

B<Arguments:> URL as string.

B<Returns:> URL as string.

=cut

sub cleanURL
{
    my $url = shift;
    if ($url =~ /^\w+:/)
    {
	# Absolute URL, just clean up path portion.
	$uri = URI->new($url);
	$uri->path(File::Spec->canonpath($uri->path()));
    }
    else
    {
	# Relative URL, clean up first to avoid URI confusing "//" at
	# start as start of host.
	$uri = URI->new(File::Spec->canonpath($url));
    }
    return $uri->canonical();
}

=back

=cut

######################################################################

# Return true for import/use
1;

### Local Variables: ***
### mode:perl ***
### End: ***
######################################################################
