######################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 GridShibCA::Debug

Give the client a debugging view of the GridShibCA.

=cut

package GridShibCA::Debug;

# Inherit WebCommand
use base qw(GridShibCA::WebCommand);

use GridShibCA::Exception qw(:try);

=head2 Methods

=over 4

=item doCommand()

Override base class with my specific logic.

B<Arguments:> None

B<Returns:> True on success, False on error.

=cut

sub doCommand
{
    my $self = shift;
    my %signOnMethods = $self->{config}->getSection("AuthMethods");
    my %commands = $self->{config}->getSection("Commands");
    my %credRetrieverClients =
	$self->{config}->getSection("CredRetrieverClients");
    my %mappings = (
	"SignOnMethods"=>\%signOnMethods,
	"Commands"=>\%commands,
	"CredRetrieverClients"=>\%credRetrieverClients,
	);
    if ($self->{session}->established())
    {
	$mappings{id} = $self->{session}->id();
	$mappings{UserId} = $self->{session}->param("UserId");
	$mappings{session} = $self->{session}->params();
    }
    $self->_displayHTML("DebugTemplate", %mappings);
}

=item _requirements()

Return protection requirements of this command.

B<Arguments:> None

B<Returns:> Requirements value

=cut

sub _requirements
{
    return $GridShibCA::WebCommand::ACCEPT_SESSION;
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
