######################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 GridShibCA::MyProxyCACILogon

Implementation of L<GridShibCA::CA Class|GridShibCA::CA> based on MyProxy
using a local database to get a DN for a username.  The local database
stores a unique user identifier for each user, and can return a "DN" string
to be sent to the MyProxyCA server.  Note that this DN is not exactly a DN
since it contains an email=... entry which is put in the certificate
extension.

=cut

package GridShibCA::MyProxyCACILogon;

# Inherit MyProxyCA class
use base qw(GridShibCA::MyProxyCA);

=head2 Methods

=over 4

=item _getMyProxyUsername()

Overrides a method in MyProxyCA. This method gets the persistent store uid
(user identifier) from the session.  It then calls out to the dbService
servlet using this uid to get the distinguished_name for the user.  This is
returned to be passed to the MyProxyCA server.

B<Arguments:> A Session object.

B<Returns:> A DN username as a string, or undef on error.

=cut

sub _getMyProxyUsername
{
    my $self = shift;
    my $session = shift ||
        throw GridShibCA::CAException("Missing session argument");

    my $retval = undef;

    my $attributes = $session->userIdentity()->attributes();
    if (exists($attributes->{'dn'})) {
        $retval = $attributes->{'dn'};
        if (exists($attributes->{'myproxyinfo'})) {
            $retval .= ' ' . $attributes->{'myproxyinfo'};
        }
    }

    return $retval;
}

=item _getPort()

Overrides a method in MyProxyCA to get the port to connect to the MyProxyCA
server.  This is necessary because the "level of assurance" determines
whether a "basic" or "silver" certificate should be issued.  "Basic"
certificates are issued on port 7512, while "silver" certificates are issued
on port 7514.

B<Arguments:> A Session object.

B<Returns:> A port number to connect to the MyProxyCA server.

=cut

sub _getPort
{
    my $self = shift;
    my $session = shift ||
        throw GridShibCA::CAException("Missing session argument");

    my $retval = $self->{configport};

    my $attributes = $session->userIdentity()->attributes();
    if (exists($attributes->{'loa'})) {
        $loa = $attributes->{'loa'};
        if ($loa eq 'http://incommonfederation.org/assurance/silver') {
            $retval = 7514;
        } elsif ($loa eq 'openid') {
            $retval = 7516;
        }
    }
    return $retval;
}

=item _logIssuance()

Overrides a method in CA to log the issuance of the certificate. This method 
additionally logs session variables loaded from the PHP session cookie.

B<Arguments:>

C<$signon> CGISession instance.

C<$certificate:> Certificate as use Crypt::OpenSSL::X509 object.

B<Returns:> Nothing

=cut

sub _logIssuance
{
    my $self = shift;
    my $session = shift;
    my $certificate = shift;

    my $DN = $certificate->subject();
    my $serial = $certificate->serial();
    my $hash = $certificate->hash();
    # Unfortunately notAfter() returns a human-readable string instead of
    # seconds since 1970.
    my $expires = $certificate->notAfter();

    # Log session variables from PHP session cookie
    my $attributes = $session->userIdentity()->attributes();
    my $sessvarstring = "";
    my @sessionvars = ('dn','loa','myproxyinfo','cilogon_skin');
    for my $sessionvar (@sessionvars) {
        if (exists($attributes->{$sessionvar})) {
            $sessvarstring .= $sessionvar . '="' . 
                              $attributes->{$sessionvar} . '" ';
        }
    }

    # CIL-507 Special log message for XSEDE
    my $emailaddr = "unknown";
    if ((exists($attributes->{dn})) && 
        ($attributes->{dn} =~ /email=(.*)/)) {
        $emailaddr = $1;
    }
    $self->{logger}->info("USAGE email=\"%s\" client=\"JWS\"", $emailaddr);

    $self->{logger}->info("ISSUE: user=%s idp=%s remoteAddr=%s serial=\"%s\" hash=%s DN=\"%s\" expires=\"%s\" %s",
                          $session->param("UserId"),
                          $session->param("IdP"),
                          $session->param("ClientHost"),
                          $serial, $hash,
                          $DN, $expires, $sessvarstring);
    
    my $certRegistry = $self->{config}->getCertRegistry();
    $certRegistry->registerCert($session, $certificate);
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
