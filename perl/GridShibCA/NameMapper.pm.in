######################################################################
#
# $Id$
#
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::NameMapper

Interface to mapping Shibboleth authentication to X.509 DN.

=cut

package GridShibCA::NameMapper;

use GridShibCA::Config;

=head2 Methods

=over 4

=item new()

Create a new NameMapper object.

B<Arguments:> None

B<Returns:> NameMapper instance

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{config} = GridShibCA::Config->new();
    # Maximum number of replacements on names to prevent run away
    $self->{replacementLimit} = 24;
    bless($self, $class);
    return $self;
}

=item mapUser()

Return the RFC 2253 formatted DN for the given user.

B<Arguments:>

I<$user> - user id.

I<$idp> - user idp as string

B<Returns:> RFC 2253-formatted DN as string, undef on error.

=cut

sub mapUser
{
    my $self = shift;
    my $user = shift;
    my $idp = shift;

    if (!defined($user) or !defined($idp))
    {
	$self->_error("Invalid argument to NameMapper->mapUser().");
	return undef;
    }

    my $idpPolicy = $self->getIdpPolicy($idp);

    if (!defined($idpPolicy))
    {
	# error already set
	return undef;
    }

    my $dn = $idpPolicy;

    # Maximum number of replacements to revent run-away
    my $numReplacements = $self->{replacementLimit};

    # Replace all occurances of ${foo} in policy with $ENV{foo}
    while ($dn =~ /\$\{(\w+)\}/)
    {
	my $envVar = $1;
	my $value = undef;

	# Handle REMOTE_USER and HTTP_SHIB_IDENTITY_PROVIDER as
	# special cases and use provided values instead of going
	# directly to environment.
	if ($envVar eq "REMOTE_USER")
	{
	    $value = $user;
	}
	elsif ($envVar eq "HTTP_SHIB_IDENTITY_PROVIDER")
	{
	    $value = $idp;
	}
	else
	{
	    $value = $self->_getenv($envVar);
	}

	if (!defined($value))
	{
	    $self->_error("Error mapping name for Idp \"%s\":" .
			  " Environment variable \"%s\" not defined." .
			  " (Policy is %s)",
			  $idp, $envVar, $idpPolicy);
	    return undef;
	}

	$dn =~ s/\$\{$envVar\}/$value/;

	# Prevent run-away replacement with limit on number of replacements
	$numReplacements -= 1;
	if ($numReplacements == 0)
	{
	    $self->_error("Recusion limit hit for expanding user name for Idp %s",
			  $idp);
	    last;
	}
    }

    # And return string
    return $dn;
}

=item getIdpPolicy()

Given an Idp name, return the name mapping policy associated with it
from the authorizedIdps file.

B<Arguments:>

I<$idp> - Idp id as a string

B<Returns:> Policy as string, undef on error

=cut

sub getIdpPolicy
{
    my $self = shift;
    my $idp = shift;
    my $filename = $self->{config}->getParam("AuthorizedIdpsFile");

    if (!defined($filename))
    {
	$self->_error("AuthorizedIdpsFile is undefined.");
	return undef;
    }
    my $fh = new FileHandle;
    if (!$fh->open("<$filename"))
    {
	$self->_error("Could not open authorized Idp file (%s): %s",
		      $filename, $!);
	return undef;
    }

    my $policy = undef;

    while (<$fh>)
    {
	my $line = $_;
	chomp($line);

	# Strip comments
	$line =~ s/#.*$//;

	# Ignore empty lines
	if ($line =~ /^\s*$/)
	{
	    next;
	}

	# Get initial regex
	my ($regex, $remainder) = split(/\s+/, $line, 2);

	# Convert to perl regex form
	$regex =~ s/\*/.+/g;
	$regex = "^" . $regex . "\$";

	if ($idp !~ /$regex/)
	{
	    # No match, go on to next line
	    next;
	}

	if (!defined($remainder))
	{
	    $self->_error("Error parsing naming policy for Idp %s (Matched by %s in %s): No mapping policy provided (0.3.0 style file?)",
			  $idp, $regex, $filename);
	    return undef;
	}

	# Remainder should be double-quote delimited policy
	if ($remainder =~ /^\"(.+)\"$/)
	{
	    # Success. We are done
	    $policy = $1;
	    last;
	}
	# Some sort of parsing failure, return an error
	$self->_error("Error parsing naming policy for Idp %s (Matched by %s in %s): %s",
		      $idp, $regex, $filename, $remainder);
	return undef;
    }

    $fh->close();

    # If we have fallen through, policy will be undef
    if (!defined($policy))
    {
	$self->_error("No match for Idp %s in policy mapping file (%s)",
		      $idp, $filename);
	return undef;
    }

    return $policy;
}

=item getError()

Return the last error message as a string.

B<Arguments:> None

B<Returns:> Error string

=cut

sub getError
{
    my $self = shift;
    return $self->{error}
}

=back

=cut

######################################################################

=head2 Internal methods

These internal methods not intended for external use.

=over 4


=item _error()

Handle a error message.

B<Arguments:> As to sprintf()

B<Returns:> Nothing

=cut

sub _error
{
    my $self = shift;
    my $format = shift;
    $self->{error} = sprintf($format, @_);
}


=item _getenv()

Get a environment variable and untaint it.

B<Arguments:> Variable name to get

B<Returns:> Untainted value, or undef if not defined.

=cut

sub _getenv()
{
    my $self = shift;
    my $variable = shift;
    my $value = $ENV{variable};
    if (!defined($value))
    {
	return undef;
    }
    # Clean and untaint
    if ($value =~ /^([-\/:\@\w.]+)$/)
    {
	$value = $1;
    }
    else
    {
	$self->_error("Invalid characters found in ENV{%s}: \"%s\"",
		      $name, $value);
	return undef;
    }
    return $value;
}


=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

### Local Variables: ***
### mode:perl ***
### End: ***
######################################################################
