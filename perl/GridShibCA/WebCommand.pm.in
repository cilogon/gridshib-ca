#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# Base class for Web Commands.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::WebCommand

Base class for Web Commands to be invoked by L<GridShibCA::Request|GridShibCA::Request>::invoke()

=head2 Constants

The following are flags which are OR'ed together and use by
getRequirements() and handleRequirements().

=over 4

=item $REQUIRE_HTTPS

Require HTTPS as opposed to HTTP.

=cut

$REQUIRE_HTTPS = 0x0001;

=item $REQUIRE_SESSION

Require an established session.

=cut

$REQUIRE_SESSION = 0x0002;


=item $REQUIRE_CSRF_CHECK

Require CSRF protection.

=cut

$REQUIRE_SESSION = 0x0004;

=back

=cut

package GridShibCA::WebCommand;

use Carp;
use GridShibCA::Config;

=head2 Methods

=over 4

=item new()

Create a new WebCommand object.

B<Arguments:>

XXX

B<Returns:> CA instance

=cut

sub new
{
    my $class = shift;
    my $self = {};
    bless($self, $class);
    $self->{config} = GridShibCA::Config->new() || $self->_lastResortError("Could not initialize Config object");
    return $self;
}

=item processRequest()

Process a request from the client.

B<Arguments:> None

B<Returns:> True on sucess, False on error.

=cut

sub processRequest
{
    my $self = shift;

    my $self->{logger} = $config->getLogger()
	|| $self->_handleError("Could not get Logger: %s",
			       $self->{config}->getError());

    $self->{logger}->debug("Processing request.");

    my $self->{request} = $config->getRequest()
	|| $self->_handleError("Unable to load Request module: %s",
			       $self->{config}->getError());

    my $self->{cgi} = $config->getCGI()
	|| $self->_handleError("Unable to load CGI module: %s",
			       $self->{config}->getError());

    my $self->{session} = $config->getCGISession()
	|| $self->_handleError("Failed to establish session: %s",
			       $self->{config}->getError());

    my $command = $self->{request}->getCommand()
	|| $self->_handleError("Failed to get command: %s",
			       $self->{request}->getError());

    $logger->info("Command: \"%s\" Client: \"%s\"",
		  $command,
		  $self->{cgi}->remote_host());

    # Re-class ourselves as the command module class
    my $commandClass = $self->{config}->getCommandClass($command)
	|| $self->_handleError("Failed to get command class: %s",
			       $self->{config}->getError());

    $self->{logger}->debug("Instantiating class %s", $commandClass);

    bless($self, $commandClass); 

    $self->_handleRequirements();


}

=item invoke()

Invoke the command. This method should be overridden by the child class.

B<Arguments:> Request object

B<Returns:> True on success, False on error.

=cut

sub invoke
{
    my $self = shift;
    my $request = shift;

    return 1;
}


=item requiresSession()

Returns True if the command requires an established session.

B<Arguments:> None

B<Returns:> True if request requires session, False otherwise.

=cut

sub requiresSession
{
    my $self = shift;
    # Default is command require a session.
    return 1;
}


=item requiresCSRFCheck()

Returns True if the command requires an CSRF check.

B<Arguments:> None

B<Returns:> True if request requires CSRF check, False otherwise.

=cut

sub requiresCSRFCheck
{
    my $self = shift;
    # Default is command require a CSRF check
    return 1;
}


=item _displayHTML()

Display HTML template with given name.

B<Arguments:>

C<$filename> Filename of HTML template.

C<%mappings> Mappings for subsitution

B<Returns:> True on success, False on error.

=cut

sub _displayHTML
{
    my $self = shift;
    my $filename = shift;
    my %mappings = shift;

    my $template = $self->{config}->getHTMLTemplate($filename);

    if (!defined($template))
    {
	$self->_handleError("Error loadint HTMLTemplate module: %s",
			    $self->{config}->getError());
	return 0;
    }

    $template->addMappings(%mappings);

    my $html = $template->getHTML();

    if (!defined($html))
    {
	$self->_handleError("Error rendering HTML from template \"%s\" module: %s",
			    $filename,
			    $tempalte->getError());
	return 0;
    }

    # XXX Header from CGI::Session?
    print $html;

    return 1;
}

=item _handleError()

Handle logging an error and displaying output to user.

B<Arguments:>

C<$format> As per sprintf()

C<@args> As per sprintf()

B<Returns:> Nothing

=cut

sub _handleError
{
    my $self = shift;
    my $format = shift
	|| self->_lastResortError("Undefined format to _handleError()");
    my @args = @_;

    my $string = sprintf($format, @args);
    my %mappings = (
	message => $string,
	);

    if (defined($self->{logger}))
    {
	$self->{logger}->err("ERROR: %s", $string);
    }

    my $errorTemplate = $self->{config}->getSectionParam("Templates",
							 "ErrorTempalte");
    if (!defined($errorTemplate))
    {
	$self->_lastResortError("Could not determine ErrorTemplate. Original error was: %s", $string);
    }

    if (!$self->_displayHTML($errorTemplate, %mappings))
    {
	$self->_lastResortError("Could not display error message. Original error was: %s", $string);
    }
}

=item _lastResortError()

Last resort error handling, get something printed when all else fails.

B<Arguments:>

C<$format> As per sprintf()

C<@args> As per sprintf()

B<Returns:> Nothing

=cut

sub _lastResortError()
{
    my $self = shift;
    my $format = shift;
    my @args = @_;

    my $string = "Sorry, a major error happended: " . sprintf($format, @args);
    print $string;
    Carp::confess();
}


=item _handleRequirements()

Handle the requirements, as returned by _getRequirements(), of this
command.

B<arguments:> None

B<Returns:> Calls _handleError on error, returns nothing otherwise.

=cut
sub _handleRequirements
{
    my $self = shift;
    my $requirements = $self->getRequirements();

    if ($requirements | $REQUIRE_HTTPS)
    {
	my $url = $self->{cgi}->url(-full=>1);
	
	$self->{logger}->debug("Check for HTTPS protection. URL is %s", $url);

	if ($url =~ /^https:/)
	{
	    $self->{logger}->debug("Verified HTTPS protection.");
	}
	else
	{
	    $self->_handleError("Deployment error: HTTPS protection required but not provided");
	}
    }

    if ($requirements | $REQUIRE_SESSION)
    {
	if (!$self->{session}->existing())
	{
	    $self->_handleError("Failed to verify session: %s",
				$self->{session}->getError());
	}
    }

    if ($requirements | $REQUIRE_CSRF)
    {
	$self->_handleError("CSRF protection not implemented yet.");
    }

}

=item _getRequirements

Return a mask of our requirements. This method should be overriden by
the child class.

B<Arguments:> None

B<Returns:> Mask of OR'ed requirement flags.

=cut
sub _getRequirements
{
    my $self = shift;
    return $REQUIRE_HTTPS | $REQUIRE_SESSION;
}


=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
