#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# Base class for CA interface for GridShib CA.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::CA

Abstract interface to CA to sign certificates. This class isn't intended
to be used itself, it just serves as a base for other classes.

Current implementations include: L<GridShibCA::OpenSSLCA|GridShibCA::OpenSSLCA>

=cut

package GridShibCA::CA;

use GridShibCA::Config;
my $config = GridShibCA::Config->new();

=head2 Methods

=over 4

=item new()

Create a new interface to the CA.

B<Arguments:>

C<$username> - name of user as string

C<$idp> - idp of user as string

B<Returns:> CA instance

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{username} = shift;
    $self->{idp} = shift;
    $self->{lifetime} = $config->getParam("DefaultCredLifetime");
    $self->{relativeDN} = $config->getParam("RelativeDN");
    $self->{error} = undef;
    bless($self, $class);
    return $self;
}

=item getDN()

Return the DN for the user.

B<Arguments:> None

B<Returns:> DN as string, or undef on error

=cut

sub getDN
{
    my $self = shift;

    my $DN = "CN=" . $self->{username} . ", " . $self->{relativeDN};

    return $DN;
}

=item signRequest()

Given a certificate request return a certificate

B<Arguments:> PEM-encoded PKCS10 certificate request as string.

B<Returns:> Certificate as string, or undef on error

=cut

sub signRequest
{
    $self->_error("signRequest() unimplemented");
    return undef;
}

=item setCredLifetime

Set the lifetime of signed credentials

B<Arguments:> Lifetime in seconds

B<Returns:> 1 on success, 0 on error

=cut

sub setCredLifetime
{
    my $self = shift;
    my $lifetime = shift;
    my $maxLifetime = $config->getParam("MaximumCredLifetime");
    if ($lifetime > $maxLifetime)
    {
	$self->_error("Requested lifetime (%d) greater than maximum allowed (%d)",
		      $lifetime, $maxLifetime);
	return 0;
    }
    $self->{lifetime} = $lifetime;
    return 1;
}

=item getCredLifetime

Get the lifetime of signed credentials.

B<Arguments:> None

B<Returns:> Credential lifetime in seconds

=cut

sub getCredLifetime
{
    my $self = shift;
    return $self->{lifetime};
}

=item getError()

Return the last error message as a string.

B<Arguments:> None

B<Returns:> Error string

=cut

sub getError
{
    my $self = shift;
    return $self->{error}
}

=back

=cut

######################################################################

=head2 Internal methods

These internal methods not intended for external use.

=over 4


=item _error()

Handle a error message.

B<Arguments:> As to sprintf()

B<Returns:> Nothing

=cut

sub _error
{
    my $self = shift;
    my $format = shift;
    $self->{error} = sprintf($format, @_);
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
