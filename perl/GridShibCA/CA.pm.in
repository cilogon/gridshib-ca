#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# Base class for CA interface for GridShib CA.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::CA

Abstract interface to CA to sign certificates. This class isn't intended
to be used itself, it just serves as a base for other classes.

Current implementations include: L<GridShibCA::OpenSSLCA|GridShibCA::OpenSSLCA>
and L<GridShibCA::MyProxyCA|GridShibCA::MyProxyCA>

=cut

package GridShibCA::CA;

use GridShibCA::Config;

=head2 Methods

=over 4

=item new()

Create a new interface to the CA.

B<Arguments:>

C<$username> - name of user as string

C<$idp> - idp of user as string

B<Returns:> CA instance

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{username} = shift;
    $self->{idp} = shift;
    $self->{config} = GridShibCA::Config->new();
    $self->{lifetime} = $self->{config}->getParam("DefaultCredLifetime");
    $self->{relativeDN} = $self->{config}->getParam("RelativeDN");
    $self->{error} = undef;
    $self->{logger} = $self->{config}->getLogger();
    bless($self, $class);
    return $self;
}

=item getDN()

Return the DN for the user in RFC 2253 format.

B<Arguments:> None

B<Returns:> DN as string, or undef on error

=cut

sub getDN
{
    my $self = shift;
    my $nameMapper = $self->{config}->getNameMapper();
    my $userDN = $nameMapper->mapUser($self->{username}, $self->{idp});
    if (!defined($userDN))
    {
	$self->_error($nameMapper->getError());
	return undef;
    }
    my $DN = sprintf("%s, %s", $userDN, $self->{relativeDN});

    return $DN;
}

=item getOpenSSLDN()

Return the DN for the user in OpenSSL format (e.g.
/C=US/O=Example/CN=John Smith).

B<Arguments:> None
 
B<Returns:> DN as string, or undef on error

=cut

sub getOpenSSLDN
{
    my $self = shift;

    my $rfc2253DN = $self->getDN();

    if (!defined($rfc2253DN))
    {
	# Error already set
	return undef;
    }
	    
    my $DN = $self->convertRFC2253DNToOpenSSL($rfc2253DN);

    return $DN;
}


=item getProtectedOpenSSLDN()

Return the DN for the user in OpenSSL format with any forward slahses
protected so that it can be passed to OpenSSL. E.g.:

/C=US/O=Example/OU=https:\/\/someurl.edu\/foo/CN=John Smith).

B<Arguments:> None
 
B<Returns:> DN as string, or undef on error

=cut

sub getProtectedOpenSSLDN
{
    my $self = shift;

    my $rfc2253DN = $self->getDN();

    # Protect any slashes in the DN with a backslash
    $rfc2253DN =~ s|/|\\/|g;

    my $DN = $self->convertRFC2253DNToOpenSSL($rfc2253DN);

    return $DN;
}

=item getCADN

Return the DN of the CA.

B<Arguments:> None

B<Returns:> CA DN as string, undef on error

=cut

sub getCADN
{
    my $self = shift;

    return $self->{config}->getParam("CADN");
}


=item getCAOpenSSLDN

Return the CA DN in OpenSSL "oneline" format.

B<Arguments:> None

B<Returns:> CA DN as string, undef on error

=cut

sub getCAOpenSSLDN
{
    my $self = shift;

    my $rfc2253DN = $self->getCADN();

    return $self->convertRFC2253DNToOpenSSL($rfc2253DN);
}



=item getRelativeDN

Return the Relative DN in RFC 2253 format.

B<Arguments:> None

B<Returns:> Relative DN as string, undef on error

=cut

sub getRelativeDN
{
    my $self = shift;

    return $self->{config}->getParam("RelativeDN");
}


=item getRelativeOpenSSLDN

Return the Relative DN in OpenSSL "oneline" format.

B<Arguments:> None

B<Returns:> Relative DN as string, undef on error

=cut

sub getRelativeOpenSSLDN
{
    my $self = shift;

    my $rfc2253DN = $self->getRelativeDN();

    return $self->convertRFC2253DNToOpenSSL($rfc2253DN);
}

=item signRequest()

Given a certificate request return a certificate

B<Arguments:> PEM-encoded PKCS10 certificate request as string.

B<Returns:> Certificate as string, or undef on error

=cut

sub signRequest
{
    my $self = shift;

    $self->_error("signRequest() unimplemented");
    return undef;
}

=item setCredLifetime

Set the lifetime of signed credentials

B<Arguments:> Lifetime in seconds

B<Returns:> 1 on success, 0 on error

=cut

sub setCredLifetime
{
    my $self = shift;
    my $lifetime = shift;
    my $maxLifetime = $self->{config}->getParam("MaximumCredLifetime");
    if ($lifetime > $maxLifetime)
    {
	$self->_error("Requested lifetime (%d) greater than maximum allowed (%d)",
		      $lifetime, $maxLifetime);
	return 0;
    }
    $self->{lifetime} = $lifetime;
    return 1;
}

=item getCredLifetime

Get the lifetime of signed credentials.

B<Arguments:> None

B<Returns:> Credential lifetime in seconds

=cut

sub getCredLifetime
{
    my $self = shift;
    return $self->{lifetime};
}

=item getError()

Return the last error message as a string.

B<Arguments:> None

B<Returns:> Error string

=cut

sub getError
{
    my $self = shift;
    return $self->{error}
}

=item convertRFC2253DNToOpenSSL

Convert a DN in RFC 2253 format to OpenSSL "oneline" format as used by
the Globus Toolkit.

B<Arguments:> DN string in RFC 2253 format

B<Returns:> DN string in OpenSSL "oneline" format

=cut
sub convertRFC2253DNToOpenSSL
{
    my $self = shift;
    my $rfc2253DN = shift;

    if (!defined($rfc2253DN))
    {
	$self->_error("DN is undefined");
	return undef;
    }

    my @fields = reverse(split(/, */, $rfc2253DN));

    # Convert component names to uppercase for openssl
    foreach my $field (@fields)
    {
	my ($component, $value) = split(/=/, $field, 2);
	if (!defined($component) or !defined($value))
	{
	    $self->_error("Could not parse DN field \"%s\"", $field);
	    return undef;
	}

	$component = uc($component);

	$field = $component . "=" . $value;
    }

    my $DN = "/" . join("/", @fields);

    return $DN;
}

=back

=cut

######################################################################

=head2 Internal methods

These internal methods not intended for external use.

=over 4


=item _error()

Handle a error message.

B<Arguments:> As to sprintf()

B<Returns:> Nothing

=cut

sub _error
{
    my $self = shift;
    my $format = shift;
    $self->{error} = sprintf($format, @_);
}


=item _warn()

Hande a warning message.

B<Arguments:> As to sprintf()

B<Returns:> Nothing

=cut

sub _warn
{
    my $self = shift;
    my $format = shift;
    $self->{logger}->err($format, @_);
}

=item _debug()

Hande a debug message.

B<Arguments:> As to sprintf()

B<Returns:> Nothing

=cut

sub _debug
{
    my $self = shift;
    my $format = shift;
    $self->{logger}->debug($format, @_);
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
