######################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 GridShibCA::CA

Abstract interface to CA to sign certificates. This class isn't intended
to be used itself, it just serves as a base for other classes.

Current implementations include: L<GridShibCA::OpenSSLCA|GridShibCA::OpenSSLCA>
and L<GridShibCA::MyProxyCA|GridShibCA::MyProxyCA>

=cut

package GridShibCA::CA;

use Crypt::OpenSSL::X509;
use GridShibCA::Config;

=head2 Methods

=over 4

=item new()

Create a new interface to the CA.

B<Arguments:> None

B<Returns:> CA instance

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{config} = GridShibCA::Config->new();
    $self->{logger} = $self->{config}->getLogger();
    bless($self, $class);
    return $self;
}

=item handleRequest()

Given a request for a certificate, authorize it, issue the certifiate
and log the issuance.

B<Arguments:>

C<$signon> CGISession instance (Required)

C<$certificateRequest> PKCS10 certificate request as PEM-ncoded string.

Optional dictionary with the following optional values:

C<requestedLifetime> Requested lifetime in seconds.

B<Returns:> Certificate as Crypt::OpenSSL::X509 object. Throws
GridhibCA::CAException on error.

=cut

sub handleRequest
{
    my $self = shift;
    my $session = shift ||
	throw GridShibCA::CAException("Missing session argument");
    my $certificateRequest = shift ||
	throw GridShibCA::CAException("Missing certificate request argument");
    my %options = @_;

    $self->_authorizeRequest($session);
    my $certificate = $self->signRequest($session,
					 $certificateRequest,
					 %options);
    $self->_logIssuance($session, $certificate);
    return $certificate;
}

=item signRequest()

Given a certificate request return a certificate.

Note that this function does not do any authorization or logging. Use
handleSigningRequest() for a method that includes that logic.

B<Arguments:> 

C<$signon> CGISession instance (Required)

C<$certificateRequest> PKCS10 certificate request as PEM-ncoded string.

Optional dictionary with the following optional values:

C<requestedLifetime> Requested lifetime in seconds.

B<Returns:> Certificate as Crypt::OpenSSL::X509 object. Throws
GridhibCA::CAException on error.

=cut

# This method sanity checks all the arguments and then calls
# _signRequest() which does the real work. The goal is that this
# method is agnostic to the underlying CA implementation and hence
# doesn't need to be implemented by the child class.

sub signRequest
{
    my $self = shift;
    my $session = shift ||
	throw GridShibCA::CAException("Missing session argument");
    my $certificateRequest = shift ||
	throw GridShibCA::CAException("Missing certificate request argument");
    my %options = @_;

    if (defined($options{requestedLifetime}))
    {
	my $maxLifetime = $self->_getMaximumLifetime();
	my $requestedLifetime = $options{requestedLifetime};
	if ($requestedLifetime > $maxLifetime)
	{
	    throw GridShibCA::CAException("Requested lifetime ($requestedLifetime) greated than maximum allowable ($maxLifetime)");
	}
    }
    else
    {
	$options{requestedLifetime} = $self->_getDefaultLifetime();
    }

    my $cert = $self->_signRequest($session, $certificateRequest, %options)
	|| throw GridShibCA::CAException("_signRequest() returned undef");
    return $cert;
}

=back

=cut

######################################################################

=head2 Internal methods

=over 4

=item _signRequest()

Sign the certificate request. This function is a stub that should be
implemented in child classes.

B<Arguments:> Same as signRequest().

B<Returns:> Same as signRequest().

=cut

sub _signRequest()
{
    throw GridShibCA::CAException("Unimplemeneted function.");

}

=item _authorizeRequest()

Authorize the request

B<Arguments:> CGISession instance

B<Returns:> Nothing, throws exception on error.

=cut

sub _authorizeRequest
{
    my $self = shift;
    my $session = shift;

    my $id = $session->userIdentity() ||
	throw GridShibCA::CAException("Could not get user identity from exception.");
    my $authorization = $self->{config}->getAuthorization($id);
    $authorization->isAuthorized();
}


=item _logIssuance()

Log the issuance of the certificate.

B<Arguments:>

C<$signon> CGISession instance.

C<$certificate:> Certificate as use Crypt::OpenSSL::X509 object.

B<Returns:> Nothing

=cut

sub _logIssuance
{
    my $self = shift;
    my $session = shift;
    my $certificate = shift;

    my $DN = $certificate->subject();
    my $serial = $certificate->serial();
    my $hash = $certificate->hash();
    # Unfortunately notAfter() returns a human-readable string instead of
    # seconds since 1970.
    my $expires = $certificate->notAfter();

    $self->{logger}->info("ISSUE: user=%s idp=%s remoteAddr=%s serial=\"%s\" hash=%s DN=\"%s\" expires=\"%s\"",
			  $session->param("UserId"),
			  $session->param("IdP"),
			  $session->param("ClientHost"),
			  $serial, $hash,
			  $DN, $expires);
    
    my $certRegistry = $self->{config}->getCertRegistry();
    $certRegistry->registerCert($session, $certificate);

}

=item _X509fromPEM

Convert PEM-encoded string to Crypt::OpenSSL::X509 object.

B<Arguments:> PEM-encoded certificate as string

B<Returns:> Crypt::OpenSSL::X509 object

=cut

sub _X509fromPEM
{
    my $self = shift;
    my $pem = shift;

    my $x509 = Crypt::OpenSSL::X509->new_from_string($pem);
    if (!defined($x509))
    {
	# Not clear to me how Crypt::OpenSSL::X509 returns an error string
	throw GridShibCA::CAException("Error parsing PEM certificate");
    }
    return $x509;
}

=item _getDefaultLifetime

B<Arguments:> None

B<Returns:> Default certificate lifetime in seconds.

=cut

sub _getDefaultLifetime
{
    my $self = shift;
    return $self->{config}->getParam("CA", "DefaultCredLifetime");
}

=item _getMaximumLifetime

B<Arguments:> None

B<Returns:> Maximum certificate lifetime in seconds.

=cut

sub _getMaximumLifetime
{
    my $self = shift;
    return $self->{config}->getParam("CA", "MaximumCredLifetime");
}

=back

=cut

##################################################################

package GridShibCA::CAException;

# Inherit Error
use base qw(GridShibCA::Exception);

=head2 GridShibCA::CAException

Class for exceptions caused by CA errors.

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
