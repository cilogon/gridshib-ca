#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# Base class for CA interface for GridShib CA.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::CA

Abstract interface to CA to sign certificates. This class isn't intended
to be used itself, it just serves as a base for other classes.

Current implementations include: L<GridShibCA::OpenSSLCA|GridShibCA::OpenSSLCA>
and L<GridShibCA::MyProxyCA|GridShibCA::MyProxyCA>

=cut

package GridShibCA::CA;

use Crypt::OpenSSL::X509;
use GridShibCA::Config;

=head2 Methods

=over 4

=item new()

Create a new interface to the CA.

B<Arguments:>

C<$username> - name of user as string

C<$idp> - idp of user as string

B<Returns:> CA instance

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{config} = GridShibCA::Config->new();
    $self->{logger} = $self->{config}->getLogger();
    bless($self, $class);
    return $self;
}

=item handleRequest()

Given a request for a certificate, authorize it, issue the certifiate
and log the issuance.

B<Arguments:>

C<$signon> WebSignOn instance (Required)

C<$certificateRequest> PKCS10 certificate request as PEM-ncoded string.

Optional dictionary with the following optional values:

C<requestedLifetime> Requested lifetime in seconds.

B<Returns:> Certificate as Crypt::OpenSSL::X509 object. Throws
GridhibCA::CAException on error.

=cut

sub handleRequest
{
    my $self = shift;
    my $signon = shift ||
	throw GridShibCA::CAException("Missing signon argument");
    my $certificateRequest = shift ||
	throw GridShibCA::CAException("Missing certificate request argument");
    my %options = @_;

    $self->_authorizeRequest($signon);
    my $certificate = $self->signRequest($signon,
					 $certificateRequest,
					 %options);
    $self->_logIssuance($signon, $certificate);
    return $certificate;
}

=item signRequest()

Given a certificate request return a certificate.

Note that this function does not do any authorization or logging. Use
handleSigningRequest() for a method that includes that logic.

B<Arguments:> 

C<$signon> WebSignOn instance (Required)

C<$certificateRequest> PKCS10 certificate request as PEM-ncoded string.

Optional dictionary with the following optional values:

C<requestedLifetime> Requested lifetime in seconds.

B<Returns:> Certificate as Crypt::OpenSSL::X509 object. Throws
GridhibCA::CAException on error.

=cut

sub signRequest
{
    my $self = shift;
    my $signon = shift ||
	throw GridShibCA::CAException("Missing signon argument");
    my $certificateRequest = shift ||
	throw GridShibCA::CAException("Missing certificate request argument");
    my %options = @_;

    if (defined($options{requestedLifetime}))
    {
	my $maxLifetime = $self->_getMaximumLifetime();
	my $requestedLifetime = $options{requestedLifetime};
	if ($requestedLifetime > $maxLifetime)
	{
	    throw GridShibCA::CAException("Requested lifetime ($requestedLifetime) greated than maximum allowable ($maxLifetime)");
	}
    }
    else
    {
	$options{requestedLifetime} = $self->_getDefaultLifetime();
    }

    my $cert = $self->_signRequest($signon, $certificateRequest, %options)
	|| throw GridShibCA::CAException("_signRequest() returned undef");
    return $cert;
}

# XXX Can these functions go away?

=item getDN()

Return the DN for the user in RFC 2253 format.

B<Arguments:> WebSignOn instance

B<Returns:> DN as string, or undef on error

=cut

sub getDN
{
    my $self = shift;
    my $signon = shift ||
	throw GridShibCA::CAException("Missing signon argument");

    my $nameMapper = $self->{config}->getNameMapper();
    my $userDN = $nameMapper->mapUser($signon);
    my $DN = sprintf("%s,%s", $userDN, $self->getRelativeDN());

    # Do some clean up of DN
 
    # Removing all whitespace before and after commas.
    $DN =~ s/\s*,\s*/,/g;
 
    # Convert any attribute types to uppercase.
    $DN =~ s/(\w+)=/\U$1\E=/g;
 
    return $DN;
}

=item getOpenSSLDN()
 
Return the DN for the user in OpenSSL format (e.g.
/C=US/O=Example/CN=John Smith).

B<Arguments:> WebSignOn instance

B<Returns:> DN as string, or undef on error
 
=cut
 
sub getOpenSSLDN
{
     my $self = shift;
     my $signon = shift ||
	 throw GridShibCA::CAException("Missing signon argument");
 
     my $rfc2253DN = $self->getDN($signon);
     my $DN = $self->convertRFC2253DNToOpenSSL($rfc2253DN);
 
     return $DN;
}
 
=item getProtectedOpenSSLDN()

Return the DN for the user in OpenSSL format with any forward slahses
protected so that it can be passed to OpenSSL. E.g.:

/C=US/O=Example/OU=https:\/\/someurl.edu\/foo/CN=John Smith).

B<Arguments:> WebSignOn instance

B<Returns:> DN as string, or undef on error

=cut

sub getProtectedOpenSSLDN
{
    my $self = shift;
    my $signon = shift ||
	throw GridShibCA::CAException("Missing signon argument");

    my $rfc2253DN = $self->getDN($signon);

    # Protect any slashes in the DN with a backslash
    $rfc2253DN =~ s|/|\\/|g;

    my $DN = $self->convertRFC2253DNToOpenSSL($rfc2253DN);

    return $DN;
}


=item getRelativeDN()

Return the Relative DN of this CA in RFC 2253 format.

B<Arguments:> None

B<Returns:> Relative DN as string, undef on error

=cut

sub getRelativeDN
{
    my $self = shift;

    return $self->{config}->getParam("CA", "RelativeDN");
}


=item getRelativeOpenSSLDN()

Return the Relative DN of this CA in OpenSSL "oneline" format.

B<Arguments:> None

B<Returns:> Relative DN as string, undef on error

=cut

sub getRelativeOpenSSLDN
{
    my $self = shift;

    my $rfc2253DN = $self->getRelativeDN();

    return $self->convertRFC2253DNToOpenSSL($rfc2253DN);
}

=item convertRFC2253DNToOpenSSL()

Convert a DN in RFC 2253 format to OpenSSL "oneline" format as used by
the Globus Toolkit.

B<Arguments:> DN string in RFC 2253 format

B<Returns:> DN string in OpenSSL "oneline" format

=cut
sub convertRFC2253DNToOpenSSL
{
    my $self = shift;
    my $rfc2253DN = shift ||
	throw GridShibCA::CAException("Missing DN argument");

    if (!defined($rfc2253DN))
    {
	$self->_error("DN is undefined");
	return undef;
    }

    my @fields = reverse(split(/, */, $rfc2253DN));

    # Convert component names to uppercase for openssl
    foreach my $field (@fields)
    {
	my ($component, $value) = split(/=/, $field, 2);
	if (!defined($component) or !defined($value))
	{
	    $self->_error("Could not parse DN field \"%s\"", $field);
	    return undef;
	}

	$component = uc($component);

	$field = $component . "=" . $value;
    }

    my $DN = "/" . join("/", @fields);

    return $DN;
}

=back

=cut

######################################################################

=head2 Internal methods

=over 4

=item _signRequest()

Sign the certificate request. This function is a stub that should be
implemented in child classes.

B<Arguments:> Same as signRequest().

B<Returns:> Same as signRequest().

=cut

sub _signRequest()
{
    throw GridShibCA::CAException("Unimplemeneted function.");

}

=item _authorizeRequest()

Authorize the request

B<Arguments:> WebSignOn instance

B<Returns:> Nothing, throws exception on error.

=cut

sub _authorizeRequest
{
    my $self = shift;
    my $signon = shift;

    my $authorization = $self->{config}->getAuthorization();
    $authorization->authorize($signon);
}


=item _logIssuance()

Log the issuance of the certificate.

B<Arguments:>

C<$signon> WebSignOn instance.

C<$certificate:> Certificate as use Crypt::OpenSSL::X509 object.

B<Returns:> Nothing

=cut

sub _logIssuance
{
    my $self = shift;
    my $signon = shift;
    my $certificate = shift;

    my $DN = $certificate->subject();
    my $serial = $certificate->serial();
    my $hash = $certificate->hash();
    # Unfortunately notAfter() returns a human-readable string instead of
    # seconds since 1970.
    my $expires = $certificate->notAfter();

    $self->{logger}->info("ISSUE: user=%s idp=%s remoteAddr=%s serial=\"%s\" hash=%s DN=\"%s\" expires=\"%s\"",
			  $signon->getUserId(), $signon->getIdP(),
			  $signon->getClientHost(), $serial, $hash,
			  $DN, $expires);
    
    my $certRegistry = $self->{config}->getCertRegistry();
    $certRegistry->registerCert($sigon, $certificate);

}

=item _X509fromPEM

Convert PEM-encoded string to Crypt::OpenSSL::X509 object.

B<Arguments:> PEM-encoded certificate as string

B<Returns:> Crypt::OpenSSL::X509 object

=cut

sub _X509fromPEM
{
    my $self = shift;
    my $pem = shift;

    my $x509 = Crypt::OpenSSL::X509->new_from_string($pem);
    if (!defined($x509))
    {
	# Not clear to me how Crypt::OpenSSL::X509 returns an error string
	throw GridShibCA::CAException("Error parsing PEM certificate");
    }
    return $x509;
}

=item _getDefaultLifetime

B<Arguments:> None

B<Returns:> Default certificate lifetime in seconds.

=cut

sub _getDefaultLifetime
{
    my $self = shift;
    return $self->{config}->getParam("CA", "DefaultCredLifetime");
}

=item _getMaximumLifetime

B<Arguments:> None

B<Returns:> Maximum certificate lifetime in seconds.

=cut

sub _getMaximumLifetime
{
    my $self = shift;
    return $self->{config}->getParam("CA", "MaximumCredLifetime");
}

##################################################################

package GridShibCA::CAException;

# Inherit Error
use base qw(GridShibCA::Exception);

=head1 GridShibCA::CAException

Class for exceptions caused by CA errors.

=head1 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
