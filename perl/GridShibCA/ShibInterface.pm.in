#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# GridShib CA interface for Shibboleth.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::ShibInterface

GridShib-CA interface to Shibboleth functionality.

=cut

package GridShibCA::ShibInterface;
use GridShibCA::Config;

=head2 Methods

=over 4

=item new()

Create a new ShibInterface object.

B<Arguments:> None

B<Returns:> ShibInterface instance

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{config} = GridShibCA::Config->new();
    $self->{logger} = $self->{config}->getLogger();
    bless($self, $class);
    return $self;
}

=item getUserId()

Return the user id as reported by Shibboleth through REMOTE_USER.
Clean the user id so it can pass taint checking.

B<Arguments:> None

B<Returns:> User id as string, or under if unknown

=cut

sub getUserId
{
    my $self = shift;

    my $cgi = $self->{config}->getCGI();
    if (!defined($cgi))
    {
	$self->{logger}->err("Could not instantiate CGI inteface.");
	return undef;
    }
	
    my $remote_user = $cgi->remote_user();
    if (!defined($remote_user))
    {
	$self->{logger}->err("Cannot determine user identifier (REMOTE_USER undefined)");
	return undef;
    }
    # Clean user name (from perlsec manual)
    my $userId = undef;
    if ($remote_user =~ /^([-\@\w.]+)$/)
    {
	$userId = $1;
    }
    else
    {
	$self->{logger}->err("Illegal characters detected in REMOTE_USER ($remote_user)");
	return undef;
    }
    return $userId;
}

=item getIdP()

Returns the Shibboleth identity provider

B<Arguments:> None

B<Returns:> IdP as string, or undef if unknown

=cut

sub getIdP
{
    my $idp = $ENV{"HTTP_SHIB_IDENTITY_PROVIDER"};
    if (!defined($idp))
    {
	$self->{logger}->err("Cannot determine IdP (HTTP_SHIB_IDENTITY_PROVIDER not defined)");
	return undef;
    }
    # Clean Idp Id (from perlsec manual)
    if ($idp =~ /^([-\/:\@\w.]+)$/)
    {
	$idp = $1;
    }
    else
    {
	$self->{logger}->err("Illegal characters detected in IdP Id ($idp)");
	return undef;
    }
    return $idp;
}

=item getShibSession()

Returns the Shibboleth session cookie as a "variable=value" string.

B<Arguments:> None

B<Returns:> Shibboleth session or undef if cannot be found

=cut

sub getShibSession
{
    use CGI::Cookie;

    my %cookies = fetch CGI::Cookie;
    my $shibsession = undef;
    foreach my $key (keys %cookies)
    {
	if ($key =~ /_shibsession_/)
	{
	    $shibsession = $key . "=" . $cookies{$key}->value;
	    last;
	}
    }
    return $shibsession;
}


=item getSSOResponse()

Return, as a string, the SSO Response, if provided by Shibboleth.

B<Arguments:> None

B<Returns:> String containing SSO Response or undef on error

=cut

sub getSSOResponse
{
    my $self = shift;

    use MIME::Base64;

    my $base64EncodedSAML = $ENV{"HTTP_SHIB_ATTRIBUTES"};

    if (!defined($base64EncodedSAML))
    {
	$self->{logger}->err("No Shibboleth SAML found (HTTP_SHIB_ATTRIBUTES undefined).");
	return undef;
    }

    my $ssoResponse = decode_base64($base64EncodedSAML);

    # XXX Not clear to me how decode_base64 returns an error.
    if (!defined($ssoResponse) or ($ssoResponse eq ""))
    {
	$self->{logger}->err("Base64 decode of SSO Response failed.");
	return undef;
    }

    return $ssoResponse;
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
