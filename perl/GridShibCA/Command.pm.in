######################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 GridShibCA::Command

Interface to executing command, controling its STDIN and getting
its STDOUT and STDERR.

=cut

package GridShibCA::Command;

use GridShibCA::Exception qw(:try);
use IPC::Open3;

=head2 Methods

=over 4

=item new()

Create a new Command object.

B<Arguments:>

I<$executable> - path to executable

I<@arguments> - array of arguments to pass

B<Returns:> Command instance

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{command} = shift ||
        throw GridShibCA::CommandException("Missing command");
    $self->{args} = \@_;
    $self->{useSTDIN} = 0;
    $self->{input} = undef;
    bless($self, $class);
    return $self;
}

=item useSTDIN()

Have executed command use STDIN of calling program.

B<Arguments:> None

B<Returns:> Nothing

=cut

sub useSTDIN
{
    my $self = shift;
    $self->{useSTDIN} = 1;
    $self->{input} = undef;
}

=item setInput()

Cause the given string to be passed to command as input.

B<Arguments:>

I<$string> - input to pass into program

B<Returns:> Nothing

=cut

sub setInput
{
    my $self = shift;
    $self->{input} = shift;
    $self->{useSTDIN} = 0;
}

=item exec()

Execute the command.

B<Arguments:> None

B<Returns:> 1 on zero status, 0 otherwise

Throws GridShibCA::CommandException on errors.

=cut

sub exec
{
    my $self = shift;
    local(*cmdIn, *cmdOut, *cmdErr);
    my ($pid);

    # Since we can't catch non-existent files easily as errors from
    # IPC::Open3 check for executable here.
    if ( ! -x $self->{command} )
    {
        throw GridShibCA::CommandException(sprintf("Command not found: %s",
                                                   $self->{command}));
    }

    my $inFD = \*cmdIn;
    if ($self->{useSTDIN} == 1)
    {
        # Redirect our STDIN to process
        $inFD = "<&STDIN";
    }

    my (@cmdArgs) = ( $self->{command}, @{$self->{args}} );

    # Allow for safe program execution in taint mode
    my $savePATH = $ENV{PATH};
    $ENV{PATH} = "/bin";

    $pid = IPC::Open3::open3($inFD, \*cmdOut, \*cmdErr, @cmdArgs);

    if (defined($self->{input}))
    {
        print cmdIn $self->{input};
    }
    close(cmdIn);

    my $reapedPid = waitpid($pid, 0);

    $self->{status} = $? >> 8;
    
    # Read STDOUT and STDERR from command
    $self->{stdout} = "";
    $self->{stderr} = "";

    while (<cmdErr>)
    {
        $self->{stderr} .= $_;
    }
    close(cmdErr);

    while (<cmdOut>)
    {
        $self->{stdout} .= $_;
    }
    close(cmdOut);

    $ENV{PATH} = $savePATH;

    my $returnValue = 1;
    if ($self->{status} != 0)
    {
        $returnValue = 0;
    }

    return $returnValue;
}

=item getOutput()

Return the output from the command

B<Arguments:> None

B<Returns:> String containing output from command

=cut

sub getOutput
{
    my $self = shift;
    return $self->{stdout};
}

=item getError()

Returns last error message.

B<Arguments:> None

B<Returns:> String containing Error Message from command. Maybe be undef 
if no error has occurred.

=cut

sub getError
{
    my $self = shift;
    return $self->{stderr};
}

=item getStatus()

Return status code from the command

B<Arguments:> None

B<Returns:> Status code ($?)

=cut

sub getStatus
{
    my $self = shift;
    return $self->{status};
}

=back

=cut

######################################################################
#
# GridShibCA::CommandException

package GridShibCA::CommandException;

# Inherit GridShibCA::Exception
use base qw(GridShibCA::Exception);

=head2 GridShibCA::CommandException

Class for exceptions caused by command execution errors.

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

# Return true for import/use
1;

#
# End include.pl
#
### Local Variables: ***
### mode:perl ***
### End: ***
######################################################################
