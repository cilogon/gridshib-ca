######################################################################
#
# $Id$
#
# Utility functions to be included in all GridShib-CA perl scripts
# by configure.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 Command class

Interface to executing command, controling its STDIN and getting
its STDOUT and STDERR.

=cut

package GridShibCA::Command;
use IPC::Open3;

=head2 Methods

=over 4

=item new()

Create a new Command object.

B<Arguments:>

I<$executable> - path to executable

I<@arguments> - array of arguments to pass

B<Returns:> Command instance

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{command} = shift;
    $self->{args} = \@_;
    $self->{useSTDIN} = 0;
    $self->{input} = undef;
    bless($self, $class);
    return $self;
}

=item useSTDIN()

Have executed command use STDIN of calling program.

B<Arguments:> None

B<Returns:> Nothing

=cut

sub useSTDIN
{
    my $self = shift;
    $self->{useSTDIN} = 1;
    $self->{input} = undef;
}

=item setInput()

Cause the given string to be passed to command as input.

B<Arguments:>

I<$string> - input to pass into program

B<Returns:> Nothing

=cut

sub setInput
{
    my $self = shift;
    $self->{input} = shift;
    $self->{useSTDIN} = 0;
}

=item exec()

Execute the command.

B<Arguments:> None

B<Returns:> 1 on success, 0 otherwise

=cut

sub exec
{
    my $self = shift;
    local(*cmdIn, *cmdOut, *cmdErr);
    my ($pid);

    # Since we can't catch unexistent files easily as errors from IPC::Open3
    # check for executable here.
    if ( ! -x $self->{command} )
    {
	$self->{status} = 1;
	return 0;
    }

    my $inFD = \*cmdIn;
    if ($self->{useSTDIN} == 1)
    {
	# Redirect our STDIN to process
	$inFD = "<&STDIN";
    }

    my (@cmdArgs) = ( $self->{command}, @{$self->{args}} );

    # Allow for safe program execution in taint mode
    my $savePATH = $ENV{PATH};
    $ENV{PATH} = "/bin";

    $pid = IPC::Open3::open3($inFD, \*cmdOut, \*cmdErr, @cmdArgs);

    if (defined($self->{input}))
    {
	print cmdIn $self->{input};
    }
    close(cmdIn);

    my $reapedPid = waitpid($pid, 0);

    $self->{status} = $? >> 8;
    
    # Read STDOUT and STDERR from command
    $self->{stdout} = "";
    $self->{stderr} = "";

    while (<cmdErr>)
    {
	$self->{stderr} .= $_;
    }
    close(cmdErr);

    while (<cmdOut>)
    {
	$self->{stdout} .= $_;
    }
    close(cmdOut);

    $ENV{PATH} = $savePATH;

    my $returnValue = 1;
    if ($self->{status} != 0)
    {
	$returnValue = 0;
    }

    return $returnValue;
}

=item getOutput()

Return the output from the command

B<Arguments:> None

B<Returns:> String containing output from command

=cut

sub getOutput
{
    my $self = shift;
    return $self->{stdout};
}

=item getError()

Returns last error message.

B<Arguments:> None

B<Returns:> String containing Error Message from command. Maybe be undef 
if no error has occurred.

=cut

sub getError
{
    my $self = shift;
    return $self->{stderr};
}

=item getStatus()

Return status code from the command

B<Arguments:> None

B<Returns:> Status code ($?)

=cut

sub getStatus
{
    my $self = shift;
    return $self->{status};
}


=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

#
# End include.pl
#
### Local Variables: ***
### mode:perl ***
### End: ***
######################################################################
