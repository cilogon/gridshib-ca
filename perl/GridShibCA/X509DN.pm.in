#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# GridShib CA interface for X509 Distinguished Name.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::X509DN

Object wrapper for X509 DN.

=cut

package GridShibCA::X509DN;

use GridShibCA::Exception;

=head2 Methods

=over 4

=item new()

Create a new X509 DN object.

B<Arguments:> RFC 2253-formatted string.

B<Returns:> X509DN instance

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{dn} = shift ||
	throw GridShibCA::Exception("Missing DN argument");
    bless($self, $class);
    return $self;
}


=item getRFC2253DN()

Return the DN in RFC 2553 format.

B<Arguments:> None

B<Returns:> DN as string.

=cut

sub getRFC2253DN()
{
    my $self = shift;
    return $self->{dn};
}

=item getOpenSSLDN()
 
Return the DN in OpenSSL oneline format (e.g. /C=US/O=Example/CN=John Smith).

B<Arguments:> None

B<Returns:> DN as string, or undef on error
 
=cut
 
sub getOpenSSLDN
{
     my $self = shift;
 
     my $rfc2253DN = $self->{dn};
     my $DN = $self->_convertRFC2253DNToOpenSSL($rfc2253DN);
 
     return $DN;
}
 
=item getProtectedOpenSSLDN()

Return the DN for the user in OpenSSL format with any forward slahses
protected so that it can be passed to OpenSSL. E.g.:

/C=US/O=Example/OU=https:\/\/someurl.edu\/foo/CN=John Smith).

B<Arguments:> None

B<Returns:> DN as string, or undef on error

=cut

sub getProtectedOpenSSLDN
{
    my $self = shift;

    my $rfc2253DN = $self->{dn};

    # Protect any slashes in the DN with a backslash
    $rfc2253DN =~ s|/|\\/|g;

    my $DN = $self->_convertRFC2253DNToOpenSSL($rfc2253DN);

    return $DN;
}

=back

=cut

######################################################################

=head2 Internal methods

=over 4

=item _convertRFC2253DNToOpenSSL()

Convert a DN in RFC 2253 format to OpenSSL "oneline" format as used by
the Globus Toolkit.

B<Arguments:> DN string in RFC 2253 format

B<Returns:> DN string in OpenSSL "oneline" format

=cut
sub _convertRFC2253DNToOpenSSL
{
    my $self = shift;
    my $rfc2253DN = shift ||
	throw GridShibCA::CAException("Missing DN argument");

    my @fields = reverse(split(/, */, $rfc2253DN));

    # Convert component names to uppercase for openssl
    foreach my $field (@fields)
    {
	my ($component, $value) = split(/=/, $field, 2);
	if (!defined($component) or !defined($value))
	{
	    $self->_error("Could not parse DN field \"%s\"", $field);
	    return undef;
	}

	$component = uc($component);

	$field = $component . "=" . $value;
    }

    my $DN = "/" . join("/", @fields);

    return $DN;
}

=back

=cut

######################################################################

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
