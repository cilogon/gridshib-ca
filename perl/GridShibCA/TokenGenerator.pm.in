######################################################################
#
# $Id$
#
# Utility functions to be included in all GridShib-CA perl scripts
# by configure.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 TokenGenerator class

This class creates and validates tokens that allow the GridShibCA
to verify the user is intending to use the GridShibCA and not being
redirected here by, e.g., malicous JavaScript

=head2 Configuration Parameters

This class uses the following values from F<gridshib-ca.conf>:

=over 4

=item TokenKeyFile

Path to symetric key used to generate and validate tokens.

=item OpenSSL

Path to openssl binary to use

=back

=head2 Methods

=over 4

=cut

package GridShibCA::TokenGenerator;

use GridShibCA::Config;
my $config = GridShibCA::Config->new();

=item  new()

Create a new Token object. Note this is not a token itself, just an
instantiation of a Token object which can be used to create a token
via the generate() method.

B<Arguments:>

I<$userId> - Id of user

I<$remoteHost> - host from which user is connecting

B<Returns:> Token instance

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{key} = $config->getParam("TokenKeyFile");
    $self->{userId} = shift;
    $self->{remoteHost} = shift;
    $self->{openssl} = $config->getParam("OpenSSL");
    $self->{cipher} = "aes-128-cbc";
    $self->{magic} = "GRIDSHIB-CA";
    # Maximum time skew of token in seconds
    $self->{maxTimeSkew} = 5 * 60; # 5 minutes
    bless($self, $class);
    return $self;
}

=item generate()

Create a token

B<Arguments:> None

B<Returns:> Token as string, undef on error

=cut

sub generate
{
    my $self = shift;
    my $tokenString = sprintf("%s:%s:%s:%d",
			      $self->{magic},
			      $self->{userId},
			      $self->{remoteHost},
			      time());

    my @args = ($self->{cipher}, "-e", "-a", "-A",
		"-pass", "file:" . $self->{key});
    my $cmd = $config->getCommand($self->{openssl}, @args);
    $cmd->setInput($tokenString);
    if (!$cmd->exec())
    {
	$self->_error("Error encrypting token. Execution of %s failed: %s",
		      $self->{openssl}, $cmd->getError());
	return undef;
    }
    return $cmd->getOutput();
}

=item verify()

Verify and validate a token

B<Arguments:>

I<$encTokenString> - token as string

B<Returns:> 1 on success, 0 otherwise

=cut

sub verify()
{
    my $self = shift;
    my $encTokenString = shift;

    my @args = ($self->{cipher}, "-d", "-a", "-A",
		"-pass", "file:" . $self->{key});
    my $cmd = $config->getCommand($self->{openssl}, @args);
    $cmd->setInput($encTokenString);
    if (!$cmd->exec())
    {
	$self->_error("Error decrypting token. Execution of %s failed: %s",
		      $self->{openssl}, $cmd->getError());
	return undef;
    }
    my $tokenString = $cmd->getOutput();
    my ($magic, $userId, $remoteHost, $time) =
	split(/:/, $tokenString);
    if ($magic ne $self->{magic})
    {
	$self->_error("Bad magic: %s != %s",
		      $magic, $self->{magic});
	return 0;
    }
    if ($userId ne $self->{userId})
    {
	$self->_error("Bad userId: %s != %s",
		      $userId, $self->{magic});
	return 0;
    }
    if ($remoteHost ne $self->{remoteHost})
    {
	$self->_error("Bad remoteHost: %s != %s",
		      $remoteHost, $self->{remoteHost});
	return 0;
    }
    my $timeDiff = time() - $time;
    if (abs($timeDiff) > $self->{maxTimeSkew})
    {
	$self->_error("Time skew too great: %d", $timeDiff);
	return 0;
    }
    # Success
    return 1;
}


=item getError()

Return Error message from the command

B<Arguments:> None

B<Returns:> String containing Error Message from command. May be undef
if no error has occurred.

=cut

sub getError
{
    my $self = shift;
    return $self->{error};
}

=back

=cut

######################################################################

=head2 Internal methods

These internal methods not intended for external use.

=over 4

=item _error()

Handle a error message.

B<Arguments:> As to sprintf()

B<Returns:> Nothing

=cut

sub _error
{
    my $self = shift;
    my $format = shift;
    $self->{error} = sprintf($format, @_);
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION@ ($Id$)

=cut

# Return true for import/use
1;

### Local Variables: ***
### mode:perl ***
### End: ***
######################################################################
