#####################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 GridShibCA::CGIinterface

Wrapper around standard PERL CGI (L<http://perldoc.perl.org/CGI.html>)
interface with convienence functions for the GridShibCA.

=cut

package GridShibCA::CGIinterface;
use GridShibCA::Config;

# Inherit CGI class
use CGI;
@ISA = ("CGI");

=head2 Methods

=over 4


=item new()

Create a new CGIinterface object.

B<Arguments:> None

B<Returns:> CGIinterface instance

=cut

sub new
{
    my $class = shift;
    my $self = $class->SUPER::new(@_);
    $self->{config} = GridShibCA::Config->new();
    $self->{logger} = $self->{config}->getLogger();
    bless($self, $class);
    return $self;
}

=item getCertificateRequest()

Returns the certificate request from POST.

B<Arguments:> None

B<Returns:> Certificate request, or undef if not present

=cut

sub getCertificateRequest
{
    my $self = shift;
    return $self->param('certificateRequest');
}

=item getRequestedCredLifetime

Returns the requested credential lifetime in seconds.

B<Arguments:> None

B<Returns:> Lifetime in seconds, 0 if no request found.

=cut

sub getRequestedCredLifetime
{
    my $self = shift;
    my $lifetime = $self->param("lifetime");
    if (!defined($lifetime) or ($lifetime eq "default"))
    {
	$lifetime = $self->{config}->getParam("CA", "DefaultCredLifetime");
    }
    elsif ($lifetime eq "specified")
    {
	$lifetime = $self->param("specifiedLifetime");
	my $unit = $self->param("lifetimeUnit");
	if (defined($unit) && ($unit eq "hours"))
	{
	    $lifetime *= 3600;
	}
    }
    # Clean lifetime for taint mode
    if ($lifetime =~ /^(\d+)$/)
    {
	$lifetime = $1;
    }
    else
    {
	$self->{logger}->err("Illegal characters detected in lifetime ($lifetime)");
	return $self->{config}->getParam("CA", "DefaultCredLifetime");
    }
    return $lifetime;
}

=item requestedTrustedCAUpdate

Did the user request update of their trusted CAs?

B<Arguments:> None

B<Returns:> 1 if yes, 0 otherwise

=cut

sub requestedTrustedCAUpdate
{
    my $self = shift;
    my $requestedCAUpdate = $self->param("TrustRoots", "ProvideTrustRoots");
    if (defined($requestedCAUpdate) and
	($requestedCAUpdate eq "true"))
    {
	return 1;
    }
    return 0;
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
