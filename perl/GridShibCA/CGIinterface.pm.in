#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# GridShib CA interface for CGI. This is mostly a wrapper around
# the Perl CGI module.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::CGIinterface

Wrapper around standard PERL CGI
(L<http://search.cpan.org/dist/CGI.pm/CGI.pm>) interface with
convienence functions for the GridShibCA.

=head2 Configuration Parameters

This class uses the following values from F<gridshib-ca.conf>:

=over 4

=item HTMLFooter

Path to file to use as HTML footer.

=item HTMLHeader

Path to file to use as HTML header.

=back

=cut

package GridShibCA::CGIinterface;
use GridShibCA::Config;

# Inherit CGI class
use CGI;
@ISA = ("CGI");

=head2 Methods

=over 4


=item new()

Create a new CGIinterface object.

B<Arguments:> None

B<Returns:> CGIinterface instance

=cut

sub new
{
    my $class = shift;
    my $self = $class->SUPER::new(@_);
    $self->{config} = GridShibCA::Config->new();
    $self->{logger} = $self->{config}->getLogger();
    # Name to use for cookie and form firld for CSRF protection
    $self->{CSRFTokenName} = "CSRFProtection";
    # Our CSRF token (will be set by getCSRFToken() when needed)
    $self->{CSRFToken} = undef;
    # Length of CSRF token in alphanumeric characters
    $self->{CSRFTokenLen} = 40;
    bless($self, $class);
    return $self;
}

=item getCertificateRequest()

Returns the certificate request from POST.

B<Arguments:> None

B<Returns:> Certificate request, or undef if not present

=cut

sub getCertificateRequest
{
    my $self = shift;
    return $self->param('certificateRequest');
}

=item getToken()

Returns the token from the posted request.

B<Arguments:> None

B<Returns:> Token as string, or undef if cannot be found

=cut

sub getToken
{
    my $self = shift;
    return $self->param("token");
}


=item createCSRFCookie()

Create and return a cookie suitable for protection against CSRF attacks.

B<Arguments:> None

B<Returns:> Cookie object, undef on error.

=cut

sub createCSRFCookie
{
    my $self = shift;

    my $token = $self->getCSRFToken();
    if (!defined($token))
    {
	return undef;
    }
    my $cookie = $self->cookie(-name=>$self->{CSRFTokenName},
			       -value=>$token,
			       -secure=>1);
    if (!defined($cookie))
    {
	$self->{logger}->err("Failed to create CSRF cookie.");
	return undef;
    }
    return $cookie;
}

=item expiredCSRFCookie()

Create an expired CSRF protection cookie.

B<Arguments:> None

B<Returns:> Cookie object, or undef on error.

=cut

sub expiredCSRFCookie
{
    my $self = shift;

    my $cookie = $self->cookie(-name=>$self->{CSRFTokenName},
			       -value=>"Expired!",
			       # Delete
			       -expires=>"-1d");

    if (!defined($cookie))
    {
	$self->{logger}->err("Failed to create expired CSRF cookie.");
	return undef;
    }
    return $cookie;
}

=item getCSRFFormElement

Return a form element with our CSRF protection.

B<Arguments:> None

B<Returns:> Form element as string, undef on error.

=cut

sub getCSRFFormElement
{
    my $self = shift;

    my $token = $self->getCSRFToken();
    if (!defined($token))
    {
	return undef;
    }
    my $name = $self->{CSRFTokenName};

    my $element = sprintf("<input type=\"hidden\" name=\"%s\" value=\"%s\" />",
			  $name, $token);
    return $element;
}

=item getCSRFToken

Return a token for use in CSDRF prevention.

B<Arguments:> None

B<Returns:> Token as string, undef on error

=cut

sub getCSRFToken
{
    my $self = shift;

    if (!defined($self->{CSRFToken}))
    {
	my @chars = ( "A" .. "Z", "a" .. "z", 0 .. 9 );
	$self->{CSRFToken} = "";
	# Simple varible works better then self reference in for loop
	my $len = $self->{CSRFTokenLen};
	for (1 .. $len)
	{
	    $self->{CSRFToken} .= @chars[int(rand(@chars))];
	}
    }

    return $self->{CSRFToken};
}

=item CSRFCheck()

Check against CSRF attacks. This means checking for a matching form value
and cookie to make sure user came to us via the form.

B<Arguments:> None

B<Returns:> 1 on success, 0 on error

=cut

sub CSRFCheck
{
    my $self = shift;

    my $method = $self->request_method();
    if (!defined($method))
    {
	$self->{logger}->err("CSRF check failed: could not determine request method.");
	return 0;
    }
    if ($method ne "POST")
    {
	$self->{logger}->err("CSRF check failed: wrong method \"%s\"", $method);
	return 0;
    }

    my $name = $self->{CSRFTokenName};

    my $formValue = $self->param($name);
    if (!defined($formValue))
    {
	$self->{logger}->err("Failed to retrieve CSRF form value.");
	return 0;
    }
    my $cookieValue = $self->cookie($name);
    if (!defined($cookieValue))
    {
	$self->{logger}->err("Failed to retrieve CSRF cookie value.");
	return 0;
    }
    if ($formValue ne $cookieValue)
    {
	$self->{logger}->err("CSRF check failed. Cookie value (%s) != form value value (%s).", $cookieValue, $formValue);
	return 0;
    }
    return 1;
}

=item getPortalURL()

Returns the URL for a portal requesting a delegation

B<Arguments:> None

B<Returns:> URL as string, or undef if not found

=cut

sub getPortalURL
{
    my $self = shift;
    return $self->param("portalURL");
}

=item getPortalData()

Returns opaque portal data to be passed back to portal.

B<Arguments:> None

B<Returns:> Data as string, empty string if not found.

=cut

sub getPortalData
{
    my $self = shift;
    return $self->param("portalData") || "";
}

=item getRequestedCredLifetime

Returns the requested credential lifetime in seconds.

B<Arguments:> None

B<Returns:> Lifetime in seconds, 0 if no request found.

=cut

sub getRequestedCredLifetime
{
    my $self = shift;
    my $lifetime = $self->param("lifetime");
    if (!defined($lifetime) or ($lifetime eq "default"))
    {
	$lifetime = $self->{config}->getParam("DefaultCredLifetime");
    }
    elsif ($lifetime eq "specified")
    {
	$lifetime = $self->param("specifiedLifetime");
	my $unit = $self->param("lifetimeUnit");
	if (defined($unit) && ($unit eq "hours"))
	{
	    $lifetime *= 3600;
	}
    }
    # Clean lifetime for taint mode
    if ($lifetime =~ /^(\d+)$/)
    {
	$lifetime = $1;
    }
    else
    {
	$self->{logger}->err("Illegal characters detected in lifetime ($lifetime)");
	return $self->{config}->getParam("DefaultCredLifetime");
    }
    return $lifetime;
}

=item requestedTrustedCAUpdate

Did the user request update of their trusted CAs?

B<Arguments:> None

B<Returns:> 1 if yes, 0 otherwise

=cut

sub requestedTrustedCAUpdate
{
    my $self = shift;
    my $requestedCAUpdate = $self->param("installTrustedCAs");
    if (defined($requestedCAUpdate) and
	($requestedCAUpdate eq "true"))
    {
	return 1;
    }
    return 0;
}

=item getHTMLFromFile()

Returns HTML from given filename.

B<Arguments:> Filename

B<Returns:> HTML as string

=cut

sub getHTMLFromFile
{
    my $self = shift;
    my $filename = shift;
    my $htmlString = "";
    if (!open(HTMLFile, $filename))
    {
	$self->{logger}->err("Could not open HTML file %s for reading: %s",
			     $filename, $!);
	# Return empty string to avoid other errors
	return "";
    }
    while(<HTMLFile>)
    {
	$htmlString .= $_;
    }
    close(HTMLFile);
    return $htmlString;
}

=item getHTMLFooter()

Returns HTML footer for GridShibCA web pages.

B<Arguments:> None

B<Returns:> HTML as string, undef on error

=cut

sub getHTMLFooter
{
    my $self = shift;
    return $self->getHTMLFromFile($self->{config}->getParam("HTMLFooter"));
}


=item getHTMLHeader()

Returns HTML header for GridShibCA web pages.

B<Arguments:> None

B<Returns:> HTML as string, undef on error

=cut

sub getHTMLHeader
{
    my $self = shift;
    return $self->getHTMLFromFile($self->{config}->getParam("HTMLHeader"));
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
