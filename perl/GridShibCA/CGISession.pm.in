######################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 GridShibCA::CGISession

Wrapper around standard PERL CGI::Session
(L<http://search.cpan.org/dist/CGI-Session/lib/CGI/Session.pm>)
interface with convienence functions for the GridShibCA.

=head2 Session Parameters

Defined parameters that should be stored in the session.

=over 4

=item UserId

User identifier as returned by L<GridShibCA::WebSignOn>.

=item IdP

Identity provider identifier as returned by L<GridShibCA::WebSignOn>.

=item ClientHost

Client hostname or IP address as returned by L<GridShibCA::WebSignOn>.

=back

=head2 Configuration Parameters

This class currently uses no values from F<gridshib-ca.conf>.

=cut

package GridShibCA::CGISession;

use GridShibCA::Config;
use GridShibCA::Exception qw(:try);
use GridShibCA::UserIdentity;

use Carp;
use CGI;
use CGI::Session;
use CGI::Session::Driver::file;  # So we can set FileName
use File::Spec;

=head2 Methods

=over 4

=item new()

Create a new CGISession object. Does not actually create a new
session. That is done with createNew(), from Id() or fromCGI().

B<Arguments:> None

B<Returns:> CGISession instance. Throws GridShibCA::Exception on error.

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{session} = undef; # will be CGI::Session object
    $self->{config} = GridShibCA::Config->new();
    $self->{logger} = $self->{config}->getLogger();
    # Parameters to be copied into client sessions
    $self->{clientSessionParams} =
	[
	 "UserId",
	 "IdP",
	 "ClientHost",
	 "AuthnMethod",
	];
    # Define the cookie/parameter name we use
    CGI::Session->name($self->{config}->getParam("Session", "Name"));
    # Template for session files
    $CGI::Session::Driver::file::FileName = "gsca-session-%s";
    $self->{defaultLifetime} =
	$self->{config}->getParam("Session", "DefaultLifetime");

    # Driver to use for CGI::Session objects
    $self->{driver} = undef; # Use default

    # Arguments to driver (reference to hash)
    # We set the directory to use to store sessions
    my $runtimePath = $self->{config}->getParam("Session", "Directory");
    $self->{driverArguments} = {Directory=>$runtimePath};

    bless($self, $class);
    return $self;
}

=item createNew()

Establish a new session.

B<Arguments:>

C<-lifetime> <value>         lifetime of session in seconds

B<Returns:> Nothing. Throws GridShibCA::SessionException on error.
reason.

=cut

sub createNew
{
    my $self = shift;
    my %args = @_;

    $self->{logger}->debug("Creating new session");
    $self->{session} = $self->_newCGISession();
    my $lifetime = $args{-lifetime} || $self->{defaultLifetime};
    $self->param("Expires", $lifetime + time());
    $self->{logger}->debug("Session established: %s (lifetime %d)",
			   $self->id(), $lifetime);
}


=item fromId()

Load existing session from id. Not that caller is responsible for
checking expiration.

B<Arguments:> id string

B<Returns:> 1 if accomplished, 0 otherwise.

=cut

# Yes, this method is procedurally nearly identical as fromCGI().

sub fromId
{
    my $self = shift;
    my $id = shift ||
	throw GridShibCA::SessionException("Missing id argument");

    $self->{logger}->debug("Loading session (%s)", $id);
    $self->{session} = $self->_loadCGISession($id);
    $self->_checkSession();
    if ($self->isExpired())
    {
	throw GridShibCA::SessionExpiredException("Session expired");
    }
    $self->{logger}->debug("Session (%s) loaded.", $id);
    return 1;
}

=cut

=item fromCGI()

Load existing session from CGI interface. Not that caller is responsible for
checking expiration.

B<Arguments:> CGI object.

B<Returns:> 1 if accomplished, 0 otherwise.

=cut

# Yes, this method is procedurally nearly identical as fromId().

sub fromCGI
{
    my $self = shift;
    my $cgi = shift ||
	throw GridShibCA::SessionException("Missing cgi argument");

    $self->{logger}->debug("CGISession: Loading session via CGI");
    $self->{session} = $self->_loadCGISession($cgi);
    if ($self->isExpired())
    {
	throw GridShibCA::SessionExpiredException("Session expired");
    }
    $self->_checkSession();
    $self->{logger}->debug("Session %s established.", $self->id());
    return 1;
}

=item fromUserIdentity()

Persist L<GridShibCA::UserIdentity> object into session.

B<Arguments:> UserIdentity object

B<Return:> Nothing

Throws L<GridShibCA::SessionException> on error.

=cut

sub fromUserIdentity
{
    my $self = shift;
    $self->_checkSession();
    my $id = shift ||
	throw GridShibCA::SessionException("missing identity argyment");

    $self->param("UserId", $id->userId());
    $self->param("IdP", $id->idpId());
    $self->param("ClientHost", $id->clientHost());
    $self->param("AuthnMethod", $id->authMethod());
    $self->flush();

    $self->{logger}->info(
	"NEW SESSION %s:Method %s:UserId %s:IdPId %s:IP %s",
	$self->id(),
	$id->authMethod(),
	$id->userId(),
	$id->idpId(),
	$id->clientHost());
}

=item established()

Does this object represent an established session? Note that it does
not check for expiration.

B<Arguments:> None

B<Returns:> 1 if established session, 0 otherwise

=cut

sub established
{
    my $self = shift;
    try
    {
	$self->_checkSession();
	return 1;
    }
    otherwise
    {
	return 0;
    };
    # Return result of try or otherwise block
}

=item isExpired()

Is the session expired?

Note: CGI::Session determins expiration as time elapsed since last
access, but we determine it as session since creation (ctime).

B<Arguments:> None

B<Returns:> 1 if session expired, 0 otherwise.

=cut

sub isExpired
{
    my $self = shift;
    if (!defined($self->{session}))
    {
	throw GridShibCA::SessionException("Session parameter undefined");
    }
    my $expires = $self->param("Expires");
    if (time() > $expires)
    {
	$self->{logger}->debug("Session (%s) has expired",
			       $self->{session}->id());
	return 1;
    }
    return 0;
}

=item checkExpired()

Is the session expired? 

B<Arguments:> None

B<Returns:> Nothing.

Throws GridShibCA::SessionExpiredException if session expired.

=cut

sub checkExpired
{
    my $self = shift;
    $self->_checkSession();
    if ($self->isExpired())
    {
	throw GridShibCA::SessionExpiredException("Session expired");
    }
}

=item destroy()

Destroy this session.

B<Arguments:> None

B<Returns:> Nothing

=cut

sub destroy
{
    my $self = shift;
    my $session = $self->{session} || return;
    $self->{logger}->debug("Destroying session: %s",
			   $session->id());
    $session->delete();
    # Recommended practice says use flush() after delete().
    $session->flush();
    $self->{session} = undef;
}

=item id

Return id of the sesion.

B<Arguments:> None

B<Returns:> Id of session as a string.

=cut

sub id
{
    my $self = shift;
    $self->_checkSession();
    return $self->{session}->id();
}

=item userIdentity

Extract user identity from session.

B<Arguments:> None

B<Returns:> GridShibCA::UserIdentity instance.

=cut

sub userIdentity
{
    my $self = shift;
    $self->_checkSession();
    if (!$self->param("UserId") ||
	!$self->param("IdP") ||
	!$self->param("ClientHost") ||
	!$self->param("AuthnMethod"))
    {
	throw GridShibCA::SessionException("User identity not defined in session.");
    }
    return GridShibCA::UserIdentity->new(
	-authMethod => $self->param("AuthnMethod"),
	-userId => $self->param("UserId"),
	-clientHost => $self->param("ClientHost"),
	-idpId => $self->param("IdP"));
}

=item param

Get or set parameter in session as per CGI::Session->param()

B<Arguments:>

C<$name> Parameter name

C<$value> If present, value to set parameter to.

C<Returns:> Parameter value

=cut

sub param
{
    my $self = shift;
    my @args = @_;
    $self->_checkSession();
    return $self->{session}->param(@args);
}

=item flush()

Flush the session to persistent storage.

B<Arguments:> None

B<Returns:> None

=cut

sub flush
{
    my $self = shift;
    $self->_checkSession();
    $self->{session}->flush();
}

=item createClientSession()

Create a new session, based on this one, for a client application.

B<Arguments:> None

B<Returns:> New CGISession object

=cut

sub createClientSession
{
    my $self = shift;
    $self->_checkSession();
    $self->{logger}->debug("Creating new client session from session %s",
			   $self->id());
    my $session = GridShibCA::CGISession->new();
    my $lifetime =
	$self->{config}->getParam("Session",
				  "CredentialRetrieverClientLifetime");
    $session->createNew(-lifetime => $lifetime);
    $self->{logger}->debug("New client session %s created (lifeime: %d)",
			   $session->id(), $lifetime);

    # Fill in new client session with values from current session
    my $params = $self->{clientSessionParams};
    foreach my $param (@$params)
    {
	$session->param($param, $self->param($param));
    }
    $session->flush();
    return $session;
}

=item params()

Return a reference to dictionary with all parameters.

Note: Should not be updated. Treat as read only.

B<Arguments:> None

B<Returns:> Dictionary reference

=cut

sub params
{
    my $self = shift;
    $self->_checkSession();
    return $self->{session}->dataref();
}

=item cookie()

Return a CGI::cookie() object for the session.

B<Arguments:> None

B<Returns:> CGI::cookie instance

=cut

sub cookie
{
    my $self = shift;
    $self->_checkSession();
    return CGI::cookie(-name => $self->{session}->name(),
		       -value => $self->{session}->id(),
		       -secure => 1);
}

=back

=cut


######################################################################

=head2 Internal methods


These internal methods not intended for external use.

=over 4

=item _newCGISession()

Create a new CGI::Session object, handling all its details.

B<Arguments:> None

B<Returns:> CGI::Session instance.

=cut

sub _newCGISession
{
    my $self = shift;

    # Empty string == create new session instead of trying to use CGI module
    my $sid = "";

    my $session = CGI::Session->new($self->{driver}, $sid, $self->{driverArguments});
    if (!defined($session))
    {
	throw GridShibCA::SessionException(
	    "Session creation failed.",
	    -logText => "Failed to create session object: " . CGI::Session->errstr());
    }
    return $session;
}

=item _loadCGISession()

Load an existing CGI::Session object, handling all its details.

B<Arguments:> Session Id or CGI object.

B<Returns:> CGI::Session instance.

=cut

sub _loadCGISession
{
    my $self = shift;
    # Single argument is either session identifer or CGI instance. 
    # We treat it identically in either case.
    my $arg = shift ||
	throw GridShibCA::Exception("Missing argument");

    my $session = CGI::Session->load($self->{driver}, $arg, $self->{driverArguments});
    if (!defined($session))
    {
	throw GridShibCA::SessionException(
	    "Session load failed.",
	    -logText => "Failed to load session object: " . CGI::Session->errstr());
    }
    return $session;
}

=item _checkSession()

Check and make sure we have a valid session.

Does not check expiration.

B<Arguments>: None

B<Returns:> Nothing.

Throws GridShibCA::SessionException or descendant on error.

=cut

sub _checkSession
{
    my $self = shift;
    my $session = $self->{session} ||
	throw GridShibCA::SessionException("Internal error: session not defined");

    if ($session->is_empty())
    {
	my $errstr = $self->{session}->errstr() || "No error information.";

	my $logText = sprintf("Session is empty: %s", $errstr);

	throw GridShibCA::SessionInvalidException(
	    "Invalid session.",
	    -logText => $logText);
    }

    # Final sanity check
    my $id = $session->id() ||
	throw GridShibCA::SessionException("Session id not defined");
}

=back

=cut

######################################################################
#
# GridShibCA::SessionException

package GridShibCA::SessionException;

# Inherit GridShibCA::Exception
use base qw(GridShibCA::Exception);

=head1 GridShibCA::SessionException

Class for exceptions caused by session errors.

=cut

######################################################################
#
# GridShibCA::SessionExpiredException

package GridShibCA::SessionExpiredException;

use base qw(GridShibCA::SessionException);

=head1 GridShibCA::SessionExpiredException

The client session has expired.

=cut

######################################################################
#
# GridShibCA::SessionInvalidException

package GridShibCA::SessionInvalidException;

use base qw(GridShibCA::SessionException);

=head1 GridShibCA::SessionInvalidException

The client session is invalid.

=cut

######################################################################

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
