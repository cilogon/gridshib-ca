#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# GridShib CA wrapper around CGI::Session.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::CGISession

Wrapper around standard PERL CGI::Session
(L<http://search.cpan.org/dist/CGI-Session/lib/CGI/Session.pm>)
interface with convienence functions for the GridShibCA.

=head2 Configuration Parameters

This class uses the following values from F<gridshib-ca.conf>:

=over 4

=item XXX

XXX

=back

=cut

package GridShibCA::CGISession;

# -ip_match Requires user's IP stays constant throughout session
use CGI::Session ( '-ip_match' );

# Inherit CGI::Session
@ISA = ("CGI::Session");

use GridShibCA::Config;

use CGI;
use File::Spec;

# Parameters for CGI::Session()
my $defaultDriver = undef;   # Default driver
my $defaultOptions = {
     Directory => File::Spec->tmpdir
};


=head2 Methods

=over 4

=item createNew()

Establish a new session.

B<Arguments:> None

B<Returns:> CGISession instance, undef on error - call errstr() for
reason.

=cut

sub createNew
{
    my $class = shift;

    my $config = GridShibCA::Config->new();
    my $logger = $self->{config}->getLogger();

    $logger->debug("CGISession: Creating new session");
    $session = $class->Super::new(
	$class::defaultDriver,
	undef, # New session
	$class::defaultOptions);

    if (!defined($session))
    {
	$logger->error("Failed to create new CGI::Session object: " . $class->Super->errstr());
	return undef;
    }
    $logger->debug("Session %d established.", $session->id());
    bless($session, $class);
    return $self;
}


=item createEstablished()

Return a established session. undef is returned if an established
session is not found. 

B<Arguments:> None

B<Returns:> CGISession instance, or undef of error - call errstr() for
reason.

=cut

sub createEstablished
{
    my $class = shift;
    my %args = @_;

    my $config = GridShibCA::Config->new();
    my $logger = $self->{config}->getLogger();

    $logger->debug("CGISession: Creating established session");
    $session = $class->Super::load(
	$class::defaultDriver,
	undef, # New session
	$class::defaultOptions);
    
    if (!defined($session))
    {
	$logger->error("Failed to create established CGI::Session object: " . $class->Super->errstr());
	return undef;
    }
    if ($session->is_expired())
    {
	$logger->error("Sesion is expired.");
	return undef;
    }
    $logger->debug("Session %d established.", $session->id());
    bless($session, $class);
    return $self;
}

=item saveWebSignOn

Store a WebSignOn object into session.

B<Arguments:> WebSignOn object.

B<Returns:> True on success, False on error

=cut

sub saveWebSignOn
{
    my $self = shift;
    my $signOn = shift;

    my $serializedSignOn = $signOn->serialize();
    if (!defined($serializedSignOn))
    {
	$self->_error("Failed to serialized WebSignOn object.");
	return 0;
    }
    $self->param("WebSignOn", $serializedSignOn);
    return 1;
}

=item getWebSignOn

Retrieve a previously stored a WebSignOn object from session.

B<Arguments:> None

B<Returns:> WebSignOn object, undef on error.

=cut
sub getWeSignOn
{
    my $self = shift;
    my $webSignOn = $self->param("WebSignOn");
    if (!defined($webSignOn))
    {
	$self->_error("Failed to retrieve WebSignOn: " . $self->errstr());
	return undef;
    }
    return $webSignOn;
}



######################################################################

=head2 Internal methods

These internal methods not intended for external use.

=over 4

=item _error()

Handle logging an error message.

B<Arguments:>

C<$format> As per sprintf()

C<@args> As per sprintf()

B<Returns:> Nothing

=cut

sub _error
{
    my $self = shift;
    my $format = shift;
    my @args = @_;

    my $config = GridShibCA::Config->new();
    my $logger = $self->{config}->getLogger();
    
    $logger->error($format, @args);
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
