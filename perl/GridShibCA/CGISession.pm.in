#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# GridShib CA wrapper around CGI::Session.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::CGISession

Wrapper around standard PERL CGI::Session
(L<http://search.cpan.org/dist/CGI-Session/lib/CGI/Session.pm>)
interface with convienence functions for the GridShibCA.

=head2 Session Parameters

Defined parameters that should be stored in the session.

=over 4

=item UserId

User identifier as returned by L<GridShibCA::WebSignOn>.

=item IdP

Identity provider identifier as returned by L<GridShibCA::WebSignOn>.

=item ClientHost

Client hostname or IP address as returned by L<GridShibCA::WebSignOn>.

=back

=head2 Configuration Parameters

This class currently uses no values from F<gridshib-ca.conf>.

=cut

package GridShibCA::CGISession;

# -ip_match Requires user's IP stays constant throughout session
use CGI::Session ( '-ip_match' );

use GridShibCA::Config;
use GridShibCA::Exception qw(:try);

use Carp;
use CGI::Session;
use File::Spec;

=head2 Methods

=over 4

=item new()

Create a new CGISession object. Does not actually create a new
session. That is done with createNew(), from Id() or fromCGI().

B<Arguments:> None

B<Returns:> CGISession instance. Throws GridShibCA::Exception on error.

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{impl} = CGI::Session;
    $self->{config} = GridShibCA::Config->new() || return undef;
    $self->{logger} = $self->{config}->getLogger() || return undef;
    $self->{error} = undef;
    bless($self, $class);
    return $self;
}

=item createNew()

Establish a new session.

B<Arguments:>

C<-lifetime> <value>         lifetime of session in seconds

B<Returns:> Nothing. Throws GridShibCA::SessionException on error.
reason.

=cut

sub createNew
{
    my $self = shift;
    my %args = @_;

    $self->{logger}->debug("Creating new session");
    # undef == create new session instead of trying to use CGI
    $self->{session} = $self->{impl}->new(undef);
    if (!defined($self->{session}))
    {
	throw GridShibCA::SessionException(
	    "Session creation failed.",
	    -logText => "Failed to create new session object: " . $self->{impl}->errstr());
    }
    $self->{logger}->debug("Session established: %s", $self->id());
    if (defined($args{-lifetime}))
    {
	$self->{logger}->debug("Setting session lifetime of %d seconds.",
		       $args{-lifetime});
	$self->{session}->expire($args{-lifetime});
    }
}


=item fromId()

Load existing session from id. Not that caller is responsible for
checking expiration.

B<Arguments:> id string

B<Returns:> 1 if accomplished, 0 otherwise.

=cut

# Yes, this method is procedurally nearly identical as fromCGI().

sub fromId
{
    my $self = shift;
    my $id = shift || confess "Missing id argument";

    $self->{logger}->debug("Loading established session from id: %s", $id);
    $self->{session} = $self->{impl}->load($id);
    
    if (!defined($self->{session}))
    {
	my $logText = sprintf(
	    "Failed to load established session from Id(%s): %s",
	    $id, $self->{impl}->errstr());

	throw GridShibCA::SessionException(
	    "Failed to load existing session from Id.",
	    -logText => $logText);
    }

    $self->{logger}->debug("Session %s re-established.",
			   $self->{session}->id());
    return 1;
}

=cut

=item fromCGI()

Load existing session from CGI interface. Not that caller is responsible for
checking expiration.

B<Arguments:> CGI object.

B<Returns:> 1 if accomplished, 0 otherwise.

=cut

# Yes, this method is procedurally nearly identical as fromId().

sub fromCGI
{
    my $self = shift;
    my $cgi = shift || confess "Missing cgi argument";

    $self->{logger}->debug("CGISession: Creating established session");
    $self->{session} = $self->{impl}->load($cgi);
    
    if (!defined($self->{session}))
    {
	my $logText = sprintf("Failed to establish session from CGI: %s",
			$self->{impl}->errstr());
	throw GridShibCA::SessionException("Error re-establishing session.",
					   -logText => $logText);
    }
    $self->{logger}->debug("Session %s established.",
			   $self->{session}->id());
    return 1;
}

=item isExpired()

Is the session expired?

B<Arguments:> None

B<Returns:> 1 if session expired, 0 otherwise.

=cut

sub isExpired
{
    my $self = shift;
    if (!defined($self->{session}))
    {
	throw GridShibCA::SessionException("Session is not defined");
    }
    return $self->{session}->is_expired();
}

=item checkExpired()

Is the session expired? 

B<Arguments:> None

B<Returns:> Nothing.

Throws GridShibCA::SessionExpiredException if session expired.

=cut

sub checkExpired
{
    my $self = shift;
    if ($self->isExpired())
    {
	throw GridShibCA::SessionExpiredException("Session expired");
    }
}

=item destroy()

Destroy this session.

B<Arguments:> None

B<Returns:> Nothing

=cut

sub destroy
{
    my $self = shift;

    $self->{logger}->debug("Destroying session: %s", $self->{session}->id());
    $self->{session}->delete();
    # Recommended practice says use flush() after delete().
    $self->{session}->flush();
}

=item id

Return id of the sesion.

B<Arguments:> None

B<Returns:> Id of session as a string.

=cut

sub id
{
    my $self = shift;
    return $self->{session}->id();
}

=item param

Get or set parameter in session as per CGI::Session->param()

B<Arguments:>

C<$name> Parameter name

C<$value> If present, value to set parameter to.

C<Returns:> Parameter value

=cut

sub param
{
    my $self = shift;
    my @args = @_;
    return $self->{session}->param(@args);
}

=item recordWebSignOn

Given a L<GridShibCA::WebSignOn> object, record the sign-on details.

B<Aruments:> WebSignOn object

B<Return:> Nothing

Throws L<GridShibCA::SessionException> on error.

=cut

sub recordWebSignOn
{
    my $self = shift;
    my $signon = shift ||
	throw GridShibCA::SessionException("signon undefined.");

    $self->param("UserId", $signon->getUserId());
    $self->param("IdP", $signon->getIdP());
    $self->param("ClientHost", $signon->getClientHost());
}

=back

=cut

######################################################################
#
# GridShibCA::SessionException

package GridShibCA::SessionException;

# Inherit GridShibCA::Exception
use base qw(GridShibCA::Exception);

=head1 GridShibCA::SessionException

Class for exceptions caused by session errors.

=cut

######################################################################
#
# GridShibCA::SessionExpiredException

package GridShibCA::SessionExpiredException;

use base qw(GridShibCA::SessionException);

=head1 GridShibCA::SessionExpiredException

The client session has expired.

=cut

######################################################################

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
