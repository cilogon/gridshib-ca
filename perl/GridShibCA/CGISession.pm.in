#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# GridShib CA wrapper around CGI::Session.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::CGISession

Wrapper around standard PERL CGI::Session
(L<http://search.cpan.org/dist/CGI-Session/lib/CGI/Session.pm>)
interface with convienence functions for the GridShibCA.

=head2 Session Parameters

Defined parameters that should be stored in the session.

=over 4

=item UserId

User identifier as returned by L<GridShibCA::WebSignOn>.

=item IdP

Identity provider identifier as returned by L<GridShibCA::WebSignOn>.

=item ClientHost

Client hostname or IP address as returned by L<GridShibCA::WebSignOn>.

=back

=head2 Configuration Parameters

This class currently uses no values from F<gridshib-ca.conf>.

=cut

package GridShibCA::CGISession;

use GridShibCA::Config;
use GridShibCA::Exception qw(:try);

use Carp;
use CGI;
use CGI::Session;
use CGI::Session::Driver::file;  # So we can set FileName
use File::Spec;

=head2 Methods

=over 4

=item new()

Create a new CGISession object. Does not actually create a new
session. That is done with createNew(), from Id() or fromCGI().

B<Arguments:> None

B<Returns:> CGISession instance. Throws GridShibCA::Exception on error.

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{session} = undef; # CGI::Session object
    $self->{config} = GridShibCA::Config->new();
    $self->{logger} = $self->{config}->getLogger();
    # Parameters to be copied into client sessions
    $self->{clientSessionParams} =
	[
	 "UserId",
	 "IdP",
	 "ClientHost"
	];
    # Define the cookie/parameter name we use
    CGI::Session->name($self->{config}->getParam("Session", "Name"));
    # Template for session files
    $CGI::Session::Driver::file::FileName = "gsca-session-%s";
    $self->{defaultLifetime} =
	$self->{config}->getParam("Session", "DefaultLifetime");
    bless($self, $class);
    return $self;
}

=item createNew()

Establish a new session.

B<Arguments:>

C<-lifetime> <value>         lifetime of session in seconds

B<Returns:> Nothing. Throws GridShibCA::SessionException on error.
reason.

=cut

sub createNew
{
    my $self = shift;
    my %args = @_;

    $self->{logger}->debug("Creating new session");
    # Empty string == create new session instead of trying to use CGI
    $self->{session} = CGI::Session->new("");
    if (!defined($self->{session}))
    {
	throw GridShibCA::SessionException(
	    "Session creation failed.",
	    -logText => "Failed to create new session object: " . CGI::Session->errstr());
    }
    my $lifetime = $args{-lifetime} || $self->{defaultLifetime};
    $self->{session}->expire($lifetime);
    $self->{logger}->debug("Session established: %s (lifetime %d)",
			   $self->id(), $lifetime);
}


=item fromId()

Load existing session from id. Not that caller is responsible for
checking expiration.

B<Arguments:> id string

B<Returns:> 1 if accomplished, 0 otherwise.

=cut

# Yes, this method is procedurally nearly identical as fromCGI().

sub fromId
{
    my $self = shift;
    my $id = shift ||
	throw GridShibCA::SessionException("Missing id argument");

    $self->{logger}->debug("Loading session (%s)", $id);
    $self->{session} = CGI::Session->load($id);
    $self->_checkSession();
    $self->{logger}->debug("Session (%s) loaded.", $id);
    return 1;
}

=cut

=item fromCGI()

Load existing session from CGI interface. Not that caller is responsible for
checking expiration.

B<Arguments:> CGI object.

B<Returns:> 1 if accomplished, 0 otherwise.

=cut

# Yes, this method is procedurally nearly identical as fromId().

sub fromCGI
{
    my $self = shift;
    my $cgi = shift ||
	throw GridShibCA::SessionException("Missing cgi argument");

    $self->{logger}->debug("CGISession: Loading session via CGI");
    $self->{session} = CGI::Session->load($cgi);
    $self->_checkSession();
    $self->{logger}->debug("Session %s established.", $self->id());
    return 1;
}

=item fromWebSignOn()

Given a L<GridShibCA::WebSignOn> object, load session from it.

B<Arguments:> WebSignOn object

B<Return:> Nothing

Throws L<GridShibCA::SessionException> on error.

=cut

sub fromWebSignOn
{
    my $self = shift;
    $self->_checkSession();
    my $signon = shift ||
	throw GridShibCA::SessionException("signon undefined.");

    $self->param("UserId", $signon->getUserId());
    $self->param("IdP", $signon->getIdP());
    $self->param("ClientHost", $signon->getClientHost());
    $self->param("AuthnMethod", $signon->methodName());
    $self->flush();

    $self->{logger}->info(
	"NEW SESSION %s:Method %s:UserId %s:IdPId %s:IP %s",
	$self->id(),
	$signon->methodName(),
	$signon->getUserId(),
	$signon->getIdP(),
	$signon->getClientHost());
}

=item established()

Does this object represent an established session? Note that it does
not check for expiration.

B<Arguments:> None

B<Returns:> 1 if established session, 0 otherwise

=cut

sub established
{
    my $self = shift;
    if (!defined($self->{session}))
    {
	return 0;
    }
    if (!defined($self->{session}->id()))
    {
	return 0;
    }
    return 1;
}

=item isExpired()

Is the session expired?

B<Arguments:> None

B<Returns:> 1 if session expired, 0 otherwise.

=cut

sub isExpired
{
    my $self = shift;
    $self->_checkSession();
    return $self->{session}->is_expired();
}

=item checkExpired()

Is the session expired? 

B<Arguments:> None

B<Returns:> Nothing.

Throws GridShibCA::SessionExpiredException if session expired.

=cut

sub checkExpired
{
    my $self = shift;
    $self->_checkSession();
    if ($self->isExpired())
    {
	throw GridShibCA::SessionExpiredException("Session expired");
    }
}

=item destroy()

Destroy this session.

B<Arguments:> None

B<Returns:> Nothing

=cut

sub destroy
{
    my $self = shift;
    $self->_checkSession();

    $self->{logger}->debug("Destroying session: %s", $self->{session}->id());
    $self->{session}->delete();
    # Recommended practice says use flush() after delete().
    $self->{session}->flush();
    $self->{session} = undef;
}

=item id

Return id of the sesion.

B<Arguments:> None

B<Returns:> Id of session as a string.

=cut

sub id
{
    my $self = shift;
    $self->_checkSession();
    return $self->{session}->id();
}

=item param

Get or set parameter in session as per CGI::Session->param()

B<Arguments:>

C<$name> Parameter name

C<$value> If present, value to set parameter to.

C<Returns:> Parameter value

=cut

sub param
{
    my $self = shift;
    my @args = @_;
    $self->_checkSession();
    return $self->{session}->param(@args);
}

=item flush()

Flush the session to persistent storage.

B<Arguments:> None

B<Returns:> None

=cut

sub flush
{
    my $self = shift;
    $self->_checkSession();
    $self->{session}->flush();
}

=item createClientSession()

Create a new session, based on this one, for a client application.

B<Arguments:> None

B<Returns:> New CGISession object

=cut

sub createClientSession
{
    my $self = shift;
    $self->_checkSession();
    $self->{logger}->debug("Creating new client session from session %s",
			   $self->id());
    my $session = CGI::Session->new();
    my $lifetime =
	$self->{config}->getParam("Session",
				  "CredentialRetrieverClientLifetime");
    $session->expire($lifetime);
    $self->{logger}->debug("New client session %s created (lifeime: %d)",
			   $session->id(), $lifetime);

    # Fill in new client session with values from current session
    foreach my $param ($self->{clientSessionParams})
    {
	$session->param($param, $self->param($param));
    }
    $session->flush();
    return $session;
}

=item params()

Return a reference to dictionary with all parameters.

Note: Should not be updated. Treat as read only.

B<Arguments:> None

B<Returns:> Dictionary reference

=cut

sub params
{
    my $self = shift;
    $self->_checkSession();
    return $self->{session}->dataref();
}

=item cookie()

Return a CGI::cookie() object for the session.

B<Arguments:> None

B<Returns:> CGI::cookie instance

=cut

sub cookie
{
    my $self = shift;
    $self->_checkSession();
    return CGI::cookie($self->{session}->name() => $self->{session}->id());
}

=back

=cut


######################################################################

=head2 Internal methods


These internal methods not intended for external use.

=over 4

=item _checkSession()

Check and make sure we have a valid session.

B<Arguments>: None

B<Returns:> Nothing.

Throws GridShibCA::SessionException or descendant on error.

=cut

sub _checkSession
{
    my $self = shift;

    if (!defined($self->{session}))
    {
	$self->{logger}->debug("Internal error: Session parameter is undefined");
	throw GridShibCA::SessionException("Internal error: session not defined");
    }

    my $id = $self->{session}->id();
    if (!defined($id))
    {
	$self->{logger}->debug("Session has undefined id.");
	throw GridShibCA::SessionException("Session id not defined");
    }

    if ($self->{session}->is_expired())
    {
	$self->{logger}->debug("Session (%s) has expired", $id);

	throw GridShibCA::SessionExpiredException("Session expired");
    }

    if ($self->{session}->is_empty())
    {
	my $errstr = $self->{session}->errstr() || "No error information.";

	my $logText = sprintf("Session (%s) is empty: %s", $id, $errstr);

	$self->{logger}->debug($logText);

	throw GridShibCA::SessionInvalidException(
	    "Invalid session.",
	    -logText => $logText);
    }
}

=back

=cut

######################################################################
#
# GridShibCA::SessionException

package GridShibCA::SessionException;

# Inherit GridShibCA::Exception
use base qw(GridShibCA::Exception);

=head1 GridShibCA::SessionException

Class for exceptions caused by session errors.

=cut

######################################################################
#
# GridShibCA::SessionExpiredException

package GridShibCA::SessionExpiredException;

use base qw(GridShibCA::SessionException);

=head1 GridShibCA::SessionExpiredException

The client session has expired.

=cut

######################################################################
#
# GridShibCA::SessionInvalidException

package GridShibCA::SessionInvalidException;

use base qw(GridShibCA::SessionException);

=head1 GridShibCA::SessionInvalidException

The client session is invalid.

=cut

######################################################################

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
