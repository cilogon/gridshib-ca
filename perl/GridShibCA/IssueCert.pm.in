######################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 GridShibCA::IssueCert

Accept a certificate request from client, sign and return it.

=cut

package GridShibCA::IssueCert;

# Inherit WebCommand
use base qw(GridShibCA::WebCommand);

use GridShibCA::Authorization;  # For AuthorizationException
use GridShibCA::Exception qw(:try);

=head2 Methods

=over 4

=item doCommand()

Override base class with this class' specific logic.

B<Arguments:> None

B<Returns:> 1 on success, 0 on error.

=cut

sub doCommand
{
    my $self = shift;
    my $ca = $self->{config}->getCA();
    my %options = ();

    try 
    {
	my $certificateRequest = $self->{cgi}->getCertificateRequest();
	my $lifetime = $self->{cgi}->param("lifetime");
	if (defined($lifetime))
	{
	    # Need to untaint lifetime
	    if ($lifetime =~ /^(\d+)$/)
	    {
		$lifetime = $1;
	    }
	    else
	    {
		throw GridShibCA::Exception(
		    "Illegal characters in lifetime ($lifetime)");
	    }
	    $options{requestedLifetime} = $lifetime;
	}
	my $certificate = $ca->handleRequest(
	    $self->{session},
	    $certificateRequest,
	    %options);
	# Single use session has now been used, destroy
	$self->{session}->destroy();
	$self->_outputCertificate($certificate);
    }
    catch GridShibCA::AuthorizationFailedException with
    {
	my $ex = shift;
	$self->{logger}->err($ex->text());
	$self->_outputError(401, "Authorization failure");
	exit(1);
    }
    otherwise
    {
	my $ex = shift;
	$self->{logger}->err($ex->text());
	$self->_outputError(500, "Server error issuing certificate");
	exit(1);
    };
    return 1;
}

=item _defaultRequirements()

Return the default requirements for this command.

B<Arguments:> None

B<Returns:> Default requirements as bitmask

=cut

sub _defaultRequirements
{
    return $GridShibCA::WebCommand::REQUIRE_CREDENTIAL_ISSUER_SESSION;
}

=item _outputCertificate()

Output the certificate to return it to the client.

B<Arguments:> Certificate as use Crypt::OpenSSL::X509 object

B<Returns:> Nothing

=cut

sub _outputCertificate
{
    my $self = shift;
    my $certificate = shift ||
	throw GridShibCA::Exception("Missing certificate argument");

    my $pem = $certificate->as_string();
    if (!defined($pem) || ($pem eq ""))
    {
	throw GridShibCA::Exception("Failed to convert X.509 certificate to PEM");
    }
    
    print $self->{cgi}->header("text/plain");
    print $pem;
}

=item _outputError()

Output an error back to the client.

B<Arguments:>

C<$status> Status value to return

C<$message> error message

B<Returns:> Nothing

=cut

sub _outputError
{
    my $self = shift;
    my $status = shift || 500;
    my $message = shift || "No error message given";

    print $self->{cgi}->header(-type=>"text/plain",
			       -status=>$status . " " .  $message);
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
