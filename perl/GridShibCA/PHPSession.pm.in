######################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 GridShibCA::PHPSession

Reads various values from a PHP session.

This class assists in the reading of values set in the default PHP session
(as invoked by the PHP command "session_start()" using the default
"session_name()").  The PHP session save_path and session cookie name are
read from the system-wide php.ini configuration file ('/etc/php.ini').  The
actual session file name is then computed and utilized to create the
internal {php} object (an instance of PHP::Session).

The developer has access to several "getters" (such as getUID()) that
fetch specific PHP session values.  Also, there is an "internal" method
getVar() which allows the developer to fetch any PHP session value.

=cut

package GridShibCA::PHPSession;

use GridShibCA::Exception;
use DBI;
use PHP::Session;
use PHP::Session::DBI;
use CGI::Lite;
use Config::Simple;

=head2 Methods

=over 4

=item new()

Returns a new PHPSession object containing an internal {php} object pointing
to the actual (PHP::Session) instance.  If the PHP session could not be
read, this {php} object is undefined, and all "getter" methods will return
undef.

B<Arguments:> The GridShibCA::Config object loaded for the current session.
This is used to read the database username/password when reading PHP session
data from MySQL. This must be passed in since the PHPSession class is not a
subclass of WebCommand.

B<Returns:> GridShibCA::PHPSession instance.

=cut

sub new
{
    my $class = shift;
    my $gsconfig = shift ||
        throw GridShibCA::Exception("Missing config argument");
    my $self = {};

    $self->{php} = undef;

    my $phpconfig = new Config::Simple('/etc/php.ini');
    my $ciconfig  = new Config::Simple('/var/www/config/cilogon.ini');

    my $sessionname = $phpconfig->param('Session.session.name');
    if (length($sessionname) == 0) {
        $sessionname = 'PHPSESSID';
    }

    my $cgi = new CGI::Lite;
    my $cookies = $cgi->parse_cookies;
    my $sid = $cookies->{$sessionname};

    if ($ciconfig->param('Storage.storage.phpsessions') =~ /^mysql/) {
        my $dbh = DBI->connect('DBI:mysql:' .
            'database=' . $gsconfig->getParam("Session","Database") . 
            ';host='    . $gsconfig->getParam("Session","Host") .
            ';port='    . $gsconfig->getParam("Session","Port") .
            ((int($gsconfig->getParam("Session","SSL"))) == 1 ?
                ";mysql_ssl=1;mysql_ssl_ca_file=" . 
                $gsconfig->getParam("Session","CAFile") :
                ""),
            $gsconfig->getParam("Session","Username"),
            $gsconfig->getParam("Session","Password"));
        if ($dbh) {
            $self->{php} = PHP::Session::DBI->new($sid,
                {db_handle => $dbh,
                 db_table  => 'phpsessions',
                 db_schema => {id    => 'id',
                               data  => 'data',
                               date  => 'expires',
                              },
                });
            $dbh->disconnect();
        }
    } else {
        my $savepath = $phpconfig->param('Session.session.save_path');
        if ((!defined $savepath) || (length($savepath) == 0)) {
            $savepath = '/var/lib/php/session';
        }
        if (-r "$savepath/sess_$sid") {
            $self->{php} = PHP::Session->new($sid,
                {save_path => $savepath,
                });
        }
    }

    bless($self,$class);
    return $self;
}

=item getUID()

Returns the value of 'uid' (the persistent store unique user identifier)
from the PHP session, or undef if not set.

B<Arguments:> None

B<Returns:> The PHP session 'uid', or undef if not set.

=cut

sub getUID 
{
    my $self = shift;
    return $self->getVar('uid');
}

=item getIdP()

Returns the value of 'idp' (Identity Provider) from the PHP session, or
undef if not set.

B<Arguments:> None

B<Returns:> The PHP session 'idp', or undef if not set.

=cut

sub getIdP
{
    my $self = shift;
    return $self->getVar('idp');
}

=item getVar($varname)

Returns the value of $varname from the PHP session, or undef if not set.

B<Arguments:> $varname - The PHP session variable name to fetch.

B<Returns:> The PHP session value of $varname, or undef if not set.

=cut

sub getVar
{
    my $self = shift;
    my $varname = shift;
    my $retval = undef;
    if ((defined($self->{php})) && ($self->{php}->is_registered($varname))) {
        $retval = $self->{php}->get($varname);
    }
    return $retval;
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
