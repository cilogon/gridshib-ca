#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# Use OpenSSL to act as a CA and create certificates for the
# GridShib-CA.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

package GridShibCA::OpenSSLCA;

# Inherit CA class
use GridShibCA::CA;
@ISA = ("GridShibCA::CA");

use GridShibCA::Command;

# new()
# Create a new interface to the CA.
# Arguments:
#  $username - name of user as string
#  $idp - idp of user as string
# Returns: CA instance
sub new
{
    my $class = shift;
    my $self = $class->SUPER::new(@_);
    $self->{caProg} = "@GRIDSHIB_CA_CONF_DIR@/openssl-ca";
    $self->{cert} = "@GRIDSHIB_CA_CERT_PATH@";
    $self->{key} = "@GRIDSHIB_CA_KEY_PATH@";
    $self->{serialFile} = "@GRIDSHIB_CA_CONF_DIR@/serial";
    bless($self, $class);
    return $self;
}

# signRequest
# Given a certificate request return a certificate
# Arguments: None
# Returns: Certificate as string, or undef on error
#  Username
sub signRequest
{
    my $self = shift;
    my $certificateRequest = shift;

    # Check for our key and certificate
    if (! -e $self->{caProg})
    {
	$self->_error("Could not find openssl CA executable: %s ",
		      $self->{ca_Prog});
	return undef;
    }

    if (! -r $self->{cert})
    {
	$self->_error("Could not read certificate: " . $self->{cert});
	return undef;
    }

    if (! -r $self->{key})
    {
	$self->_error("Could not read private key: " . $self->{key});
	return undef;
    }

    my @args;

    my $DN = $self->getDN();

    # We need a DN in openssl format - e.g. /C=US/O=Foo/OU=Bar/CN=John Smith
    # Split RFC 2253 style DN on comma, reverse and join with slashes
    # Need to prepend a slash, as join doesn't do that for us.
    my $opensslFormatDN = "/" . join("/", reverse(split(/, /, $DN)));

    # Everything checks out. Go ahead and sign certificate request.

    # XXX Need to have locking here to serialize access to the serial file
    my $status;
    @args = ();

    # Sign certificate request
    # Request is read from stdin and certificate output to stdout
    push(@args, "-subj", $opensslFormatDN);
    push(@args, "-days", $self->{lifetime});
    push(@args, "-CA", $self->{cert});
    push(@args, "-CAkey", $self->{key});
    push(@args, "-CAserial", $self->{serialFile});
    push(@args, "-CAcreateserial");

    my $cmd = GridShibCA::Command->new($self->{caProg}, @args);
    $cmd->setInput($certificateRequest);
    if (!$cmd->exec())
    {
	$self->_error("Error executing %s: %s",
		      $self->{caProg}, $cmd->getError());
	return undef;
    }
    return $cmd->getOutput();
}

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
