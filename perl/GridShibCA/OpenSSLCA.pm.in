#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# Use OpenSSL to act as a CA and create certificates for the
# GridShib-CA.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::OpenSSLCA

Implementation of L<GridShibCA::CA Class|GridShibCA::CA> based on OpenSSL.
See that Module for a description of methods.

=head2 Configuration Parameters

This class uses the following values from F<gridshib-ca.conf>:

=over 4

=item OpenSSLCA

Path to executable to use.

=item OpenSSLCACert

Path to CA certificate.

=item OpenSSLCAKey

Path to private key to use.

=item OpenSSLCASerial

Path to file containing the serial number.

=item OpenSSLRandFile

Path to file to store random state.

=item IncludeSAMLInCert

Boolean - use GridShib SAML Tools to include SAML in issued certificates.

=item JavaHome

Path to JAVA_HOME. Needed to run GridShib SAML Tools.

=item GridShibSAMLToolsPath

Path to GridShib SAML Tools installation.

=back

=cut

package GridShibCA::OpenSSLCA;

use File::Temp;

# Inherit CA class
use GridShibCA::CA;
@ISA = ("GridShibCA::CA");

use GridShibCA::Config;

=head2 Methods

=over 4

=item new()

Create a new interface to the CA.

B<Arguments:>

C<$username> - name of user as string

C<$idp> - idp of user as string

B<Returns>: CA instance

=cut

sub new
{
    my $class = shift;
    my $self = $class->SUPER::new(@_);
    $self->{config} = GridShibCA::Config->new();
    $self->{caProg} = $self->{config}->getParam("OpenSSLCA");
    $self->{cert} = $self->{config}->getParam("OpenSSLCACert");
    $self->{key} = $self->{config}->getParam("OpenSSLCAKey");
    $self->{serialFile} = $self->{config}->getParam("OpenSSLCASerial");
    $self->{randFile} = $self->{config}->getParam("OpenSSLRandFile");
    bless($self, $class);
    return $self;
}

=item signRequest()

Given a certificate request return a certificate

B<Arguments>: Certificate request as string

B<Returns>: Certificate as string, or undef on error

=cut

sub signRequest
{
    my $self = shift;
    my $certificateRequest = shift;

    # If defined, has file containing SAML extension
    my $samlExtFilename = undef;

    # Check for our key and certificate
    if (! -e $self->{caProg})
    {
	$self->_error("Could not find openssl CA executable: %s ",
		      $self->{ca_Prog});
	return undef;
    }

    if (! -r $self->{cert})
    {
	$self->_error("Could not read certificate: " . $self->{cert});
	return undef;
    }

    if (! -r $self->{key})
    {
	$self->_error("Could not read private key: " . $self->{key});
	return undef;
    }

    # Everything checks out. Go ahead and sign certificate request.

    # Allow openssl to save random number state to avoid "unable to
    # write 'random state'" errors
    $ENV{"RANDFILE"} = $self->{randFile};

    my @args;

    my $DN = $self->getProtectedOpenSSLDN();

    if ($self->{config}->getParamBoolean("IncludeSAMLInCert"))
    {
	$self->_debug("Including SAML in certificate");
	my $samlExt = $self->getSAMLExt();

	if (defined($samlExt))
	{
	    $self->_debug("SAML extension: %s.", $samlExt);
	    # Create temporary file and put extension in it
	    # Don't automatically unlink the file when $samlExtFile
	    # is not used as we need file later.
	    my $samlExtFile = File::Temp::tempfile(UNLINK => 0);
	    print $samlExtFile $samlExt;
	    # Set filename to indicate success. Will be used later.
	    $samlExtFilename = $samlExtFile->filename();
	    close($samlExtFile);
	}
	else
	{
	    # We should have logged an error in getSAMLExt()
	    $self->_debug("SAML extension creationed FAILED.");
	}
    }

    # XXX Need to have locking here to serialize access to the serial file
    my $status;
    @args = ();

    # Sign certificate request
    # Request is read from stdin and certificate output to stdout
    push(@args, "-subj", $DN);
    push(@args, "-lifetime", $self->{lifetime});
    push(@args, "-CA", $self->{cert});
    push(@args, "-CAkey", $self->{key});
    push(@args, "-CAserial", $self->{serialFile});
    push(@args, "-CAcreateserial");
    if (defined($samlExtFilename))
    {
	push(@args, "-samlExt", $samlExtFilename);
    }

    my $cmd = $self->{config}->getCommand($self->{caProg}, @args);
    $self->_debug("Executing: %s %s", $self->{caProg}, join(" ", @args));
    $cmd->setInput($certificateRequest);
    my $result = $cmd->exec();
    # Clean up SAML extension if need be
    if (defined($samlExtFilename))
    {
	unlink($samlExtFilename);
    }
    # Did certificate signing succeed?
    if (!$result)
    {
	$self->_error("Error executing %s: %s",
		      $self->{caProg}, $cmd->getError());
	return undef;
    }
    # Yes, return PEM-encoded certificate as string
    return $cmd->getOutput();
}

=item getSAMLExt()

Return, as a string, a hunk of SAML for inclusion in the certificate.

B<Arguments:> None

B<Returns:> String containing SAML or undef on error

=cut

sub getSAMLExt
{
    my $self = shift;

    use File::Spec;
    use MIME::Base64();

    my $base64EncodedSAML = $ENV{"HTTP_SHIB_ATTRIBUTES"};

    if (!defined($base64EncodedSAML))
    {
	$self->_warn("No Shibboleth SAML found (HTTP_SHIB_ATTRIBUTES undefined).");
	return undef;
    }

    # This function doesn't seem to return failure nicely
    my $ssoResponse = MIME::Base64::decode($base64EncodedSAML);

    if (!defined($ssoResponse) or ($ssoResponse eq ""))
    {
	$self->_warn("Base64 decode of SSO Response failed.");
	return undef;
    }

    # Write to temporary file as required by gridshib-saml-issuer
    my ($ssoResponseFile, $ssoResponseFilename) =
	File::Temp::tempfile(UNLINK => 1);
    print $ssoResponseFile $ssoResponse;
    close($ssoResponseFile);

    # Ok, now call gridshib-saml-issuer to build SAML for includion
    # in certificate.
    my $gridshibHome = $self->{config}->getParam("GridShibSAMLToolsPath");

    if (! -d $gridshibHome )
    {
	$self->_warn("GridShibSAMLToolsPath does not exist: $gridshibHome");
	return undef;
    }

    # Current version of gridshib-saml-issuer requires GRIDSHIB_HOME to be
    # set.
    $ENV{"GRIDSHIB_HOME"} = $gridshibHome;

    my $javaHome = $self->{config}->getParam("JavaHome");

    $ENV{"JAVA_HOME"} = $javaHome;
    
    # Get full path to gridshib-saml-issuer
    my $gridshibIssuer = File::Spec->catfile($gridshibHome,
					     "bin",
					     "gridshib-saml-issuer");

    if ( ! -f $gridshibIssuer )
    {
	$self->_warn("gridshib-saml-issuer does not exist ($gridshibIssuer)");
	return undef;
    }

    my $status;
    my @args = ();

    push(@args, "--user", $self->getDN());
    # --ssoResponse expects a file: url
    push(@args, "--ssoResponse", "file:" . $ssoResponseFilename);

    my $cmd = $self->{config}->getCommand($gridshibIssuer, @args);
    $self->_debug("Executing: %s %s", $gridshibIssuer, join(" ", @args));
    if (!$cmd->exec())
    {
	# Verison 0.1.3 of gridshib-saml-issuer doesn't return non-zero
	# on exit, so we won't catch failures unfortunately.
	$self->_warn("Error executing %s: %s",
		     $gridshibIssuer,
		     $cmd->getError());
	return undef;
    }
    my $saml = $cmd->getOutput();
    
    # Remove any CR's to make sure we have a single line of SAML
    # This will also strip any CR at line's end.
    $saml =~ s/\n//g;

    if ($saml eq "")
    {
	$self->_warn("SAML assertion empty.");
	return undef;
    }

    return $saml;
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
