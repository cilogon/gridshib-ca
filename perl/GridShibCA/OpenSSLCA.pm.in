#!@PERL@ @PERL_ARGS@
######################################################################
#
# $Id$
#
# Use OpenSSL to act as a CA and create certificates for the
# GridShib-CA.
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::OpenSSLCA

Implementation of L<GridShibCA::CA Class|GridShibCA::CA> based on OpenSSL.
See that Module for a description of methods.

=head2 Configuration Parameters

This class uses the following values from the C<OpenSSLCA> section of
F<gridshib-ca.conf>:

=over 4

=item Program

Path to executable to use.

=item CACert

Path to CA certificate.

=item CAKey

Path to private key to use.

=item SerialFile

Path to file containing the serial number.

=item RandFile

Path to file to store random state.

=item IncludeSAMLInCert

Boolean - use GridShib SAML Tools to include SAML in issued certificates.

=back

=cut

package GridShibCA::OpenSSLCA;

use File::Temp;

# Inherit CA class
use GridShibCA::CA;
@ISA = ("GridShibCA::CA");

use GridShibCA::Config;
use GridShibCA::Exception qw(:try);
use GridShibCA::X509DN;

=head2 Methods

=over 4

=item new()

Create a new interface to the CA.

B<Arguments:> None

B<Returns>: CA instance

=cut

sub new
{
    my $class = shift;
    my $self = $class->SUPER::new(@_);
    $self->{config} = GridShibCA::Config->new();

    try
    {
	$self->{caProg} = $self->{config}->getParam("OpenSSLCA", "Program");
	$self->{cert} = $self->{config}->getParam("OpenSSLCA", "CACert");
	$self->{key} = $self->{config}->getParam("OpenSSLCA", "CAKey");
	$self->{serialFile} = $self->{config}->getParam("OpenSSLCA", "SerialFile");
	$self->{randFile} = $self->{config}->getParam("OpenSSLCA", "RandFile");
    }
    catch GridShibCA::ConfigException with
    {
	my $ex = shift;
	throw GridShibCA::CAException("CA configuration error: " . $ex->getText());
    };

    bless($self, $class);
    return $self;
}

=back

=cut

######################################################################

=head1 Internal methods

These internal methods not intended for external use.

=over 4


=item _signRequest()

Given a certificate request return a certificate

B<Arguments>:

C<$session> CGISession instance (Required)

C<$certificateRequest> PKCS10 certificate request as PEM-ncoded string.

Optional dictionary with the following optional values:

C<requestedLifetime> Requested lifetime in seconds.

B<Returns>: Certificate as Crypt::OpenSSL::X509 object

=cut

sub _signRequest
{
    my $self = shift;
    my $session = shift ||
	throw GridShibCA::CAException("Missing session argument");
    my $certificateRequest = shift ||
	throw GridShibCA::CAException("Missing certificate request argument");
    my %options = @_;

    my $userId = $session->userIdentity();
    my $nameMapper = $self->{config}->getNameMapper($userId);

    # If defined, has file containing SAML extension
    my $samlExtFilename = undef;
    my $samlExtFile = undef;

    if (! -x $self->{caProg})
    {
	throw GridShibCA::CAException(
	    "CA configuration error (missing program)",
	    -logText=>"Program " . $self->{caProg} . " not found/executable");
    }

    if (! -r $self->{cert})
    {
	throw GridShibCA::CAException(
	    "CA configuration error (missing certificate)",
	    -logText=>"Certificate " . $self->{cert} . " not found/readable");
    }

    if (! -r $self->{key})
    {
	throw GridShibCA::CAException(
	    "CA configuration error (missing key)",
	    -logText=>"Key " . $self->{key} . " not found/readable");
    }

    if (! -r $self->{serialFile})
    {
	throw GridShibCA::CAException(
	    "CA configuration error (missing serial file)",
	    -logText=>"Serial file " . $self->{serialFile} . " not found/readable");
    }

    # Allow openssl to save random number state to avoid "unable to
    # write 'random state'" errors
    $ENV{"RANDFILE"} = $self->{randFile};

    my $DN = $nameMapper->getUserDN()->getProtectedOpenSSLDN();

    if ($self->{config}->getParamBoolean("OpenSSLCA", "IncludeSAMLInCert"))
    {
	$self->{logger}->debug("Including SAML in certificate");

	try
	{
	    my $samlExt = $self->_getSAMLExt($session);
	    $self->{logger}->debug("SAML extension: %s", $samlExt);
	    # Create temporary file and put extension in it
	    ($samlExtFile, $samlExtFilename) =
		File::Temp::tempfile(UNLINK => 1);
	    print $samlExtFile $samlExt;
	    close($samlExtFile);
	}
	otherwise
	{
	    my $ex = shift;
	    $self->{logger}->warn("SAML generation failed.");
	    if (defined($ex))
	    {
		$self->{logger}->logException($ex);
	    }
	}
    }

    # XXX Need to have locking here to serialize access to the serial file
    my $status;
    my @opensslArgs = ();

    # Sign certificate request
    # Request is read from stdin and certificate output to stdout
    push(@opensslArgs, "-subj", $DN);
    push(@opensslArgs, "-lifetime", $options{requestedLifetime});
    push(@opensslArgs, "-CA", $self->{cert});
    push(@opensslArgs, "-CAkey", $self->{key});
    push(@opensslArgs, "-CAserial", $self->{serialFile});
    push(@opensslArgs, "-CAcreateserial");
    if (defined($samlExtFilename))
    {
	push(@opensslArgs, "-samlExt", $samlExtFilename);
    }

    my $cmd = $self->{config}->getCommand($self->{caProg}, @opensslArgs);
    $self->{logger}->debug("Executing: %s %s",
			   $self->{caProg}, join(" ", @opensslArgs));
    $cmd->setInput($certificateRequest);
    my $result = $cmd->exec();
    if (!$result)
    {
	my $error = $cmd->getError();
	throw GridShibCA::CAException(
	    "Error signing certificate request",
	    -logText => "OpenSSL returned non-zero ($result): " . $result);
    }

    my $pemCert =  $cmd->getOutput();
    my $x509 = $self->_X509fromPEM($pemCert);
    return $x509;
}

=item _getSAMLExt()

Create a SAML extension for inclusion in certificate. Includes an
ASN.1 header so it can be easily feed to openssl.

B<Arguments:> CGISession instance

B<Returns:> SAML extension as string or undef on error.

=cut

sub _getSAMLExt
{
    my $self = shift;
    my $session = shift;

    my $samlExtensionModule = $self->{config}->getSAMLExtension();

    if (!defined($samlExtensionModule))
    {
	$self->_warn("Could not initialize SAMLExtension module: "
		     . $config->getError());
	return undef;
    }

    my $saml = $samlExtensionModule->generateSAML($self->getDN($session));
    return $saml;
}

=back

=head1 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

######################################################################
### Local Variables: ***
### mode:perl ***
### End: ***
