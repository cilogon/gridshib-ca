######################################################################
#
# This file is part of the GriShib-CA distribution.  Copyright
# 2006-2009 The Board of Trustees of the University of
# Illinois. Please see LICENSE at the root of the distribution.
#
######################################################################

=head1 GridShibCA::Logger

Interface to logging based on Perl Sys::Syslog Module.

=head2 Configuration Parameters

This class uses the following values from F<gridshib-ca.conf>:

=over 4

=item SyslogId

Identifying string to use with Syslog.

=item SyslogFacility

Facility to use with Syslog.

=back

=cut

package GridShibCA::Logger;

use Carp;
use Sys::Syslog;
use File::Basename;

use GridShibCA::Config;

=head2 Methods

=over 4

=item new()

Create a new Logger object.

B<Arguments:> Optional dictionary

C<-config>  GridShibCA::Config object to use.
            This allow us to prevent a loop when constructed by Config
            and then we call Config->new().

B<Returns:> Logger instance

=cut

sub new
{
    my $class = shift;
    my $self = {};
    my %args = @_;

    my $config = $args{-config} || GridShibCA::Config->new();

    # Syslog parameters
    my $SYSLOG_ID = $config->getParam("SyslogId");
    my $SYSLOG_OPTS = "pid";
    my $SYSLOG_FACILITY = $config->getParam("SyslogFacility");

    my $id = sprintf("%s (%s)", $SYSLOG_ID, basename($0));
    openlog($id, $SYSLOG_OPTS, $SYSLOG_FACILITY);
    bless($self, $class);
    return $self;
}

=item log()

Log a message.

B<Arguments:>

I<$level> - one of "info", "warn", "err"

I<$format, @args> - as would be presented to sprintf()

B<Returns:> Nothing

=cut

sub log
{
    my $self = shift;
    my $level = shift;
    my $format = shift;
    my @args = @_;
    if (!defined($level) || !defined($format))
    {
	Carp::confess("Logger called with undefined arguments.");
    }
    syslog($level, $format, @args);
}

=item info()

Log an informative message

B<Arguments:>

I<$format, @args> - as would be presented to sprintf()

B<Returns:> Nothing

=cut

sub info
{
    my $self = shift;
    $self->log("info", @_);
}



=item warn()

Log an warning message

B<Arguments:>

I<$format, @args> - as would be presented to sprintf()

B<Returns:> Nothing

=cut

sub warn
{
    my $self = shift;
    $self->log("warning", @_);
}


=item debug()

Log an message at debug level.

B<Arguments:>

I<$format, @args> - as would be presented to sprintf()

B<Returns:> Nothing

=cut

sub debug
{
    my $self = shift;
    $self->log("debug", @_);
}


=item err()

Log an error message

B<Arguments:>

I<$format, @args> - as would be presented to sprintf()

B<Returns:> Nothing

=cut

sub err
{
    my $self = shift;
    $self->log("err", @_);
}

=item error()

Log an error message. Alias for err().

B<Arguments:>

I<$format, @args> - as would be presented to sprintf()

B<Returns:> Nothing

=cut

sub error
{
    my $self = shift;
    $self->err(@_);
}

=item logException()

Handle logging of an GridShibCA::Exception.

B<Arguments:>

C<$ex> GridShibCA::Exception (or instance of descendant) to log

B<Returns:> Nothing

=cut

sub logException
{
    my $self = shift;
    my $ex = shift;

    my $exType = ref($ex);
    my $text = $ex->text();

    if ($exType eq "Error::Simple")
    {
	# If we have a simple error, include filename and line number as
	# that will be useful.
	my $file = $ex->file() || "Unknown file";
	my $line = $ex->line() || "Unknwon line";
	$text = "Exception: $text ($file:$line)";
    }
    else
    {
	# For other types of exceptions, filename and line number will be
	# from the Error.pm module, which isn't useful. Instead include
	# the type of exception.
	$text = $exType . ": " . $text;
    }

    $self->err($text);
    
    if ($ex->can("logText"))
    {
	my $logText = $ex->logText();
	if (defined($logText))
	{
	    $self->err("Exception details: " . $logText);
	}
    }

    my $stackTrace = $ex->stacktrace();
    if (defined($strackTrace))
    {
	$self->err("Exception stacktrace: " . $stackTrace);
    }
}


=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@

=cut

# Return true for import/use
1;

### Local Variables: ***
### mode:perl ***
### End: ***
######################################################################
