######################################################################
#
# $Id$
#
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

=head1 GridShibCA::CertRegistry.pm

Interface for certificate registry, used to record issued
certificates.  This implementation records the all certificates in the
directory specified by the configuration parameter I<CertRegistryDir>
using a filename that is a concatenation of the DN hash and the
current timestamp (which is not the issuance instance).

Other implementations include: L<GridShibCA::myVocsDBCertRegistry|GridShibCA::myVocsDBCertRegistry>

=head2 Configuration Parameters

This class uses the following values from F<gridshib-ca.conf>:

=over 4

=item CertRegistryDir

Directory in which to store certificates.

=back

=cut

package GridShibCA::CertRegistry;

use Crypt::OpenSSL::X509;
use File::Spec;
use FileHandle;

use GridShibCA::Config;

=head2 Methods

=over 4

=item new()

Create a new CertRegistry object.

B<Arguments:> None

B<Returns:> CertRegistry instance

=cut

sub new
{
    my $class = shift;
    my $self = {};
    $self->{config} = GridShibCA::Config->new();
    bless($self, $class);
    return $self;
}

=item registerCert()

Record an issued certificate.

B<Arguments:>

I<$userId> - User identity as a string.

I<$idp> - IDP for user as a string.

I<$dn> - DN issued to user as a string. (Not used, DN derived from
certificate.)

I<$certificate> - PEM-encoded certificate as a string.

I<$lifetime> - Certificate lifetime in seconds.

B<Returns:> One on success, zero on error

=cut

sub registerCert()
{
    my $self = shift;
    my $userId = shift;
    my $idp = shift;
    my $dn = shift; # Not used
    my $certificate = shift;
    my $lifetime = shift;

    if (!defined($userId) or
	!defined($idp) or
	!defined($certificate))
    {
	$self->_error("Argument missing.");
	return 0;
    }

    my $x509 = Crypt::OpenSSL::X509->new_from_string($certificate);
    if (!defined($x509))
    {
	# Not clear to me how Crypt::OpenSSL::X509 returns an error string
	$self->_error("Failed to parse X.509 certificate.");
	return 0;
    }

    $dn = $x509->subject();
    my $serial = $x509->serial();
    my $hash = $x509->hash();
    my $timeString = localtime();
    my $timeSeconds = time();

    # $x509->notAfter() returns a string of the form "Jun 20 11:50:06 2009 GMT"
    # or I would use it to get lifetime.

    my $registryDir = $self->{config}->getParam("CertRegistryDir");

    if (! -d $registryDir)
    {
	if (!mkdir($registryDir, 0700))
	{
	    $self->_error("Could not create certificate registry directory (%s): %s",
			  $registryDir, $!);
	    return 0;
	}
    }

    # Hash is tainted, so must untaint before using in filename
    if ($hash =~ /^(\w+)$/)
    {
	$hash = $1;
    }
    else
    {
	$self->_error("Illegal characters in hash: \"$hash\"");
	return 0;
    }

    my $certFilename = File::Spec->catfile($registryDir,
					   $hash . "." . $timeSeconds);
    my $certFile = new FileHandle;
    
    if (!$certFile->open(">$certFilename"))
    {
	$self->_error("Could not open certificate file (%s): %s",
		      $certFilename, $!);
	return 0;
    }

    print $certFile <<"EOF";
User: $userId
IdP: $idp
DN: $dn
Serial: 0x$serial
Time: $timeString
Seconds: $timeSeconds
Lifetime: $lifetime

$certificate
EOF

    # Success
    return 1;
}


=item getError()

Return the last error message as a string.

B<Arguments:> None

B<Returns:> Error string

=cut

sub getError
{
    my $self = shift;
    return $self->{error}
}


=back

=cut

######################################################################

=head2 Internal methods

These internal methods not intended for external use.

=over 4

=item _error()

Handle a error message.

B<Arguments:> As to sprintf()

B<Returns:> Nothing

=cut

sub _error
{
    my $self = shift;
    my $format = shift;
    $self->{error} = sprintf($format, @_);
}

=back

=head2 Version

GridShib-CA version @PACKAGE_VERSION_STRING@ ($Id$)

=cut

# Return true for import/use
1;

### Local Variables: ***
### mode:perl ***
### End: ***
######################################################################
