######################################################################
#
# Makefile for GridShib CA
#
# $Id$
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

srcdir = @srcdir@
VPATH = @srcdir@
prefix = @prefix@

# Mode: "build" if build is enabled; "dist" otherwise
MODE=@MODE@

# Enable demos, "true" or "false"
ENABLE_DEMOS=@ENABLE_DEMOS@

######################################################################
#
# Groups of files
#

# Name of our client jar
JAR_NAME = @JAR_NAME@

# Path to our client jar
JAR_PATH = @JAR_PATH@

# Image files
IMAGES=\
	images/*.jpg \
	images/*.gif \
	images/*.png

# Files include in runtime generated HTML through CGIinterface.pm
HTML_INCS = @HTML_INCS@

# Source files
CGI_BIN_SRCS = @CGI_BIN_SRCS@
HTML_SRCS = @HTML_SRCS@
CONF_SRCS = @CONF_SRCS@
UTIL_SRCS = @UTIL_SRCS@
PERL_MODULE_SRCS = @PERL_MODULE_SRCS@
OPENSSL_CA_SRCS = @OPENSSL_CA_SRCS@
CGI_DEMO_SRCS = @CGI_DEMO_SRCS@
TEST_SRCS = @TEST_SRCS@

# Groups of files
CONF_FILES=@CONF_FILES@
UTILS=@UTILS@
DEV_UTILS=@DEV_UTILS@
BINARIES=@BINARIES@
CGI_BIN_SCRIPTS=@CGI_BIN_SCRIPTS@
CGI_DEMO_SCRIPTS=@CGI_DEMO_SCRIPTS@
CGI_BIN_DIR=@CGI_BIN_DIR@
HTML_FILES=@HTML_FILES@
PERL_MODULES = @PERL_MODULES@
REQUIRED_PERL_MODULES = @REQUIRED_PERL_MODULES@
PERL_DIST_MODULES = @PERL_DIST_MODULES@
TEMPLATE_FILES = @TEMPLATE_FILES@
TEST_SCRIPTS = @TEST_SCRIPTS@

# Files to be distributed (will be added to through this file)
DIST_FILES=\
	$(IMAGES) \
	$(CGI_BIN_SRCS) \
	$(HTML_SRCS) \
	$(CONF_SRCS) \
	$(UTIL_SRCS) \
	$(PERL_MODULES_SRCS) \
	$(OPENSSL_CA_SRCS) \
	$(CGI_DEMO_SRCS) \
	$(TEMPLATE_FILES) \
	$(TEST_SRCS) \
	$(JAR_PATH)

# All files to be build by default
BUILD_ALL =\
	$(CONF_FILES) \
	$(UTILS) \
	$(BINARIES) \
	$(PERL_MODULES) \
	$(HTML_FILES) \
	$(CGI_BIN_SCRIPTS) \
	$(CGI_DEMO_SCRIPTS) \
	$(DEV_UTILS) \
	$(TEST_SCRIPTS)

######################################################################
######################################################################
#
# Binaries and commands
#

INSTALL = @INSTALL@
MKDIR = @MKDIR@
RMDIR = @RMDIR@
CP = @CP@
TOUCH = @TOUCH@
OPENSSL = @OPENSSL@
RM = @RM@
XSLTPROC = @XSLTPROC@

CONFIG_STATUS = ./config.status
ENV = @ENV@

######################################################################
#
# Tools needed for building and distribution
#

TAR = @TAR@
DIR_EXISTS = test -d
PERL = @PERL@
POD2HTML = @POD2HTML@
FIND = @FIND@
ANT = @ANT@
KEYTOOL = @KEYTOOL@

######################################################################
######################################################################
#
# Main targets to be invoked by user
#

default: build-$(MODE)

# Only clean up stuff that cannot be regenerated in distribution
clean:: 
	rm -f $(CONF_FILES)
	rm -f $(UTILS)
	rm -f $(HTML_FILES)
	rm -f $(CGI_BIN_SCRIPTS)
	rm -f $(HTML_INCS)
	rm -f $(BINARIES)

# Clean up everything
realclean:: clean
	rm -f *~
	rm -f *.tmp

build-dist: subdirs $(BUILD_ALL)
	@echo Build complete. Run \"make install\" to install.

######################################################################
#
# Various extra dependencies
#

webdocs/checkPrerequisites.html webdocs/index.html: $(HTML_INCS)

######################################################################
#
# Handle subdirectories
#

# Subdirectories we are building in
SUBDIRS=@SUBDIRS@

# Path to our JWS client
GRIDSHIBCACLIENT_PATH=java/GridShibCAClient

subdirs: $(SUBDIRS) $(GRIDSHIBCACLIENT_PATH)

$(SUBDIRS):
	$(MAKE) $@/Makefile
	$(MAKE) -C $@

realclean clean::
	@for subdir in $(SUBDIRS) ; do \
		echo "Running 'make $@' in $${subdir}:" ; \
		(cd $${subdir}; $(MAKE) $@) ; \
	done

#
# java/GridShibCAClient
#

jar: $(JAR_PATH)

JAR_DEPS=@JAR_DEPS@

$(JAR_PATH): $(JAR_DEPS)
	cd $(GRIDSHIBCACLIENT_PATH) && $(ANT) gsca-jar

$(GRIDSHIBCACLIENT_PATH): $(JAR_PATH)

javaclean: 
	cd $(GRIDSHIBCACLIENT_PATH) && $(ANT) clean

TRUSTSTORE = $(GRIDSHIBCACLIENT_PATH)/resources/trustStore
TRUSTSTORE_CERTS = $(GRIDSHIBCACLIENT_PATH)/trusted-https-certs/*.[0-9]
# Bogus password, not needed but keeps keytool from prompting for one
TRUSTSTORE_PASSWD=abcdef

truststore: $(TRUSTSTORE)

$(TRUSTSTORE): $(TRUSTSTORE_CERTS)
	@$(RM) -f $@
	@for cert in $^; do \
		certname=`basename $${cert}` ;\
		echo Adding $${certname} to trustStore ;\
		$(KEYTOOL) -import \
			-keystore $@ \
			-noprompt \
			-alias $${certname} \
			-storepass ${TRUSTSTORE_PASSWD} \
			-file $${cert} ;\
	done

realclean::
	$(RM) -f $(TRUSTSTORE)

$(GRIDSHIBCACLIENT_PATH)/gsca.properties: $(GRIDSHIBCACLIENT_PATH)/gsca.properties.in config.status
	@$(CONFIG_STATUS) --file=$@:$<

$(GRIDSHIBCACLIENT_PATH)/resources/properties: $(GRIDSHIBCACLIENT_PATH)/resources/properties.in config.status
	@$(CONFIG_STATUS) --file=$@:$<

clean:: javaclean

realcleam:: javaclean

.PHONY: subdirs $(SUBDIRS) jar javaclean $(GRIDSHIBCACLIENT_PATH)

######################################################################
######################################################################
#
# Installation
#

# Installation directories
GRIDSHIB_CA_CONF_DIR=@GRIDSHIB_CA_CONF_DIR@
TEMPLATE_DIR=@TEMPLATE_DIR@
SHIB_PROTECTED_CGI_BIN_DIR=@SHIB_PROTECTED_CGI_BIN_DIR@
GRIDSHIB_CA_HTML_DIR=@GRIDSHIB_CA_HTML_DIR@
GRIDSHIB_CA_DOC_DIR=@GRIDSHIB_CA_DOC_DIR@

# User that httpd runs under
WWW_USER=@WWW_USER@

INSTALL_ALL=install-conf \
	install-binaries \
	install-perl \
	install-html \
	install-jar \
	install-cgi \
	install-templates \
	install-demos

install: $(INSTALL_ALL)
	@echo "Installation done."

$(GRIDSHIB_CA_CONF_DIR):
	@echo "Creating $(GRIDSHIB_CA_CONF_DIR)"
	@$(INSTALL) -d -o $(WWW_USER) -m 0700 $(GRIDSHIB_CA_CONF_DIR)

install-conf: $(GRIDSHIB_CA_CONF_DIR) $(CONF_FILES)
	@echo "Installing configuration to $(GRIDSHIB_CA_CONF_DIR)"
	@for file in $(CONF_FILES) ; do \
		f=`basename $${file}` ;\
		echo "Installing $${file}" ;\
		if test -f $(GRIDSHIB_CA_CONF_DIR)/$${f} ; then \
			echo "  Avoiding overwriting existing file." ;\
			$(INSTALL) -o $(WWW_USER) -m 0600 $${file} $(GRIDSHIB_CA_CONF_DIR)/$${f}.new ;\
		else \
			$(INSTALL) -o $(WWW_USER) -m 0600 $${file} $(GRIDSHIB_CA_CONF_DIR) ;\
		fi \
	done

install-binaries: $(GRIDSHIB_CA_CONF_DIR) $(UTILS) $(BINARIES)
	@echo "Installing binaries to $(GRIDSHIB_CA_CONF_DIR)"
	@for file in $(UTILS) $(BINARIES) ; do \
		echo "Installing $${file}" ;\
		$(INSTALL) -o $(WWW_USER) -m 0700 $${file} $(GRIDSHIB_CA_CONF_DIR) ;\
	done

install-perl: $(PERL_MODULES) $(PERL_DIST_MODULES)
	@echo "Installing perl modules to $(GRIDSHIB_CA_CONF_DIR)"
	@for file in $(PERL_MODULES) $(PERL_DIST_MODULES) ; do \
		echo "Installing $${file}" ;\
		d=`dirname $${file}` ;\
		$(INSTALL) -d -o $(WWW_USER) -m 0700 $(GRIDSHIB_CA_CONF_DIR)/$${d} ;\
		$(INSTALL) -o $(WWW_USER) -m 0700 $${file} $(GRIDSHIB_CA_CONF_DIR)/$${file} ;\
	done

$(GRIDSHIB_CA_HTML_DIR):
	@echo "Creating $(GRIDSHIB_CA_HTML_DIR)"
	@$(INSTALL) -d -o $(WWW_USER) -m 0755 $(GRIDSHIB_CA_HTML_DIR)

install-html: $(GRIDSHIB_CA_HTML_DIR) $(HTML_FILES) $(IMAGES)
	@echo "Installing html to $(GRIDSHIB_CA_HTML_DIR)"
	@for file in $(HTML_FILES) $(IMAGES) ; do \
		f=`basename $${file}` ;\
		echo "Installing $${file}" ;\
		$(INSTALL) -o $(WWW_USER) -m 0644 $${file} $(GRIDSHIB_CA_HTML_DIR) ;\
	done

install-jar:  $(JAR_PATH)
	@echo "Installing $(JAR_PATH) to $(GRIDSHIB_CA_HTML_DIR)"
	@$(INSTALL) -o $(WWW_USER) -m 0644 $(JAR_PATH) $(GRIDSHIB_CA_HTML_DIR)/$(JAR_NAME)

$(TEMPLATE_DIR): $(GRIDSHIB_CA_CONF_DIR)
	@echo "Creating $(TEMPLATE_DIR)"
	@$(INSTALL) -d -o $(WWW_USER) -m 0755 $(TEMPLATE_DIR)

install-templates: $(TEMPLATE_DIR)
	@echo "Installing templates to $(TEMPLATE_DIR)"
	@for file in $(TEMPLATE_FILES) ; do \
		f=`basename $${file}` ;\
		echo "Installing $${file}" ;\
		if test -f $(TEMPLATE_DIR)/$${f} ; then \
			echo "  Avoiding overwriting existing file." ;\
			$(INSTALL) -o $(WWW_USER) -m 0644 $${file} $(TEMPLATE_DIR)/$${f}.new ;\
		else \
			$(INSTALL) -o $(WWW_USER) -m 0644 $${file} $(TEMPLATE_DIR) ;\
		fi \
	done

$(SHIB_PROTECTED_CGI_BIN_DIR):
	@echo "Creating $(SHIB_PROTECTED_CGI_BIN_DIR)"
	@$(INSTALL) -d -o $(WWW_USER) -m 0755 $(SHIB_PROTECTED_CGI_BIN_DIR)

install-cgi: $(SHIB_PROTECTED_CGI_BIN_DIR) $(CGI_BIN_SCRIPTS)
	@echo "Installing cgi-bin scripts to $(SHIB_PROTECTED_CGI_BIN_DIR)"
	@for file in $(CGI_BIN_SCRIPTS) ; do \
		echo "Installing $${file}" ;\
		$(INSTALL) -o $(WWW_USER) -m 0755 $${file} $(SHIB_PROTECTED_CGI_BIN_DIR) ;\
	done

$(CGI_BIN_DIR):
	@echo "Creating $(CGI_BIN_DIR)"
	@$(INSTALL) -d -o $(WWW_USER) -m 0755 $(CGI_BIN_DIR)

install-demos: $(CGI_DEMO_SCRIPTS) $(CGI_BIN_DIR)
	@if test $(ENABLE_DEMOS) = "true"; then \
		echo "Installing demo scripts to $(CGI_BIN_DIR)" ;\
		for file in $(CGI_DEMO_SCRIPTS) ; do \
			echo "Installing $${file}" ;\
			$(INSTALL) -o $(WWW_USER) -m 0755 $${file} $(CGI_BIN_DIR) ;\
		done ;\
	fi

######################################################################
#
# Uninstall
#

uninstall:
	@for file in $(CONF_FILES) ; do \
		f=`basename $${file}` ;\
		echo "Uninstalling $${f}" ;\
		rm -f $(GRIDSHIB_CA_CONF_DIR)/$${f} ;\
	done
	@if $(DIR_EXISTS) $(GRIDSHIB_CA_CONF_DIR) ; then $(RMDIR) $(GRIDSHIB_CA_CONF_DIR) ; fi
	@for file in $(HTML_FILES) ; do \
		f=`basename $${file}` ;\
		echo "Uninstalling $${f}" ;\
		rm -f $(GRIDSHIB_CA_HTML_DIR)/$${f} ;\
	done
	@if $(DIR_EXISTS) $(GRIDSHIB_CA_HTML_DIR) ; then $(RMDIR) $(GRIDSHIB_CA_HTML_DIR) ; fi
	@for file in $(PROTECTED_CGI_BIN_FILES) ; do \
		f=`basename $${file}` ;\
		echo "Uninstalling $${f}" ;\
		rm -f $(PROTECTED_CGI_BIN_DIR)/$${f} ;\
	done
	@if $(DIR_EXISTS) $(SHIB_PROECTED_CGI_BIN_DIR) ; then $(RMDIR) $(SHIB_PROTECTED_CGI_BIN_DIR) ; fi
	@echo "Uninstall done."

######################################################################
######################################################################
#
# Development mode
#

build-build: build-mode build-dist

build-mode:
	@if test $(MODE) != "build" ; then \
		echo "Not configured for building." ; \
		echo "Rerun configure with --enable-build to enable building." ;\
		exit 1 ;\
	fi

######################################################################
#
# Perl
#

PERL_SCRIPTS= $(CGI_BIN_SCRIPTS) $(UTILS)

DIST_FILES += $(PERL_DIST_MODULES)
DIST_FILES += $(PERL_MODULE_SRCS)

check-perl: $(PERL_SCRIPTS) $(REQUIRED_PERL_MODULES)
	@for script in $^ ; do \
		echo Checking $${script} ;\
		$(PERL) -c -T -I./perl/ $${script} || exit 1 ;\
	done

clean::
	$(RM) -f $(PERL_MODULES)

######################################################################
######################################################################
#
# Documentation generation
#

# Documentation directory
DOC_DIR = @DOC_DIR@

# Generated html documentation files
DOC_FILES = @DOC_FILES@

# Docbook files generated by autoconf
DOCBOOK_FILES = @DOCBOOK_FILES@

# Docbook source files fed to autoconf
DOCBOOK_SRCS = @DOCBOOK_SRCS@

# Documentation images
DOC_IMAGES = @DOC_IMAGES@

# Doc files to be installed
DOC_INSTALL_FILES = @DOC_INSTALL_FILES@

DIST_FILES += $(DOC_FILES)
DIST_FILES += $(DOCBOOK_FILES)
DIST_FILES += $(DOCBOOK_SRCS)
DIST_FILES += $(DOC_IMAGES)

# Directory name for installed documentation
# Dont include release status on documentation directory
DOC_INSTALL_DIR=@DOC_INSTALL_DIR@

# XSLT Style Sheet to use
XSLT_STYLE_SHEET=@XSLT_STYLE_SHEET@

XSLTPROC_OPTS=\
		--stringparam chunk.section.depth 0 \
	      	--stringparam chapter.autolabel 1 \
		--stringparam section.autolabel 1 \
		--stringparam generate.toc.book toc

docbook: doc/index.html doc/admin/index.html

doc:: docbook

doc/index.html: $(DOCBOOK_FILES)
	$(XSLTPROC) $(XSLTPROC_OPTS) $(XSLT_STYLE_SHEET) doc/index.xml

doc/admin/index.html: $(DOCBOOK_FILES)
	$(XSLTPROC) $(XSLTPROC_OPTS) $(XSLT_STYLE_SHEET) doc/admin/index.xml

doc-clean:: 
	$(RM) -rf $(DOC_FILES)
	$(RM) -rf $(DOCBOOK_FILES)

realclean:: doc-clean

######################################################################
#
# Generated perl documentation
#
# It will be great to figure out dependacies for the following rules.

# Where we put autogenerated perl documentation locally
PERL_DOC_DIR = @PERL_DOC_DIR@

# XXX This will not automatically rebuild the directory contents
DIST_FILES += $(PERL_DOC_DIR)

perl-doc: perl-module-doc perl-script-doc

doc:: perl-doc

$(PERL_DOC_DIR):
	@$(INSTALL) -d -m 0755 $(PERL_DOC_DIR)

doc-clean::
	$(RM) -rf $(PERL_DOC_DIR)

POD2HTML_ROOT=/docs/$(DOC_INSTALL_DIR)/perl

# Program to cleanup pod2html output
# Currently this removes the xml header
CLEAN_POD2HTML=dev-utils/clean-pod2html.sh

$(CLEAN_POD2HTML): $(CLEAN_POD2HTML).in config.status
	@$(CONFIG_STATUS) --file=$@:$<

perl-module-doc: $(PERL_DOC_DIR) $(PERL_MODULES)
	@$(INSTALL) -d -m 0755 $(PERL_DOC_DIR)/GridShibCA
	@chmod +x $(CLEAN_POD2HTML)
	@for script in $(PERL_MODULES) ; do \
	  f=`basename -s .pm $${script}` ;\
	  t=GridShibCA::`basename $${script}` ;\
	  out=$(PERL_DOC_DIR)/GridShibCA/$${f}.html ;\
	  if test $${script} -nt $${out} ; then \
	    echo "Generating docs for $${t}" ;\
	    $(POD2HTML) --infile=$${script} --outfile=$${out} --title=$${t} --noindex --htmlroot=$(POD2HTML_ROOT) ;\
            $(CLEAN_POD2HTML) $${out} ;\
	  fi ;\
	done

perl-script-doc: $(PERL_DOC_DIR) $(UTILS)
	@for script in $(UTILS) ; do \
	  f=`basename -s .pl $${script}` ;\
	  t=GridShibCA::`basename $${script}` ;\
	  out=$(PERL_DOC_DIR)/$${f}.html ;\
	  if test $${script} -nt $${out} ; then \
	    echo "Generating docs for $${t}" ;\
	    $(POD2HTML) --infile=$${script} --outfile=$${out} --title=$${t} --noindex --htmlroot=$(POD2HTML_ROOT) ;\
            $(CLEAN_POD2HTML) $${out} ;\
	  fi ;\
	done

realclean::
	$(RM) -rf $(PERL_DOC_DIR)

######################################################################
######################################################################
#
# Distribution building
#

# Directory to build distribution in
DIST_DIR=@DIST_DIR@

# Extra files to distribute
DIST_EXTRA_FILES=@DIST_EXTRA_FILES@

# Files to include in distribution
DIST_FILES += $(DIST_EXTRA_FILES)

# Distribution file
DIST_FILE=@DIST_TARBALL_NAME@

dist:	build-mode $(DIST_FILE)

$(DIST_FILE): $(DIST_FILES)
	$(DIR_EXISTS) $(DIST_DIR) || $(MKDIR) $(DIST_DIR)
	@echo Copying files into $(DIST_DIR)
	@for file in $^; do \
		echo $${file} ;\
		dir=`dirname $${file}` ;\
		$(DIR_EXISTS) $(DIST_DIR)/$${dir} || $(MKDIR) -p $(DIST_DIR)/$${dir} ;\
		$(CP) -R $${file} $(DIST_DIR)/$${dir} ;\
	done
	$(TAR) cfz $@ $(DIST_DIR)/*
	$(RM) -rf $(DIST_DIR)
	ls -l $(DIST_FILE)

# Allow for building all distribution files, but not distibution itself
dist-files: $(DIST_FILES)

clean::
	$(RM) -rf $(DIST_DIR)

realclean::
	$(RM) -f $(DIST_FILE)

######################################################################
#
# Tests
#

# Command to run perl scripts so they can get to modules in build directory
PERL_TEST=${ENV} PERLLIB=./perl/

test: subdirs chmod-tests chmod-utils check-perl test-openssl-ca test-myproxy-mapapp test-config
	@echo "Tests successful."

test-openssl-ca: openssl-ca/openssl-ca-test.sh
	openssl-ca/openssl-ca-test.sh

test-post-install: test-cert-issue
	@echo "Post install tests successful."

test-config: ${PERL_MODULES} utils/check-config.pl conf/gridshib-ca.conf
	$(PERL_TEST) utils/check-config.pl conf/gridshib-ca.conf

test-cert-issue:
	@echo "Testing basic certificate issuance:"
	${GRIDSHIB_CA_CONF_DIR}/issue-cert.pl testuser@fakeidp.org  urn:mace:incommon:fakeidp
	@echo "Testing with ePTID-like Id:"
	${GRIDSHIB_CA_CONF_DIR}/issue-cert.pl eptid:like/id@fakeidp.org  urn:mace:incommon:fakeidp

test-myproxy-mapapp: utils/myproxy-mapapp.pl
	@echo "Calling myproxy-mapapp.pl with good DN."
	@if utils/myproxy-mapapp.pl "@OPENSSL_RELATIVE_DN@/Test User" ; then \
		echo "Success." ;\
	else \
		echo "myproxy-mapapp.pl failed." ;\
		exit 1 ;\
	fi
	@echo "Calling myproxy-mapapp.pl with bogus DN."
	@if utils/myproxy-mapapp.pl "/C=Bogus/CN=DN" ; then \
		echo "myproxy-appmapp.pl accepted bogus DN." ;\
		exit 1 ;\
	else \
		echo "Success." ;\
	fi

######################################################################
######################################################################
#
# Allow for automatic regeneration of configure and Makefile
#

# If config.status gets regenerated here, Makefile gets regenerated
# twice. Not ideal, but not sure what the workaround is.
Makefile: Makefile.in config.status
	@$(CONFIG_STATUS) --file=$@:$<

openssl-ca/Makefile: openssl-ca/Makefile.in config.status
	@$(CONFIG_STATUS) --file=$@:$<

docbook/Makefile: docbook/Makefile.in config.status
	@$(CONFIG_STATUS) --file=$@:$<

config.status: configure
	@echo Rebulding $<
	./config.status --recheck

$(srcdir)/configure: @CONFIGURE_DEP@
	cd $(srcdir) && autoconf

# Allow for update of aclocal.m4
aclocal:
	aclocal --acdir=$(HOME)/lib/aclocal


######################################################################
#
# Make sure configure-generates scripts are executable
#

chmod-utils: $(UTILS)
	chmod 755 $(UTILS)

chmod-tests: $(TEST_SCRIPTS)
	chmod 755 $(TEST_SCRIPTS)

.PHONY: chmod-utils chmod-tests

######################################################################
######################################################################
#
# configure-generated stuff
#

# If we have a target and that target exists with a ".in" suffix, then
# assume that is a prerequisite along with config.status and use
# config.status to regenerate it if needed.
% :: %.in config.status
	@$(CONFIG_STATUS) --file=$@:$<

######################################################################
# Include development portion of Makefile if we are in development
# mode. Otherwise this will be empty.

@MAKEFILE_DEV_INCLUDE@
