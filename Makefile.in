######################################################################
#
# Makefile for GridShib CA
#
# $Id$
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

srcdir = @srcdir@
VPATH = @srcdir@
prefix = @prefix@

# Mode: "build" if build is enabled; "dist" otherwise
MODE=@MODE@

SUBDIRS=@SUBDIRS@

######################################################################

# Trusted CA certificates to include in Jar trustStore
CA_CERTS = certificates/*.[0-9]

# Path to jar trustStore
TRUST_STORE = resources/trustStore

# Java Version file
VERSION_JAVA = edu/ncsa/gridshib/gridshibca/Version.java

# Project java sources
JAVA_SRCS = @JAVA_SRCS@ $(VERSION_JAVA)
JAVA_CLASSES = $(JAVA_SRCS:.java=.class)

# BouncyCastle source
BC_SOURCE=@BC_SOURCE@

# Password to pass into keytool. Not actually used for anything, just keeps
# keytool for prompting for one.
TRUST_STORE_PASSWD=abcdef

# Target jar file
JARFILE=@JAR_FILE@

# Unsigned jar file created during build
UNSIGNED_JARFILE=$(JARFILE:.jar=.unsigned.jar)

# Other files to include in jar
JAR_INCS=$(TRUST_STORE)

IMAGES=images/*.jpg \
	images/*.gif \
	images/*.png

CONFIGURE_GENERATED_SCRIPTS=@CONF_GENERATED_SCRIPTS@

HTML_INCS = @HTML_INCS@
HTML_DEPS = $(HTML_INCS:.html=.html.in) @HTML_DEPS@

# Perl module sources
PERL_MODULE_SRCS = perl/GridShibCA/*.pm.in
PERL_MODULES = @PERL_MODULES@

#
# Distribution configuration
#

# Directory to build distribution in
DIST_DIR=@DIST_DIR@


# Files to include in distribution
DIST_FILES=$(JARFILE) \
	configure \
	configure.ac \
	Makefile.in \
	install-sh \
	webdocs/*.in \
	$(IMAGES) \
	$(JAVA_SRCS) \
	utils/*.in \
	$(CA_CERTS) \
	LICENSE \
	gridshib-ca.conf.in \
	authorizedIdps.conf.in \
	authorizedPortals.conf.in \
	openssl-ca/Makefile.in \
	openssl-ca/*.[ch] \
	$(PERL_MODULE_SRCS)

# Distribution file
DIST_FILE=@DIST_FILE_BASE@.tar.gz

#
# Installation configuration
#

# Installation directories - see INSTALL.config
GRIDSHIB_CA_CONF_DIR=@GRIDSHIB_CA_CONF_DIR@
CONF_FILES=@CONF_FILES@
UTILS=@UTILS@
BINARIES=@BINARIES@
PERL_MODULE_DIR=$(GRIDSHIB_CA_CONF_DIR)/GridShibCA/
SHIB_PROTECTED_CGI_BIN_DIR=@SHIB_PROTECTED_CGI_BIN_DIR@
PROTECTED_CGI_BIN_FILES=@CGI_BIN_SCRIPTS@
GRIDSHIB_CA_HTML_DIR=@GRIDSHIB_CA_HTML_DIR@
GRIDSHIB_CA_DOC_DIR=@GRIDSHIB_CA_DOC_DIR@
CGI_DEMO_SCRIPTS=@CGI_DEMO_SCRIPTS@
CGI_BIN_DIR=@CGI_BIN_DIR@
DOC_FILES=@DOC_FILES@
HTML_FILES=$(IMAGES) \
	@HTML_FILES@ \
	$(JARFILE)
PERL_SCRIPTS= webdocs/*.pl webdocs/*.cgi utils/*.pl

# User that httpd runs under
WWW_USER=@WWW_USER@

# Type of CA to install
CA_TYPE=@CA_TYPE@

# Where we put autogenerated perl documentation locally
PERL_DOC_DIR=doc/perl

######################################################################
#
# Binaries and commands
#

INSTALL = @INSTALL@
MKDIR = mkdir
RMDIR = rmdir
CP = cp
TOUCH = touch
OPENSSL = @OPENSSL@

# Tools needed for building and distribution

JAVAC = @JAVAC@
JAVAC_OPTS= -sourcepath .:$(BC_SOURCE) #-source 1.4 -target 1.4
JAR = @JAR@
KEYTOOL = @KEYTOOL@
JARSIGNER = @JARSIGNER@
TAR = @TAR@
RM = rm
DIR_EXISTS = test -d
PERL = @PERL@
POD2HTML = @POD2HTML@
FIND = find

######################################################################

default: build-$(MODE)

all: configure-generated-scripts subdirs $(JARFILE)

clean: subdirs-clean bc-clean
	rm -f $(JAVA_CLASSES)

# Clean all BouncyCastle class files
bc-clean:
	$(FIND) $(BC_SOURCE) -name \*.class -exec $(RM) -f {} \;

realclean: clean
	rm -f $(CONFIGURE_GENERATED_SCRIPTS)
	rm -f $(TRUST_STORE)
	rm -f $(DIST_FILE)

build-dist:	configure-generated-scripts subdirs
	@echo "Run 'make install' to install."

subdirs:
	@for subdir in $(SUBDIRS) ; do \
		echo "Running make in $${subdir}:" ; \
		(cd $${subdir}; make) ; \
	done

subdirs-clean:
	for subdir in $(SUBDIRS) ; do \
		echo "Running 'make clean' in $${subdir}:" ; \
		(cd $${subdir}; make clean) ; \
	done

build-build:	build-mode $(JAVA_SRCS) $(JAVA_CLASSES) configure-generated-scripts

build-mode:
	@if test $(MODE) != "build" ; then \
		echo "Not configured for building." ; \
		echo "Rerun configure with --enable-build to enable building." ;\
		exit 1 ;\
	fi

jar: build-mode $(JARFILE)

class-files: $(JAVA_CLASSES)

$(UNSIGNED_JARFILE):	$(JAVA_CLASSES) $(JAR_INCS)
# Need to include the org.globus stuff here because one of the
# class files has a "$" in it and I haven't figured out any other
# way to do this and avoid getting it expanded.
	@echo Creating $@ from local class files
	$(JAR) cf $@ $^ org/globus/util/*.class
	@ echo Adding BouncyCastle class files
	@(pwd=`pwd` && cd $(BC_SOURCE) && jar uf $${pwd}/$@ `(cd $(BC_SOURCE) && $(FIND) org -name \*.class)`)

$(JARFILE): $(UNSIGNED_JARFILE)
	$(JARSIGNER) -storetype pkcs12 -signedjar $@ $^ default

%.class : %.java
	$(JAVAC) $(JAVAC_OPTS) $^

check-perl: configure-generated-scripts
	for script in $(PERL_SCRIPTS) ; do \
		$(PERL) -c -T -I./perl/ $${script} ; \
	done

######################################################################
#
# Distribution building
#

trustStore:	build-mode $(TRUST_STORE)

$(TRUST_STORE): ${CA_CERTS}
	@$(RM) -f $@
	@for cert in $^; do \
		echo Adding $${cert} to trustStore ;\
		${KEYTOOL} -import -keystore $@ -noprompt -alias $${cert} -storepass ${TRUST_STORE_PASSWD} -file $${cert} ;\
	done

dist:	build-mode $(DIST_FILE)

$(DIST_FILE): $(DIST_FILES) check-perl
	$(DIR_EXISTS) $(DIST_DIR) || $(MKDIR) $(DIST_DIR)
	@echo Copying files into $(DIST_DIR)
	@for file in $^; do \
		dir=`dirname $${file}` ;\
		$(DIR_EXISTS) $(DIST_DIR)/$${dir} || $(MKDIR) -p $(DIST_DIR)/$${dir} ;\
		$(CP) $${file} $(DIST_DIR)/$${dir} ;\
	done
	$(TAR) cfz $@ $(DIST_DIR)/*
	$(RM) -rf $(DIST_DIR)
	ls -l $(DIST_FILE)

######################################################################
#
# Token key installation
#

TOKEN_KEY=@GRIDSHIB_CA_CONF_DIR@/token-key

install-token-key: $(TOKEN_KEY)

# Generate a random password for encrypting tokens
$(TOKEN_KEY):
	@echo "Creating token key"
	@(umask 077 && $(OPENSSL) rand -base64 -out token-key 16)
	@$(INSTALL) -o $(WWW_USER) -m 0600 token-key $@
	@(rm -rf token-key)

######################################################################
#
# Installation
#

INSTALL_ALL=install-conf \
	install-binaries \
	install-perl \
	install-html \
	install-cgi \
	install-token-key

install: $(INSTALL_ALL)
	@echo "Installation done."

$(GRIDSHIB_CA_CONF_DIR):
	@echo "Creating $(GRIDSHIB_CA_CONF_DIR)"
	@$(INSTALL) -d -o $(WWW_USER) -m 0700 $(GRIDSHIB_CA_CONF_DIR)

install-conf: $(GRIDSHIB_CA_CONF_DIR)
	@for file in $(CONF_FILES) ; do \
		f=`basename $${file}` ;\
		if test -f $(GRIDSHIB_CA_CONF_DIR)/$${f} ; then \
			echo "Skipping install of $${file}" ; \
		else \
			echo "Installing $${file}" ;\
			$(INSTALL) -o $(WWW_USER) -m 0600 $${file} $(GRIDSHIB_CA_CONF_DIR) ;\
		fi \
	done

install-binaries: $(GRIDSHIB_CA_CONF_DIR) $(UTILS) $(BINARIES)
	@for file in $(UTILS) $(BINARIES) ; do \
		echo "Installing $${file}" ;\
		$(INSTALL) -o $(WWW_USER) -m 0700 $${file} $(GRIDSHIB_CA_CONF_DIR) ;\
	done

$(PERL_MODULE_DIR): $(GRIDSHIB_CA_CONF_DIR)
	@echo "Creating $(PERL_MODULE_DIR)"
	@$(INSTALL) -d -o $(WWW_USER) -m 0755 $(PERL_MODULE_DIR)

install-perl: $(PERL_MODULE_DIR) $(PERL_MODULES)
	@for file in $(PERL_MODULES) ; do \
		echo "Installing $${file}" ;\
		$(INSTALL) -o $(WWW_USER) -m 0700 $${file} $(PERL_MODULE_DIR) ;\
	done

$(GRIDSHIB_CA_HTML_DIR):
	@echo "Creating $(GRIDSHIB_CA_HTML_DIR)"
	@$(INSTALL) -d -o $(WWW_USER) -m 0755 $(GRIDSHIB_CA_HTML_DIR)

install-html: $(GRIDSHIB_CA_HTML_DIR)
	@for file in $(HTML_FILES) ; do \
		echo "Installing $${file}" ;\
		$(INSTALL) -o $(WWW_USER) -m 0644 $${file} $(GRIDSHIB_CA_HTML_DIR) ;\
	done

$(SHIB_PROTECTED_CGI_BIN_DIR):
	@echo "Creating $(SHIB_PROTECTED_CGI_BIN_DIR)"
	@$(INSTALL) -d -o $(WWW_USER) -m 0755 $(SHIB_PROTECTED_CGI_BIN_DIR)

install-cgi: $(SHIB_PROTECTED_CGI_BIN_DIR) $(PROTECTED_CGI_BIN_FILES)
	@for file in $(PROTECTED_CGI_BIN_FILES) ; do \
		echo "Installing $${file}" ;\
		$(INSTALL) -o $(WWW_USER) -m 0755 $${file} $(SHIB_PROTECTED_CGI_BIN_DIR) ;\
	done

install-demos:
	@for file in $(CGI_DEMO_SCRIPTS) ; do \
		echo "Installing $${file}" ;\
		$(INSTALL) -o $(WWW_USER) -m 0755 $${file} $(CGI_BIN_DIR) ;\
	done

uninstall:
	@for file in $(CONF_FILES) ; do \
		f=`basename $${file}` ;\
		echo "Uninstalling $${f}" ;\
		rm -f $(GRIDSHIB_CA_CONF_DIR)/$${f} ;\
	done
	@if $(DIR_EXISTS) $(GRIDSHIB_CA_CONF_DIR) ; then $(RMDIR) $(GRIDSHIB_CA_CONF_DIR) ; fi
	@for file in $(HTML_FILES) ; do \
		f=`basename $${file}` ;\
		echo "Uninstalling $${f}" ;\
		rm -f $(GRIDSHIB_CA_HTML_DIR)/$${f} ;\
	done
	@if $(DIR_EXISTS) $(GRIDSHIB_CA_HTML_DIR) ; then $(RMDIR) $(GRIDSHIB_CA_HTML_DIR) ; fi
	@for file in $(PROTECTED_CGI_BIN_FILES) ; do \
		f=`basename $${file}` ;\
		echo "Uninstalling $${f}" ;\
		rm -f $(PROTECTED_CGI_BIN_DIR)/$${f} ;\
	done
	@if $(DIR_EXISTS) $(SHIB_PROECTED_CGI_BIN_DIR) ; then $(RMDIR) $(SHIB_PROTECTED_CGI_BIN_DIR) ; fi
	@echo "Uninstall done."

######################################################################
#
# Documentation generation
#

doc: perl-doc

perl-doc: perl-module-doc perl-script-doc

$(PERL_DOC_DIR):
	@$(INSTALL) -d -m 0755 $(PERL_DOC_DIR)

POD2HTML_ROOT=/docs/$(DIST_DIR)/perl

perl-module-doc: $(PERL_DOC_DIR) configure-generated-scripts
	@echo "Building PERL Module HTML documentation..."
	@$(INSTALL) -d -m 0755 $(PERL_DOC_DIR)/GridShibCA
	@for script in perl/GridShibCA/*.pm ; do \
		f=`basename -s .pm $${script}` ;\
		t=GridShibCA::`basename $${script}` ;\
		echo $${t} ;\
		$(POD2HTML) --infile=$${script} --outfile=$(PERL_DOC_DIR)/GridShibCA/$${f}.html --title=$${t} --noindex --htmlroot=$(POD2HTML_ROOT) ;\
	done

perl-script-doc: $(PERL_DOC_DIR) configure-generated-scripts
	@echo "Building PERL Script HTML documentation..."
	@for script in utils/*.pl ; do \
		f=`basename -s .pl $${script}` ;\
		t=GridShibCA::`basename $${script}` ;\
		echo $${t} ;\
		$(POD2HTML) --infile=$${script} --outfile=$(PERL_DOC_DIR)/$${f}.html --title=$${t} --noindex --htmlroot=$(POD2HTML_ROOT) ;\
	done

######################################################################
#
# Allow for automatic regeneration of configure and Makefile
#

Makefile: Makefile.in config.status
	./config.status

openssl-ca/Makefile: openssl-ca/Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

$(srcdir)/configure: @CONFIGURE_DEP@
	cd $(srcdir) && autoconf

# Allow for update of aclocal.m4
aclocal:
	aclocal --acdir=$(HOME)/lib/aclocal

######################################################################
#
# configure-generated stuff
#

configure-generated-scripts: $(CONFIGURE_GENERATED_SCRIPTS)

%.html: %.html.in config.status $(HTML_DEPS)
	./config.status

# If we have a target and that target exists with a ".in" suffix, then
# assume that is a prerequisite along with config.status and use
# config.status to regenerate it if needed.
% :: %.in config.status
	./config.status

# All cgi programs rely on $(HTML_INCS) as well
%.cgi: %.cgi.in config.status $(HTML_INCS)
	./config.status

######################################################################

edu/ncsa/gridshib/gridshibca/Version: edu/ncsa/gridshib/gridshibca/Version.in config.status
	./config.status

# Only copy Version to Version.java when it has actually changed
# in order to prevent unnecessary rebuilds of jar file
$(VERSION_JAVA): edu/ncsa/gridshib/gridshibca/Version
	@if test -e $@ ; then \
	  if diff $@ $^ > /dev/null ; then \
	    : ;\
	  else \
	    echo "Updating Version.java" ;\
	    $(CP) $^ $@ ;\
	  fi ;\
	else \
	  echo "Creating Version.java" ;\
	  $(CP) $^ $@ ;\
	fi

######################################################################
#
# Allow me to rsync from development host to test host and gridshib
#web site. No one else needs to worry about this section. - Von

# -a Archive mode
# -u Update mode: newer files only
# -v Verbose
# -R use relative path names

RSYNC=rsync -auvR 
TEST_HOST=computer.ncsa.uiuc.edu

rsync: jar
	$(RSYNC) $(DIST_FILES) $(TEST_HOST):~/gridshib-ca

rsync-myproxy: jar
	$(RSYNC) $(DIST_FILES) $(TEST_HOST):~/gridshib-ca-myproxy

rsync-myvocs: jar
	$(RSYNC) $(DIST_FILES) $(TEST_HOST):~/myvocs-gridshib-ca

install-docs: $(DOC_FILES) doc
	chmod ag+r $(DOC_FILES)
	rsync -auvp $(DOC_FILES) welch@terra.mcs.anl.gov:gridshib.globus.org/docs/$(DIST_DIR)/

release: dist install-docs
	rsync -auv $(DIST_FILE) welch@terra.mcs.anl.gov:gridshib.globus.org/downloads/

