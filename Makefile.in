######################################################################
#
# Makefile for GridShib CA
#
# $Id$
#
######################################################################
# Copyright 2006 The Board of Trustees of the University of Illinois.
# All rights reserved.

# Developed by:

#   The GridShib Project
#   National Center for Supercomputing Applications
#   University of Illinois
#   http://gridshib.globus.org/

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal with the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

#   Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimers.

#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimers in the
#   documentation and/or other materials provided with the distribution.

#   Neither the names of the National Center for Supercomputing
#   Applications, the University of Illinois, nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this Software without specific prior written permission.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
# ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
######################################################################

srcdir = @srcdir@
VPATH = @srcdir@
prefix = @prefix@

# Mode: "build" if build is enabled; "dist" otherwise
MODE=@MODE@

# Enable demos, "true" or "false"
ENABLE_DEMOS=@ENABLE_DEMOS@

######################################################################
#
# Groups of files
#

# Image files
IMAGES=\
	images/*.jpg \
	images/*.gif \
	images/*.png

# Files include in runtime generated HTML through CGIinterface.pm
HTML_INCS = @HTML_INCS@

# Source files
CGI_BIN_SRCS = @CGI_BIN_SRCS@
HTML_SRCS = @HTML_SRCS@
CONF_SRCS = @CONF_SRCS@
UTIL_SRCS = @UTIL_SRCS@
PERL_MODULE_SRCS = @PERL_MODULE_SRCS@
DOC_SRCS = @DOC_SRCS@
OPENSSL_CA_SRCS = @OPENSSL_CA_SRCS@
CGI_DEMO_SRCS = @CGI_DEMO_SRCS@
TEST_SRCS = @TEST_SRCS@

# Groups of files
CONF_FILES=@CONF_FILES@
UTILS=@UTILS@
DEV_UTILS=@DEV_UTILS@
BINARIES=@BINARIES@
CGI_BIN_SCRIPTS=@CGI_BIN_SCRIPTS@
CGI_DEMO_SCRIPTS=@CGI_DEMO_SCRIPTS@
CGI_BIN_DIR=@CGI_BIN_DIR@
DOC_FILES=@DOC_FILES@
HTML_FILES=@HTML_FILES@
PERL_MODULES = @PERL_MODULES@
REQUIRED_PERL_MODULES = @REQUIRED_PERL_MODULES@
PERL_DIST_MODULES = @PERL_DIST_MODULES@
TEST_SCRIPTS = @TEST_SCRIPTS@

# Files to be distributed (will be added to through this file)
DIST_FILES=\
	$(IMAGES) \
	$(CGI_BIN_SRCS) \
	$(HTML_SRCS) \
	$(CONF_SRCS) \
	$(UTIL_SRCS) \
	$(PERL_MODULES_SRCS) \
	$(DOC_SRCS) \
	$(OPENSSL_CA_SRCS) \
	$(CGI_DEMO_SRCS) \
	$(TEST_SRCS)

# All files to be build by default
BUILD_ALL =\
	$(CONF_FILES) \
	$(UTILS) \
	$(BINARIES) \
	$(PERL_MODULES) \
	$(HTML_FILES) \
	$(CGI_BIN_SCRIPTS) \
	$(CGI_DEMO_SCRIPTS) \
	$(DEV_UTILS) \
	$(DOC_FILES) \
	$(TEST_SCRIPTS)

######################################################################
######################################################################
#
# Binaries and commands
#

INSTALL = @INSTALL@
MKDIR = @MKDIR@
RMDIR = @RMDIR@
CP = @CP@
TOUCH = @TOUCH@
OPENSSL = @OPENSSL@
RM = @RM@
CONFIG_STATUS = ./config.status

######################################################################
#
# Tools needed for building and distribution
#

JAVAC = @JAVAC@
JAVAC_OPTS= -sourcepath .:$(BC_SOURCE)

JAR = @JAR@
KEYTOOL = @KEYTOOL@
JARSIGNER = @JARSIGNER@
TAR = @TAR@
DIR_EXISTS = test -d
PERL = @PERL@
POD2HTML = @POD2HTML@
FIND = @FIND@

######################################################################
######################################################################
#
# Main targets to be invoked by user
#

default: build-$(MODE)

clean:: 
	rm -f $(JAVA_CLASSES)
	rm -f $(CONF_FILES)
	rm -f $(UTILS)
	rm -f $(HTML_FILES)
	rm -f $(CGI_BIN_SCRIPTS)
	rm -f $(HTML_INCS)
	rm -f $(BINARIES)

realclean:: clean

build-dist: subdirs $(BUILD_ALL) chmod-utils
	@echo Build complete. Run \"make install\" to install.

######################################################################
#
# Handle subdirectories
#

# Subdirectories we are building in
SUBDIRS=@SUBDIRS@

subdirs:
	@for subdir in $(SUBDIRS) ; do \
		echo "Running make in $${subdir}:" ; \
		(cd $${subdir}; make) ; \
	done

clean::
	@for subdir in $(SUBDIRS) ; do \
		echo "Running 'make clean' in $${subdir}:" ; \
		(cd $${subdir}; make clean) ; \
	done

######################################################################
#
# Make utilities executable
#

chmod-utils: $(UTILS)
	chmod 755 $(UTILS)

######################################################################
######################################################################
#
# Installation
#

# Installation directories
GRIDSHIB_CA_CONF_DIR=@GRIDSHIB_CA_CONF_DIR@
SHIB_PROTECTED_CGI_BIN_DIR=@SHIB_PROTECTED_CGI_BIN_DIR@
GRIDSHIB_CA_HTML_DIR=@GRIDSHIB_CA_HTML_DIR@
GRIDSHIB_CA_DOC_DIR=@GRIDSHIB_CA_DOC_DIR@

# User that httpd runs under
WWW_USER=@WWW_USER@

INSTALL_ALL=install-conf \
	install-binaries \
	install-perl \
	install-html \
	install-cgi \
	install-token-key \
	install-demos

install: $(INSTALL_ALL)
	@echo "Installation done."

$(GRIDSHIB_CA_CONF_DIR):
	@echo "Creating $(GRIDSHIB_CA_CONF_DIR)"
	@$(INSTALL) -d -o $(WWW_USER) -m 0700 $(GRIDSHIB_CA_CONF_DIR)

install-conf: $(GRIDSHIB_CA_CONF_DIR) $(CONF_FILES)
	@echo "Installing configuration to $(GRIDSHIB_CA_CONF_DIR)"
	@for file in $(CONF_FILES) ; do \
		f=`basename $${file}` ;\
		echo "Installing $${file}" ;\
		if test -f $(GRIDSHIB_CA_CONF_DIR)/$${f} ; then \
			echo "  Avoiding overwriting existing file." ;\
			$(INSTALL) -o $(WWW_USER) -m 0600 $${file} $(GRIDSHIB_CA_CONF_DIR)/$${f}.new ;\
		else \
			$(INSTALL) -o $(WWW_USER) -m 0600 $${file} $(GRIDSHIB_CA_CONF_DIR) ;\
		fi \
	done

install-binaries: $(GRIDSHIB_CA_CONF_DIR) $(UTILS) $(BINARIES)
	@echo "Installing binaries to $(GRIDSHIB_CA_CONF_DIR)"
	@for file in $(UTILS) $(BINARIES) ; do \
		echo "Installing $${file}" ;\
		$(INSTALL) -o $(WWW_USER) -m 0700 $${file} $(GRIDSHIB_CA_CONF_DIR) ;\
	done

install-perl: $(PERL_MODULES) $(PERL_DIST_MODULES)
	@echo "Installing perl modules to $(GRIDSHIB_CA_CONF_DIR)"
	@for file in $(PERL_MODULES) $(PERL_DIST_MODULES) ; do \
		echo "Installing $${file}" ;\
		d=`dirname $${file}` ;\
		$(INSTALL) -d -o $(WWW_USER) -m 0700 $(GRIDSHIB_CA_CONF_DIR)/$${d} ;\
		$(INSTALL) -o $(WWW_USER) -m 0700 $${file} $(GRIDSHIB_CA_CONF_DIR)/$${file} ;\
	done

$(GRIDSHIB_CA_HTML_DIR):
	@echo "Creating $(GRIDSHIB_CA_HTML_DIR)"
	@$(INSTALL) -d -o $(WWW_USER) -m 0755 $(GRIDSHIB_CA_HTML_DIR)

install-html: $(GRIDSHIB_CA_HTML_DIR) $(HTML_FILES) $(IMAGES) $(JARFILE)
	@echo "Installing html to $(GRIDSHIB_CA_HTML_DIR)"
	@for file in $(HTML_FILES) $(IMAGES) $(JARFILE) ; do \
		f=`basename $${file}` ;\
		echo "Installing $${file}" ;\
		if test -f $(GRIDSHIB_CA_HTML_DIR)/$${f} ; then \
			echo "  Avoiding overwriting existing file." ;\
			$(INSTALL) -o $(WWW_USER) -m 0644 $${file} $(GRIDSHIB_CA_HTML_DIR)/$${f}.new ;\
		else \
			$(INSTALL) -o $(WWW_USER) -m 0644 $${file} $(GRIDSHIB_CA_HTML_DIR) ;\
		fi \
	done

$(SHIB_PROTECTED_CGI_BIN_DIR):
	@echo "Creating $(SHIB_PROTECTED_CGI_BIN_DIR)"
	@$(INSTALL) -d -o $(WWW_USER) -m 0755 $(SHIB_PROTECTED_CGI_BIN_DIR)

install-cgi: $(SHIB_PROTECTED_CGI_BIN_DIR) $(CGI_BIN_SCRIPTS)
	@echo "Installing cgi-bin scripts to $(SHIB_PROTECTED_CGI_BIN_DIR)"
	@for file in $(CGI_BIN_SCRIPTS) ; do \
		echo "Installing $${file}" ;\
		$(INSTALL) -o $(WWW_USER) -m 0755 $${file} $(SHIB_PROTECTED_CGI_BIN_DIR) ;\
	done


$(CGI_BIN_DIR):
	@echo "Creating $(CGI_BIN_DIR)"
	@$(INSTALL) -d -o $(WWW_USER) -m 0755 $(CGI_BIN_DIR)

install-demos: $(CGI_DEMO_SCRIPTS) $(CGI_BIN_DIR)
	@if test $(ENABLE_DEMOS) = "true"; then \
		echo "Installing demo scripts to $(CGI_BIN_DIR)" ;\
		for file in $(CGI_DEMO_SCRIPTS) ; do \
			echo "Installing $${file}" ;\
			$(INSTALL) -o $(WWW_USER) -m 0755 $${file} $(CGI_BIN_DIR) ;\
		done ;\
	fi

######################################################################
#
# Token Key
#

TOKEN_KEY=$(GRIDSHIB_CA_CONF_DIR)/token-key

install-token-key: $(TOKEN_KEY)

# Generate a random password for encrypting tokens
$(TOKEN_KEY):
	@echo "Creating token key"
	@(umask 077 && $(OPENSSL) rand -base64 -out token-key 16)
	@$(INSTALL) -o $(WWW_USER) -m 0600 token-key $@
	@($(RM) -rf token-key)

######################################################################
#
# Uninstall
#

uninstall:
	@for file in $(CONF_FILES) ; do \
		f=`basename $${file}` ;\
		echo "Uninstalling $${f}" ;\
		rm -f $(GRIDSHIB_CA_CONF_DIR)/$${f} ;\
	done
	@if $(DIR_EXISTS) $(GRIDSHIB_CA_CONF_DIR) ; then $(RMDIR) $(GRIDSHIB_CA_CONF_DIR) ; fi
	@for file in $(HTML_FILES) ; do \
		f=`basename $${file}` ;\
		echo "Uninstalling $${f}" ;\
		rm -f $(GRIDSHIB_CA_HTML_DIR)/$${f} ;\
	done
	@if $(DIR_EXISTS) $(GRIDSHIB_CA_HTML_DIR) ; then $(RMDIR) $(GRIDSHIB_CA_HTML_DIR) ; fi
	@for file in $(PROTECTED_CGI_BIN_FILES) ; do \
		f=`basename $${file}` ;\
		echo "Uninstalling $${f}" ;\
		rm -f $(PROTECTED_CGI_BIN_DIR)/$${f} ;\
	done
	@if $(DIR_EXISTS) $(SHIB_PROECTED_CGI_BIN_DIR) ; then $(RMDIR) $(SHIB_PROTECTED_CGI_BIN_DIR) ; fi
	@echo "Uninstall done."

######################################################################
#
# Trust store
#

# Trusted CA certificates to include in Jar trustStore
CA_CERTS = certificates/*.[0-9]
DIST_FILES += $(CA_CERTS)

# Path to jar trustStore
TRUST_STORE = resources/trustStore
DIST_FILES += $(TRUST_STORE)

# Password to pass into keytool. Not actually used for anything, just keeps
# keytool for prompting for one.
TRUST_STORE_PASSWD=abcdef

trustStore:	build-mode $(TRUST_STORE)

$(TRUST_STORE): ${CA_CERTS}
	@$(RM) -f $@
	@$(DIR_EXISTS) resources || $(MKDIR) resources
	@for cert in $^; do \
		echo Adding $${cert} to trustStore ;\
		${KEYTOOL} -import -keystore $@ -noprompt -alias $${cert} -storepass ${TRUST_STORE_PASSWD} -file $${cert} ;\
	done

realclean::
	$(RM) -f $(TRUST_STRORE)

######################################################################
######################################################################
#
# Development mode
#

build-build: java-prebuild jar build-dist

build-mode:
	@if test $(MODE) != "build" ; then \
		echo "Not configured for building." ; \
		echo "Rerun configure with --enable-build to enable building." ;\
		exit 1 ;\
	fi

######################################################################
#
# Java files
#

# Project java files
JAVA_CLASSES = @JAVA_CLASSES@
JAVA_SRCS = $(JAVA_CLASSES:.class=.java)

DIST_FILES += $(JAVA_SRCS)

# BouncyCastle source directory
BC_SOURCE=@BC_SOURCE@

class-files: build-mode $(JAVA_CLASSES)

%.class : %.java
	$(JAVAC) $(JAVAC_OPTS) $^

clean::
	rm -f $(JAVA_CLASSES)

# Clean all BouncyCastle class files
bc-clean:
	$(FIND) $(BC_SOURCE) -name \*.class -exec $(RM) -f {} \;

######################################################################
#
# Handle generation of Version.java
#

VERSION_BASE = edu/ncsa/gridshib/gridshibca/Version
VERSION_JAVA = $(VERSION_BASE).java
VERSION_IN = $(VERSION_BASE).in

$(VERSON_BASE): $(VERSION_IN) config.status
	@echo Creating $@
	@$(CONFIG_STATUS) --file=$@:$<

# Only copy Version to Version.java when it has actually changed
# in order to prevent unnecessary rebuilds of jar file
$(VERSION_JAVA): $(VERSION_BASE)
	@if test -e $@ ; then \
	  if diff $@ $^ > /dev/null ; then \
	    : ;\
	  else \
	    echo "Updating Version.java" ;\
	    $(CP) $^ $@ ;\
	  fi ;\
	else \
	  echo "Creating Version.java" ;\
	  $(CP) $^ $@ ;\
	fi

java-prebuild:: build-mode $(VERSION_JAVA)

realclean::
	$(RM) -f $(VERSION_JAVA)

######################################################################
#
# Jar
#

# Target jar file
JARFILE=@JAR_FILE@
DIST_FILES += $(JARFILE)

# Unsigned jar file created during build
UNSIGNED_JARFILE=$(JARFILE:.jar=.unsigned.jar)

# Other files to include in jar
JAR_INCS=$(TRUST_STORE)

jar: build-mode $(JARFILE)

$(UNSIGNED_JARFILE):	$(JAVA_CLASSES) $(JAR_INCS)
# Need to include the org.globus stuff here because one of the
# class files has a "$" in it and I haven't figured out any other
# way to do this and avoid getting it expanded.
	@echo Creating $@ from local class files
	$(JAR) cf $@ $^ org/globus/util/*.class
	@ echo Adding BouncyCastle class files
	@(pwd=`pwd` && cd $(BC_SOURCE) && jar uf $${pwd}/$@ `(cd $(BC_SOURCE) && $(FIND) org -name \*.class)`)

$(JARFILE): $(UNSIGNED_JARFILE)
	$(JARSIGNER) -storetype pkcs12 -signedjar $@ $^ default

clean::
	$(RM) -f $(JARFILE)

realclean::
	$(RM) -f $(UNSIGNED_JARFILE)

######################################################################
######################################################################
#
# Perl
#

PERL_SCRIPTS= $(CGI_BIN_SCRIPTS) $(UTILS)

DIST_FILES += $(PERL_DIST_MODULES)
DIST_FILES += $(PERL_MODULE_SRCS)

check-perl: $(PERL_SCRIPTS) $(REQUIRED_PERL_MODULES)
	@for script in $^ ; do \
		echo Checking $${script} ;\
		$(PERL) -c -T -I./perl/ $${script} || exit 1 ;\
	done

clean::
	$(RM) -f $(PERL_MODULES)

######################################################################
######################################################################
#
# Documentation generation
#

# Files included in generated documentation
DOC_INCS = @DOC_INCS@
DIST_FILES += $(DOC_INCS)

# Generated documentation
DOC_FILES = @DOC_FILES@

# Extra documentation files
EXTRA_DOC_FILES = @EXTRA_DOC_FILES@

# Directory name for installed documentation
# Dont include release status on documentation directory
DOC_INSTALL_DIR=@DOC_INSTALL_DIR@

doc: perl-doc $(DOC_FILES)

# Documentation files also depend on $(DOC_INCS)
$(DOC_FILES): $(DOC_INCS)

doc-clean:: 
	$(RM) -f $(DOC_FILES)

realclean:: doc-clean

######################################################################
######################################################################
#
# Distribution building
#

# Directory to build distribution in
DIST_DIR=@DIST_DIR@

# Extra files to distribute
DIST_EXTRA_FILES=@DIST_EXTRA_FILES@

# Files to include in distribution
DIST_FILES += $(DIST_EXTRA_FILES)

# Distribution file
DIST_FILE=@DIST_TARBALL_NAME@

dist:	build-mode $(DIST_FILE)

$(DIST_FILE): $(DIST_FILES)
	$(DIR_EXISTS) $(DIST_DIR) || $(MKDIR) $(DIST_DIR)
	@echo Copying files into $(DIST_DIR)
	@for file in $^; do \
		echo $${file} ;\
		dir=`dirname $${file}` ;\
		$(DIR_EXISTS) $(DIST_DIR)/$${dir} || $(MKDIR) -p $(DIST_DIR)/$${dir} ;\
		$(CP) $${file} $(DIST_DIR)/$${dir} ;\
	done
	$(TAR) cfz $@ $(DIST_DIR)/*
	$(RM) -rf $(DIST_DIR)
	ls -l $(DIST_FILE)

clean::
	$(RM) -rf $(DIST_DIR)

realclean::
	$(RM) -f $(DIST_FILE)

######################################################################
#
# Generated perl documentation
#
# It will be great to figure out dependacies for the following rules.

# Where we put autogenerated perl documentation locally
PERL_DOC_DIR=@PERL_DOC_DIR@

perl-doc: perl-module-doc perl-script-doc

$(PERL_DOC_DIR):
	@$(INSTALL) -d -m 0755 $(PERL_DOC_DIR)

doc-clean::
	$(RM) -rf $(PERL_DOC_DIR)

POD2HTML_ROOT=/docs/$(DOC_INSTALL_DIR)/perl

perl-module-doc: $(PERL_DOC_DIR) $(PERL_MODULES)
	@$(INSTALL) -d -m 0755 $(PERL_DOC_DIR)/GridShibCA
	@for script in $(PERL_MODULES) ; do \
	  f=`basename -s .pm $${script}` ;\
	  t=GridShibCA::`basename $${script}` ;\
	  out=$(PERL_DOC_DIR)/GridShibCA/$${f}.html ;\
	  if test $${script} -nt $${out} ; then \
	    echo "Generating docs for $${t}" ;\
	    $(POD2HTML) --infile=$${script} --outfile=$${out} --title=$${t} --noindex --htmlroot=$(POD2HTML_ROOT) ;\
	  fi ;\
	done

perl-script-doc: $(PERL_DOC_DIR) $(UTILS)
	@for script in $(UTILS) ; do \
	  f=`basename -s .pl $${script}` ;\
	  t=GridShibCA::`basename $${script}` ;\
	  out=$(PERL_DOC_DIR)/$${f}.html ;\
	  if test $${script} -nt $${out} ; then \
	    echo "Generating docs for $${t}" ;\
	    $(POD2HTML) --infile=$${script} --outfile=$${out} --title=$${t} --noindex --htmlroot=$(POD2HTML_ROOT) ;\
	  fi ;\
	done

realclean::
	$(RM) -rf $(PERL_DOC_DIR)

######################################################################
#
# Tests
#

test: chmod-tests check-perl test-openssl-ca test-myproxy-mapapp

test-openssl-ca: openssl-ca/openssl-ca-test.sh
	openssl-ca/openssl-ca-test.sh

test-post-install: test-cert-issue

test-cert-issue:
	${GRIDSHIB_CA_CONF_DIR}/issue-cert.pl testuser@openidp.org  urn:mace:inqueue:openidp.org

test-myproxy-mapapp: utils/myproxy-mapapp.pl
	@echo "Calling myproxy-mapapp.pl with good DN."
	@if utils/myproxy-mapapp.pl "@OPENSSL_RELATIVE_DN@/Test User" ; then \
		echo "Success." ;\
	else \
		echo "myproxy-mapapp.pl failed." ;\
		exit 1 ;\
	fi
	@echo "Calling myproxy-mapapp.pl with bogus DN."
	@if utils/myproxy-mapapp.pl "/C=Bogus/CN=DN" ; then \
		echo "myproxy-appmapp.pl accepted bogus DN." ;\
		exit 1 ;\
	else \
		echo "Success." ;\
	fi

chmod-tests: $(TEST_SCRIPTS)
	chmod 755 $(TEST_SCRIPTS)

test-dist: dist
	@echo Testing distribution $(DIST_FILE)
	@/bin/sh test/test-dist.sh $(DIST_FILE)

######################################################################
######################################################################
#
# Allow for automatic regeneration of configure and Makefile
#

# If config.status gets regenerated here, Makefile gets regenerated
# twice. Not ideal, but not sure what the workaround is.
Makefile: Makefile.in config.status
	@$(CONFIG_STATUS) --file=$@:$<

openssl-ca/Makefile: openssl-ca/Makefile.in config.status
	@$(CONFIG_STATUS) --file=$@:$<

config.status: configure
	@echo Rebulding $<
	./config.status --recheck

$(srcdir)/configure: @CONFIGURE_DEP@
	cd $(srcdir) && autoconf

# Allow for update of aclocal.m4
aclocal:
	aclocal --acdir=$(HOME)/lib/aclocal

######################################################################
######################################################################
#
# configure-generated stuff
#

# If we have a target and that target exists with a ".in" suffix, then
# assume that is a prerequisite along with config.status and use
# config.status to regenerate it if needed.
% :: %.in config.status
	@$(CONFIG_STATUS) --file=$@:$<

######################################################################
######################################################################
#
# Allow me to rsync from development host to test host and gridshib
# web site. No one else needs to worry about this section. - Von

# -a Archive mode
# -u Update mode: newer files only
# -v Verbose
# -R use relative path names

RSYNC=rsync -auvR 
TEST_HOST=computer.ncsa.uiuc.edu

rsync-test: $(DIST_FILES)
	@echo Rsyncing to $(TEST_HOST)
	@$(RSYNC) $(DIST_FILES) $(TEST_HOST):~/gridshib-ca-test

rsync-test2: $(DIST_FILES)
	@echo Rsyncing to $(TEST_HOST)
	@$(RSYNC) $(DIST_FILES) $(TEST_HOST):~/gridshib-ca-test2

rsync-myproxy: $(DIST_FILES)
	@echo Rsyncing to $(TEST_HOST)
	@$(RSYNC) $(DIST_FILES) $(TEST_HOST):~/gridshib-ca-myproxy

install-doc: doc
	@echo Rsyncing docs to gridshib.globus.org
	@chmod -R ag+r $(DOC_FILES) $(EXTRA_DOC_FILES) $(PERL_DOC_DIR) 
	@rsync -auvp $(DOC_FILES) $(EXTRA_DOC_FILES) $(PERL_DOC_DIR) welch@cvs.globus.org:gridshib.globus.org/docs/$(DOC_INSTALL_DIR)

release: dist install-doc
	@rsync -auv $(DIST_FILE) welch@cvs.globus.org:gridshib.globus.org/downloads/

NMI_HOST = grandcentral.cs.wisc.edu
NMI_FILES = @NMI_FILES@

nmi-test: dist $(NMI_FILES)
	@echo Uploading $(DIST_FILE)
	@rsync -auvp $(DIST_FILE) welch@cvs.globus.org:gridshib.globus.org/downloads/nmi-testing/
	@echo Transferring NMI test files
	@rsync -auvp $(NMI_FILES) $(NMI_HOST):
	@echo Submitting NMI job
	@ssh $(NMI_HOST) /nmi/bin/nmi_submit gridshib-ca-cmdfile
	@echo Done.
	@echo URL: "http://grandcentral.cs.wisc.edu/pavlo/index.php?page=results%2Foverview&opt_project=GridShib&rows=100"

