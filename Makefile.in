######################################################################
#
# Makefile for GridShib CA
#
######################################################################

srcdir = @srcdir@
VPATH = @srcdir@
prefix = @prefix@

# Mode: "build" if build is enabled; "dist" otherwise
MODE=@MODE@

######################################################################
#
# Groups of files
#

# Name of our client jar
JAR_NAME = @JAR_NAME@

# Path to our client jar
JAR_PATH = @JAR_PATH@

# Image files
IMAGES=\
	images/*.jpg \
	images/*.gif \
	images/*.png

# Source files
WEBAPP_SRCS = @WEBAPP_SRCS@
SHIB_WEBAPP_SRCS = @SHIB_WEBAPP_SRCS@
CONF_SRCS = @CONF_SRCS@
UTIL_SRCS = @UTIL_SRCS@
PERL_MODULE_SRCS = @PERL_MODULE_SRCS@
OPENSSL_CA_SRCS = @OPENSSL_CA_SRCS@
TEST_SRCS = @TEST_SRCS@
PYTHON_SCRIPT_SRCS = @PYTHON_SCRIPT_SRCS@

# Groups of files
CONF_FILES=@CONF_FILES@
UTILS=@UTILS@
DEV_UTILS=@DEV_UTILS@
BINARIES=@BINARIES@
WEBAPPS=@WEBAPPS@
SHIB_WEBAPPS=@SHIB_WEBAPPS@
PERL_MODULES = @PERL_MODULES@
PYTHON_SCRIPTS = @PYTHON_SCRIPTS@
REQUIRED_PERL_MODULES = @REQUIRED_PERL_MODULES@
PERL_DIST_MODULES = @PERL_DIST_MODULES@
TEMPLATE_FILES = @TEMPLATE_FILES@
TEST_SCRIPTS = @TEST_SCRIPTS@

# Files to be distributed (will be added to through this file)
DIST_FILES=\
	$(IMAGES) \
	$(WEBAPP_SRCS) \
	$(SHIB_WEBAPP_SRCS) \
	$(CONF_SRCS) \
	$(UTIL_SRCS) \
	$(PERL_MODULES_SRCS) \
	$(PYTHON_SCRIPT_SRCS) \
	$(OPENSSL_CA_SRCS) \
	$(TEMPLATE_FILES) \
	$(TEST_SRCS) \
	$(JAR_PATH)

# All files to be build by default
BUILD_ALL =\
	$(CONF_FILES) \
	$(UTILS) \
	$(BINARIES) \
	$(PERL_MODULES) \
	$(PYTHON_SCRIPTS) \
	$(WEBAPPS) \
	$(SHIB_WEBAPPS) \
	$(DEV_UTILS) \
	$(TEST_SCRIPTS)

######################################################################
######################################################################
#
# Binaries and commands
#

INSTALL = @INSTALL@
MKDIR = @MKDIR@
RMDIR = @RMDIR@
CP = @CP@
TOUCH = @TOUCH@
OPENSSL = @OPENSSL@
RM = @RM@
GPG = @GPG@

CONFIG_STATUS = ./config.status
ENV = @ENV@

######################################################################
#
# Installation short cuts
#

# Root user
ROOT_USER=@ROOT_USER@

# User and group that httpd runs under
WWW_USER=@WWW_USER@
WWW_GROUP=@WWW_GROUP@

INSTALL_ROOT_OWNED = $(INSTALL) -o $(ROOT_USER) -g $(WWW_GROUP) -m 0640
INSTALL_APACHE_OWNED = $(INSTALL) -o $(WWW_USER) -g $(WWW_GROUP) -m 0640
INSTALL_ROOT_EXECUTABLE = $(INSTALL) -o $(ROOT_USER) -g $(WWW_GROUP) -m 0700
INSTALL_APACHE_EXECUTABLE = $(INSTALL) -o $(ROOT_USER) -g $(WWW_GROUP) -m 0750
MKDIR_ROOT_OWNED = $(INSTALL) -d -o $(ROOT_USER) -g $(WWW_GROUP) -m 0750
MKDIR_APACHE_OWNED = $(INSTALL) -d -o $(WWW_USER) -g $(WWW_GROUP) -m 0750

######################################################################
#
# Tools needed for building and distribution
#

TAR = @TAR@
DIR_EXISTS = test -d
PERL = @PERL@
POD2HTML = @POD2HTML@
FIND = @FIND@
ANT = @ANT@
KEYTOOL = @KEYTOOL@

######################################################################
######################################################################
#
# Main targets to be invoked by user
#

default: build-$(MODE)

# Only clean up stuff that cannot be regenerated in distribution
clean:: 
	rm -f $(CONF_FILES)
	rm -f $(UTILS)
	rm -f $(HTML_FILES)
	rm -f $(WEBAPPS)
	rm -f $(SHIB_WEBAPPS)
	rm -f $(BINARIES)

# Clean up everything
realclean:: clean
	rm -f *~
	rm -f *.tmp

build-dist: subdirs $(BUILD_ALL)
	@echo Build complete. Run \"make install\" to install.

######################################################################
#
# Handle subdirectories
#

# Subdirectories we are building in
SUBDIRS=@SUBDIRS@

# Path to our JWS client
GRIDSHIBCACLIENT_PATH=java/GridShibCAClient

subdirs: $(SUBDIRS) $(GRIDSHIBCACLIENT_PATH)

$(SUBDIRS):
	$(MAKE) $@/Makefile
	$(MAKE) -C $@

realclean clean::
	@for subdir in $(SUBDIRS) ; do \
		echo "Running 'make $@' in $${subdir}:" ; \
		(cd $${subdir}; $(MAKE) $@) ; \
	done

#
# java/GridShibCAClient
#

jar: $(JAR_PATH)

JAR_DEPS=@JAR_DEPS@

$(JAR_PATH): $(JAR_DEPS)
	cd $(GRIDSHIBCACLIENT_PATH) && $(ANT) gsca-jar

$(GRIDSHIBCACLIENT_PATH): $(JAR_PATH)

javaclean: 
	cd $(GRIDSHIBCACLIENT_PATH) && $(ANT) clean

TRUSTSTORE = $(GRIDSHIBCACLIENT_PATH)/resources/trustStore
TRUSTSTORE_CERTS = $(GRIDSHIBCACLIENT_PATH)/trusted-https-certs/*.[0-9]
# Bogus password, not needed but keeps keytool from prompting for one
TRUSTSTORE_PASSWD=abcdef

truststore: $(TRUSTSTORE)

$(TRUSTSTORE): $(TRUSTSTORE_CERTS)
	@$(RM) -f $@
	@for cert in $^; do \
		certname=`basename $${cert}` ;\
		echo Adding $${certname} to trustStore ;\
		$(KEYTOOL) -import \
			-keystore $@ \
			-noprompt \
			-alias $${certname} \
			-storepass ${TRUSTSTORE_PASSWD} \
			-file $${cert} ;\
	done

realclean::
	$(RM) -f $(TRUSTSTORE)

$(GRIDSHIBCACLIENT_PATH)/gsca.properties: $(GRIDSHIBCACLIENT_PATH)/gsca.properties.in config.status
	@$(CONFIG_STATUS) --file=$@:$<

$(GRIDSHIBCACLIENT_PATH)/resources/properties: $(GRIDSHIBCACLIENT_PATH)/resources/properties.in config.status
	@$(CONFIG_STATUS) --file=$@:$<

clean:: javaclean

realclean:: javaclean

.PHONY: subdirs $(SUBDIRS) jar javaclean $(GRIDSHIBCACLIENT_PATH)

######################################################################
######################################################################
#
# Installation
#

# Configuration directory and subdirectories
GRIDSHIB_CA_CONF_DIR=@GRIDSHIB_CA_CONF_DIR@
INSTALL_CERTS_DIR=@INSTALL_CERTS_DIR@
INSTALL_TEMPLATES_DIR=@INSTALL_TEMPLATES_DIR@
INSTALL_CONF_DIR=@INSTALL_CONF_DIR@
INSTALL_BIN_DIR=@INSTALL_BIN_DIR@
INSTALL_PERL_DIR=@INSTALL_PERL_DIR@
INSTALL_MYPROXY_DIR=@INSTALL_MYPROXY_DIR@
INSTALL_OPENSSL_CA_DIR=@INSTALL_OPENSSL_CA_DIR@

# Directories under Apache docroot
GRIDSHIB_CA_WEB_PATH=@GRIDSHIB_CA_WEB_PATH@
SHIB_PROTECTED_PATH=@SHIB_PROTECTED_PATH@

GRIDSHIB_CA_RUNTIME_PATH=@GRIDSHIB_CA_RUNTIME_PATH@

INSTALL_BASE=\
	install-binaries \
	install-perl \
	install-python \
	install-jar \
	install-webapps \
	install-shib-webapps \
	install-runtime \
	install-openssl-ca \
	install-myproxy \
	$(INSTALL_CERTS_DIR)

# install-conf and install-templates will not overwrite existing files
INSTALL_ALL=\
	$(INSTALL_BASE) \
        install-conf \
        install-templates

# install-*-force will overwrite existing files
INSTALL_FORCE=\
	$(INSTALL_BASE) \
        install-conf-force \
	install-templates-force

install: $(INSTALL_ALL)
	@echo "Installation done."

# Force overwrite of configuration and templates
install-force: $(INSTALL_FORCE) 
	@echo "Installation done."

# Base directory, owned by root, readable by Apache
$(GRIDSHIB_CA_CONF_DIR):
	@echo "Creating $@"
	@$(MKDIR_ROOT_OWNED) $@

# These directories are owned by root and readable by Apache
ROOT_OWNED_DIRS=\
	$(INSTALL_TEMPLATES_DIR) \
	$(INSTALL_CONF_DIR) \
	$(INSTALL_BIN_DIR) \
	$(INSTALL_PERL_DIR) \
	$(INSTALL_MYPROXY_DIR) \
	$(INSTALL_OPENSSL_CA_DIR)

$(ROOT_OWNED_DIRS): $(GRIDSHIB_CA_CONF_DIR)
	@echo "Creating $@"
	@$(MKDIR_ROOT_OWNED) $@

# These directories are owned by Apache
APACHE_OWNED_DIRS=\
	$(INSTALL_CERTS_DIR)

$(APACHE_OWNED_DIRS): $(GRIDSHIB_CA_CONF_DIR)
	@echo "Creating $@"
	@$(MKDIR_APACHE_OWNED) $@

install-conf: $(INSTALL_CONF_DIR) $(CONF_FILES)
	@echo "Installing configuration in $(INSTALL_CONF_DIR)"
	@for file in $(CONF_FILES) ; do \
		f=`basename $${file}` ;\
		target=$(INSTALL_CONF_DIR)/$${f} ;\
		echo "Installing $${file}" ;\
		if test -f $${target} ; then \
			echo "  Avoiding overwriting existing file." ;\
			target=$${target}.new ;\
		fi ;\
		$(INSTALL_ROOT_OWNED) $${file} $${target} ;\
        done

install-conf-force: $(GRIDSHIB_CA_CONF_DIR) $(CONF_FILES)
	@echo "Force installing configuration to $(GRIDSHIB_CA_CONF_DIR)"
	@for file in $(CONF_FILES) ; do \
		f=`basename $${file}` ;\
		target=$(INSTALL_CONF_DIR)/$${f} ;\
		echo "Installing $${file}" ;\
		$(INSTALL_ROOT_OWNED) $${file} $${target} ;\
	done

# TODO: This results in openssl-ca also being installed in bin dir,
#       duplicating the install in INSTALL_OPENSSL_CA_DIR. Make this
#       not so for hygiene reasons.
install-binaries: $(INSTALL_BIN_DIR) $(UTILS) $(BINARIES)
	@echo "Installing binaries to $(INSTALL_BIN_DIR)"
	@for file in $(UTILS) $(BINARIES) ; do \
		echo "Installing $${file}" ;\
		$(INSTALL_ROOT_EXECUTABLE) $${file} $(INSTALL_BIN_DIR) ;\
	done

OPENSSL_CA_BINARY = openssl-ca/openssl-ca

install-openssl-ca: $(INSTALL_OPENSSL_CA_DIR) $(OPENSSL_CA_BINARY)
	@echo "Installing openssl-ca binary in $(INSTALL_OPENSSL_CA_DIR)"
	@$(INSTALL_APACHE_EXECUTABLE) openssl-ca/openssl-ca $(INSTALL_OPENSSL_CA_DIR)

# We don't actually install anything for MyProxy, just create the
# directory for the installer.
install-myproxy: $(INSTALL_MYPROXY_DIR)

install-python: $(PYHON_SCRIPTS) $(GRIDSHIB_CA_WEB_PATH)
	@echo "Installing python scripts to $(GRIDSHIB_CA_WEB_PATH)"
	@for file in $(PYTHON_SCRIPTS) ; do \
		echo "Installing $${file}" ;\
		$(INSTALL_ROOT_OWNED) $${file} $(GRIDSHIB_CA_WEB_PATH) ;\
	done

install-perl: $(INSTALL_PERL_DIR) $(PERL_MODULES) $(PERL_DIST_MODULES)
	@echo "Installing perl modules to $(INSTALL_PERL_DIR)"
	@for file in $(PERL_MODULES) $(PERL_DIST_MODULES) ; do \
		echo "Installing $${file}" ;\
		d=`dirname $${file}` ;\
		$(MKDIR_ROOT_OWNED) $(GRIDSHIB_CA_CONF_DIR)/$${d} ;\
		$(INSTALL_ROOT_OWNED) $${file} $(GRIDSHIB_CA_CONF_DIR)/$${file} ;\
	done

$(GRIDSHIB_CA_WEB_PATH):
	@echo "Creating $(GRIDSHIB_CA_WEB_PATH)"
	@$(MKDIR_ROOT_OWNED) $(GRIDSHIB_CA_WEB_PATH)

install-jar: $(GRIDSHIB_CA_WEB_PATH) $(JAR_PATH)
	@echo "Installing $(JAR_PATH) to $(GRIDSHIB_CA_WEB_PATH)"
	@$(INSTALL_ROOT_OWNED) $(JAR_PATH) $(GRIDSHIB_CA_WEB_PATH)

install-webapps: $(GRIDSHIB_CA_WEB_PATH) $(WEBAPPS)
	@echo "Installing webapps to $(GRIDSHIB_CA_WEB_PATH)"
	@for file in $(WEBAPPS) ; do \
		echo "Installing $${file}" ;\
		$(INSTALL_APACHE_EXECUTABLE) $${file} $(GRIDSHIB_CA_WEB_PATH) ;\
	done

install-templates: $(INSTALL_TEMPLATES_DIR)
	@echo "Installing templates to $(INSTALL_TEMPLATES_DIR)"
	@for file in $(TEMPLATE_FILES) ; do \
		f=`basename $${file}` ;\
		target=$(INSTALL_TEMPLATES_DIR)/$${f} ;\
		echo "Installing $${file}" ;\
		if test -f $${target} ; then \
			echo "  Avoiding overwriting existing file." ;\
			target=$${target}.new ;\
		fi ;\
		$(INSTALL_ROOT_OWNED) $${file} $${target} ;\
	done

install-templates-force: $(INSTALL_TEMPLATES_DIR)
	@echo "Installing templates to $(INSTALL_TEMPLATES_DIR)"
	@for file in $(TEMPLATE_FILES) ; do \
		f=`basename $${file}` ;\
		target=$(INSTALL_TEMPLATES_DIR)/$${f} ;\
		echo "Installing $${file}" ;\
		$(INSTALL_ROOT_OWNED) $${file} $${target} ;\
	done

$(SHIB_PROTECTED_PATH):
	@echo "Creating $(SHIB_PROTECTED_PATH)"
	@$(MKDIR_ROOT_OWNED) $(SHIB_PROTECTED_PATH)

install-shib-webapps: $(SHIB_PROTECTED_PATH) $(SHIB_WEBAPPS)
	@echo "Installing Shibboleth-protected cgi-bin scripts to $(SHIB_PROTECTED_PATH)"
	@for file in $(SHIB_WEBAPPS) ; do \
		echo "Installing $${file}" ;\
		$(INSTALL_APACHE_EXECUTABLE) $${file} $(SHIB_PROTECTED_PATH) ;\
	done

install-runtime: $(GRIDSHIB_CA_RUNTIME_PATH)

# TODO: install returns a misleading error if it cannot create this
# directory ("cannot change owner and permissions of
# `/var/run/gridshib-ca': No such file or directory"). Add a test to
# verify install won't fail.
$(GRIDSHIB_CA_RUNTIME_PATH):
	@echo "Creating $(GRIDSHIB_CA_RUNTIME_PATH)"
	@$(MKDIR_APACHE_OWNED) $(GRIDSHIB_CA_RUNTIME_PATH)

######################################################################
#
# Uninstall
#

uninstall:
	@for file in $(CONF_FILES) ; do \
		f=`basename $${file}` ;\
		echo "Uninstalling $${f}" ;\
		rm -f $(GRIDSHIB_CA_CONF_DIR)/$${f} ;\
	done
	@if $(DIR_EXISTS) $(GRIDSHIB_CA_CONF_DIR) ; then $(RMDIR) $(GRIDSHIB_CA_CONF_DIR) ; fi
	@for file in $(HTML_FILES) ; do \
		f=`basename $${file}` ;\
		echo "Uninstalling $${f}" ;\
		rm -f $(GRIDSHIB_CA_WEB_PATH)/$${f} ;\
	done
	@if $(DIR_EXISTS) $(GRIDSHIB_CA_WEB_PATH) ; then $(RMDIR) $(GRIDSHIB_CA_WEB_PATH) ; fi
	@for file in $(PROTECTED_CGI_BIN_FILES) ; do \
		f=`basename $${file}` ;\
		echo "Uninstalling $${f}" ;\
		rm -f $(PROTECTED_CGI_BIN_DIR)/$${f} ;\
	done
	@if $(DIR_EXISTS) $(SHIB_PROECTED_CGI_BIN_DIR) ; then $(RMDIR) $(SHIB_PROTECTED_PATH) ; fi
	@echo "Uninstall done."

######################################################################
######################################################################
#
# Development mode
#

build-build: build-mode build-dist

build-mode:
	@if test $(MODE) != "build" ; then \
		echo "Not configured for building." ; \
		echo "Rerun configure with --enable-build to enable building." ;\
		exit 1 ;\
	fi

######################################################################
#
# Perl
#

PERL_SCRIPTS= $(SHIB_CGI_BIN_SCRIPTS) $(CGI_BIN_SCRIPTS) $(UTILS)

DIST_FILES += $(PERL_DIST_MODULES)
DIST_FILES += $(PERL_MODULE_SRCS)

check-perl: $(PERL_SCRIPTS) $(REQUIRED_PERL_MODULES)
	@for script in $^ ; do \
		echo Checking $${script} ;\
		$(PERL) -wc -T -I./perl/ $${script} || exit 1 ;\
	done

test:: check-perl

clean::
	$(RM) -f $(PERL_MODULES)

######################################################################
#
# Documentation
#

DOC_DIR = @DOC_DIR@

doc::

doc-clean::

realclean:: doc-clean

# Don't let fact 'doc' directory exists keep us from making documentation
.PHONY: doc

######################################################################
#
# Generated perl documentation
#
# TODO: Figure out dependancies for the following rules.

# Where we put autogenerated perl documentation locally
PERL_DOC_DIR = @PERL_DOC_DIR@
PERL_SCRIPTS_DOC_DIR = $(PERL_DOC_DIR)/scripts
PERL_MODULES_DOC_DIR = $(PERL_DOC_DIR)/GridShibCA

perl-doc: perl-module-doc perl-script-doc
	@chmod -R ag+r $(PERL_DOC_DIR)

doc:: perl-doc

perl-doc-clean::
	@$(RM) -rf $(PERL_SCRIPTS_DOC_DIR)
	@$(RM) -rf $(PERL_MODULES_DOC_DIR)

doc-clean:: perl-doc-clean

$(PERL_SCRIPTS_DOC_DIR):
	@$(INSTALL) -d -m 0755 $(PERL_SCRIPTS_DOC_DIR)

$(PERL_MODULES_DOC_DIR):
	@$(INSTALL) -d -m 0755 $(PERL_MODULES_DOC_DIR)

POD2HTML_ROOT=/gridshib-ca/docs/gridshib-ca-2.0.0/perl/

# Program to cleanup pod2html output
# Currently this removes the xml header
CLEAN_POD2HTML=dev-utils/clean-pod2html.sh

$(CLEAN_POD2HTML): $(CLEAN_POD2HTML).in config.status
	@$(CONFIG_STATUS) --file=$@:$<

perl-module-doc: $(PERL_MODULES_DOC_DIR) $(PERL_MODULES)
	@chmod +x $(CLEAN_POD2HTML)
	@for script in $(PERL_MODULES) ; do \
	  f=`basename -s .pm $${script}` ;\
	  t=GridShibCA::`basename $${script}` ;\
	  out=$(PERL_DOC_DIR)/GridShibCA/$${f}.html ;\
	  if test $${script} -nt $${out} ; then \
	    echo "Generating docs for $${t}" ;\
	    $(POD2HTML) --infile=$${script} --outfile=$${out} --title=$${t} --noindex --htmlroot=$(POD2HTML_ROOT) ;\
            $(CLEAN_POD2HTML) $${out} ;\
	  fi ;\
	done

perl-script-doc: $(PERL_SCRIPTS_DOC_DIR) $(UTILS)
	@for script in $(UTILS) ; do \
	  f=`basename -s .pl $${script}` ;\
	  t=GridShibCA::`basename $${script}` ;\
	  out=$(PERL_SCRIPTS_DOC_DIR)/$${f}.html ;\
	  if test $${script} -nt $${out} ; then \
	    echo "Generating docs for $${t}" ;\
	    $(POD2HTML) --infile=$${script} --outfile=$${out} --title=$${t} --noindex --htmlroot=$(POD2HTML_ROOT) ;\
            $(CLEAN_POD2HTML) $${out} ;\
	  fi ;\
	done

######################################################################
######################################################################
#
# Distribution building
#

# Directory to build distribution in
DIST_DIR=@DIST_DIR@

# Extra files to distribute
DIST_EXTRA_FILES=@DIST_EXTRA_FILES@

# Files to include in distribution
DIST_FILES += $(DIST_EXTRA_FILES)

# Distribution file
DIST_FILE=@DIST_TARBALL_NAME@

# Distribution signature
DIST_SIG_FILE=${DIST_FILE}.asc

dist:	build-mode $(DIST_FILE)

$(DIST_FILE): $(DIST_FILES)
	$(DIR_EXISTS) $(DIST_DIR) || $(MKDIR) $(DIST_DIR)
	@echo Copying files into $(DIST_DIR)
	@for file in $^; do \
		echo $${file} ;\
		dir=`dirname $${file}` ;\
		$(DIR_EXISTS) $(DIST_DIR)/$${dir} || $(MKDIR) -p $(DIST_DIR)/$${dir} ;\
		$(CP) -R $${file} $(DIST_DIR)/$${dir} ;\
	done
	$(TAR) cfz $@ $(DIST_DIR)/*
	$(RM) -rf $(DIST_DIR)
	ls -l $(DIST_FILE)

# Allow for building all distribution files, but not distibution itself
dist-files: $(DIST_FILES)

clean::
	$(RM) -rf $(DIST_DIR)

realclean::
	$(RM) -f $(DIST_FILE)

#
# Allow for gpg signing of file
#
dist-sign: dist $(DIST_SIG_FILE)

$(DIST_SIG_FILE): $(DIST_FILE)
	$(RM) -f $(DIST_SIG_FILE)
	$(GPG) --detach-sign --armor $(DIST_FILE) && ls -l $(DIST_SIG_FILE)

######################################################################
#
# Tests
#

# Command to run perl scripts so they can get to modules in build directory
PERL_TEST=${ENV} PERLLIB=./perl/ PERL5LIB=./perl/

test-openssl-ca: openssl-ca/openssl-ca-test.sh openssl-ca
	@chmod 755 openssl-ca/openssl-ca-test.sh
	openssl-ca/openssl-ca-test.sh

test:: test-openssl-ca

test-config: ${PERL_MODULES} utils/check-config.pl conf/gridshib-ca.conf
	$(PERL_TEST) utils/check-config.pl conf/gridshib-ca.conf

test:: test-config

test-cert-issue:
	@echo "Testing basic certificate issuance:"
	${INSTALL_BIN_DIR}/issue-cert.pl testuser@fakeidp.org  urn:mace:incommon:fakeidp
	@echo "Testing with ePTID-like Id:"
	${INSTALL_BIN_DIR}/issue-cert.pl eptid:like/id@fakeidp.org  urn:mace:incommon:fakeidp

test-post-install:: test-cert-issue

test-myproxy-mapapp: utils/myproxy-mapapp.pl
	@chmod 755 utils/myproxy-mapapp.pl
	@echo "Calling myproxy-mapapp.pl with good DN."
	@if utils/myproxy-mapapp.pl "@OPENSSL_RELATIVE_DN@/Test User" ; then \
		echo "Success." ;\
	else \
		echo "myproxy-mapapp.pl failed." ;\
		exit 1 ;\
	fi
	@echo "Calling myproxy-mapapp.pl with bogus DN."
	@if utils/myproxy-mapapp.pl "/C=Bogus/CN=DN" ; then \
		echo "myproxy-appmapp.pl accepted bogus DN." ;\
		exit 1 ;\
	else \
		echo "Success." ;\
	fi

test:: test-myproxy-mapapp

######################################################################
######################################################################
#
# Allow for automatic regeneration of configure and Makefile
#

# If config.status gets regenerated here, Makefile gets regenerated
# twice. Not ideal, but not sure what the workaround is.
Makefile: Makefile.in config.status
	@$(CONFIG_STATUS) --file=$@:$<

openssl-ca/Makefile: openssl-ca/Makefile.in config.status
	@$(CONFIG_STATUS) --file=$@:$<

config.status: configure
	@echo Rebulding $<
	./config.status --recheck

$(srcdir)/configure: @CONFIGURE_DEP@
	cd $(srcdir) && autoconf

# Allow for update of aclocal.m4
aclocal:
	aclocal --acdir=$(HOME)/lib/aclocal

######################################################################
######################################################################
#
# configure-generated stuff
#

# If we have a target and that target exists with a ".in" suffix, then
# assume that is a prerequisite along with config.status and use
# config.status to regenerate it if needed.
% :: %.in config.status
	@$(CONFIG_STATUS) --file=$@:$<

######################################################################
# Include development portion of Makefile if we are in development
# mode. Otherwise this will be empty.

@MAKEFILE_DEV_INCLUDE@
